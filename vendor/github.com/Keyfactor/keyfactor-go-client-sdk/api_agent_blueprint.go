/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// AgentBlueprintApiService AgentBlueprintApi service
type AgentBlueprintApiService service

type ApiAgentBlueprintApplyBlueprintRequest struct {
	ctx context.Context
	ApiService *AgentBlueprintApiService
	templateId *string
	xKeyfactorRequestedWith *string
	agentIds *[]string
	xKeyfactorApiVersion *string
}

// Agent blueprint to apply to the agents
func (r ApiAgentBlueprintApplyBlueprintRequest) TemplateId(templateId string) ApiAgentBlueprintApplyBlueprintRequest {
	r.templateId = &templateId
	return r
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentBlueprintApplyBlueprintRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentBlueprintApplyBlueprintRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Agents to apply the blueprints to
func (r ApiAgentBlueprintApplyBlueprintRequest) AgentIds(agentIds []string) ApiAgentBlueprintApplyBlueprintRequest {
	r.agentIds = &agentIds
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentBlueprintApplyBlueprintRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentBlueprintApplyBlueprintRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiAgentBlueprintApplyBlueprintRequest) Execute() (*http.Response, error) {
	return r.ApiService.AgentBlueprintApplyBlueprintExecute(r)
}

/*
AgentBlueprintApplyBlueprint Applies the selected agent blueprint to the provided agents

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAgentBlueprintApplyBlueprintRequest
*/
func (a *AgentBlueprintApiService) AgentBlueprintApplyBlueprint(ctx context.Context) ApiAgentBlueprintApplyBlueprintRequest {
	return ApiAgentBlueprintApplyBlueprintRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AgentBlueprintApiService) AgentBlueprintApplyBlueprintExecute(r ApiAgentBlueprintApplyBlueprintRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentBlueprintApiService.AgentBlueprintApplyBlueprint")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AgentBluePrint/ApplyBlueprint"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.templateId == nil {
		return nil, reportError("templateId is required and must be specified")
	}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.agentIds == nil {
		return nil, reportError("agentIds is required and must be specified")
	}

	parameterAddToQuery(localVarQueryParams, "templateId", r.templateId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.agentIds
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAgentBlueprintDeleteBlueprintRequest struct {
	ctx context.Context
	ApiService *AgentBlueprintApiService
	id string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentBlueprintDeleteBlueprintRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentBlueprintDeleteBlueprintRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentBlueprintDeleteBlueprintRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentBlueprintDeleteBlueprintRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiAgentBlueprintDeleteBlueprintRequest) Execute() (*http.Response, error) {
	return r.ApiService.AgentBlueprintDeleteBlueprintExecute(r)
}

/*
AgentBlueprintDeleteBlueprint Deletes an agent blueprint by its Keyfactor identifier

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Keyfactor agent blueprint identifier (GUID)
 @return ApiAgentBlueprintDeleteBlueprintRequest
*/
func (a *AgentBlueprintApiService) AgentBlueprintDeleteBlueprint(ctx context.Context, id string) ApiAgentBlueprintDeleteBlueprintRequest {
	return ApiAgentBlueprintDeleteBlueprintRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AgentBlueprintApiService) AgentBlueprintDeleteBlueprintExecute(r ApiAgentBlueprintDeleteBlueprintRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentBlueprintApiService.AgentBlueprintDeleteBlueprint")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AgentBluePrint/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAgentBlueprintGenerateBlueprintRequest struct {
	ctx context.Context
	ApiService *AgentBlueprintApiService
	agentId *string
	name *string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Agent to generate a blueprint from
func (r ApiAgentBlueprintGenerateBlueprintRequest) AgentId(agentId string) ApiAgentBlueprintGenerateBlueprintRequest {
	r.agentId = &agentId
	return r
}

// Name of the new agent blueprint
func (r ApiAgentBlueprintGenerateBlueprintRequest) Name(name string) ApiAgentBlueprintGenerateBlueprintRequest {
	r.name = &name
	return r
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentBlueprintGenerateBlueprintRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentBlueprintGenerateBlueprintRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentBlueprintGenerateBlueprintRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentBlueprintGenerateBlueprintRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiAgentBlueprintGenerateBlueprintRequest) Execute() (*KeyfactorApiModelsOrchestratorsAgentBlueprintResponse, *http.Response, error) {
	return r.ApiService.AgentBlueprintGenerateBlueprintExecute(r)
}

/*
AgentBlueprintGenerateBlueprint Generates an agent blueprint from the provided agents

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAgentBlueprintGenerateBlueprintRequest
*/
func (a *AgentBlueprintApiService) AgentBlueprintGenerateBlueprint(ctx context.Context) ApiAgentBlueprintGenerateBlueprintRequest {
	return ApiAgentBlueprintGenerateBlueprintRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KeyfactorApiModelsOrchestratorsAgentBlueprintResponse
func (a *AgentBlueprintApiService) AgentBlueprintGenerateBlueprintExecute(r ApiAgentBlueprintGenerateBlueprintRequest) (*KeyfactorApiModelsOrchestratorsAgentBlueprintResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KeyfactorApiModelsOrchestratorsAgentBlueprintResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentBlueprintApiService.AgentBlueprintGenerateBlueprint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AgentBluePrint/GenerateBluePrint"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.agentId == nil {
		return localVarReturnValue, nil, reportError("agentId is required and must be specified")
	}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	parameterAddToQuery(localVarQueryParams, "agentId", r.agentId, "")
	parameterAddToQuery(localVarQueryParams, "name", r.name, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentBlueprintGetAgentBlueprintRequest struct {
	ctx context.Context
	ApiService *AgentBlueprintApiService
	id string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentBlueprintGetAgentBlueprintRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentBlueprintGetAgentBlueprintRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentBlueprintGetAgentBlueprintRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentBlueprintGetAgentBlueprintRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiAgentBlueprintGetAgentBlueprintRequest) Execute() (*KeyfactorApiModelsOrchestratorsAgentBlueprintResponse, *http.Response, error) {
	return r.ApiService.AgentBlueprintGetAgentBlueprintExecute(r)
}

/*
AgentBlueprintGetAgentBlueprint Returns an agent blueprint according to the provided filter and output parameters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Returns a single agent blueprint associated with the provided id
 @return ApiAgentBlueprintGetAgentBlueprintRequest
*/
func (a *AgentBlueprintApiService) AgentBlueprintGetAgentBlueprint(ctx context.Context, id string) ApiAgentBlueprintGetAgentBlueprintRequest {
	return ApiAgentBlueprintGetAgentBlueprintRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KeyfactorApiModelsOrchestratorsAgentBlueprintResponse
func (a *AgentBlueprintApiService) AgentBlueprintGetAgentBlueprintExecute(r ApiAgentBlueprintGetAgentBlueprintRequest) (*KeyfactorApiModelsOrchestratorsAgentBlueprintResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KeyfactorApiModelsOrchestratorsAgentBlueprintResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentBlueprintApiService.AgentBlueprintGetAgentBlueprint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AgentBluePrint/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentBlueprintGetAgentBlueprintsRequest struct {
	ctx context.Context
	ApiService *AgentBlueprintApiService
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
	pqPageReturned *int32
	pqReturnLimit *int32
	pqSortField *string
	pqSortAscending *int32
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentBlueprintGetAgentBlueprintsRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentBlueprintGetAgentBlueprintsRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentBlueprintGetAgentBlueprintsRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentBlueprintGetAgentBlueprintsRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// The current page within the result set to be returned
func (r ApiAgentBlueprintGetAgentBlueprintsRequest) PqPageReturned(pqPageReturned int32) ApiAgentBlueprintGetAgentBlueprintsRequest {
	r.pqPageReturned = &pqPageReturned
	return r
}

// Maximum number of records to be returned in a single call
func (r ApiAgentBlueprintGetAgentBlueprintsRequest) PqReturnLimit(pqReturnLimit int32) ApiAgentBlueprintGetAgentBlueprintsRequest {
	r.pqReturnLimit = &pqReturnLimit
	return r
}

// Field by which the results should be sorted (OperationStart, OperationEnd, UserName)
func (r ApiAgentBlueprintGetAgentBlueprintsRequest) PqSortField(pqSortField string) ApiAgentBlueprintGetAgentBlueprintsRequest {
	r.pqSortField = &pqSortField
	return r
}

// Field sort direction [0&#x3D;ascending, 1&#x3D;descending]
func (r ApiAgentBlueprintGetAgentBlueprintsRequest) PqSortAscending(pqSortAscending int32) ApiAgentBlueprintGetAgentBlueprintsRequest {
	r.pqSortAscending = &pqSortAscending
	return r
}

func (r ApiAgentBlueprintGetAgentBlueprintsRequest) Execute() ([]KeyfactorApiModelsOrchestratorsAgentBlueprintResponse, *http.Response, error) {
	return r.ApiService.AgentBlueprintGetAgentBlueprintsExecute(r)
}

/*
AgentBlueprintGetAgentBlueprints Returns all agent blueprints according to the provided filter and output parameters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAgentBlueprintGetAgentBlueprintsRequest
*/
func (a *AgentBlueprintApiService) AgentBlueprintGetAgentBlueprints(ctx context.Context) ApiAgentBlueprintGetAgentBlueprintsRequest {
	return ApiAgentBlueprintGetAgentBlueprintsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KeyfactorApiModelsOrchestratorsAgentBlueprintResponse
func (a *AgentBlueprintApiService) AgentBlueprintGetAgentBlueprintsExecute(r ApiAgentBlueprintGetAgentBlueprintsRequest) ([]KeyfactorApiModelsOrchestratorsAgentBlueprintResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KeyfactorApiModelsOrchestratorsAgentBlueprintResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentBlueprintApiService.AgentBlueprintGetAgentBlueprints")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AgentBluePrint"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.pqPageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "pq.pageReturned", r.pqPageReturned, "")
	}
	if r.pqReturnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "pq.returnLimit", r.pqReturnLimit, "")
	}
	if r.pqSortField != nil {
		parameterAddToQuery(localVarQueryParams, "pq.sortField", r.pqSortField, "")
	}
	if r.pqSortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "pq.sortAscending", r.pqSortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentBlueprintGetBlueprintJobsRequest struct {
	ctx context.Context
	ApiService *AgentBlueprintApiService
	id string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
	pqPageReturned *int32
	pqReturnLimit *int32
	pqSortField *string
	pqSortAscending *int32
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentBlueprintGetBlueprintJobsRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentBlueprintGetBlueprintJobsRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentBlueprintGetBlueprintJobsRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentBlueprintGetBlueprintJobsRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// The current page within the result set to be returned
func (r ApiAgentBlueprintGetBlueprintJobsRequest) PqPageReturned(pqPageReturned int32) ApiAgentBlueprintGetBlueprintJobsRequest {
	r.pqPageReturned = &pqPageReturned
	return r
}

// Maximum number of records to be returned in a single call
func (r ApiAgentBlueprintGetBlueprintJobsRequest) PqReturnLimit(pqReturnLimit int32) ApiAgentBlueprintGetBlueprintJobsRequest {
	r.pqReturnLimit = &pqReturnLimit
	return r
}

// Field by which the results should be sorted (OperationStart, OperationEnd, UserName)
func (r ApiAgentBlueprintGetBlueprintJobsRequest) PqSortField(pqSortField string) ApiAgentBlueprintGetBlueprintJobsRequest {
	r.pqSortField = &pqSortField
	return r
}

// Field sort direction [0&#x3D;ascending, 1&#x3D;descending]
func (r ApiAgentBlueprintGetBlueprintJobsRequest) PqSortAscending(pqSortAscending int32) ApiAgentBlueprintGetBlueprintJobsRequest {
	r.pqSortAscending = &pqSortAscending
	return r
}

func (r ApiAgentBlueprintGetBlueprintJobsRequest) Execute() ([]KeyfactorApiModelsOrchestratorsAgentBlueprintJobsResponse, *http.Response, error) {
	return r.ApiService.AgentBlueprintGetBlueprintJobsExecute(r)
}

/*
AgentBlueprintGetBlueprintJobs Gets the agent blueprint scheduled jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAgentBlueprintGetBlueprintJobsRequest
*/
func (a *AgentBlueprintApiService) AgentBlueprintGetBlueprintJobs(ctx context.Context, id string) ApiAgentBlueprintGetBlueprintJobsRequest {
	return ApiAgentBlueprintGetBlueprintJobsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []KeyfactorApiModelsOrchestratorsAgentBlueprintJobsResponse
func (a *AgentBlueprintApiService) AgentBlueprintGetBlueprintJobsExecute(r ApiAgentBlueprintGetBlueprintJobsRequest) ([]KeyfactorApiModelsOrchestratorsAgentBlueprintJobsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KeyfactorApiModelsOrchestratorsAgentBlueprintJobsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentBlueprintApiService.AgentBlueprintGetBlueprintJobs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AgentBluePrint/{id}/Jobs"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.pqPageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "pq.pageReturned", r.pqPageReturned, "")
	}
	if r.pqReturnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "pq.returnLimit", r.pqReturnLimit, "")
	}
	if r.pqSortField != nil {
		parameterAddToQuery(localVarQueryParams, "pq.sortField", r.pqSortField, "")
	}
	if r.pqSortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "pq.sortAscending", r.pqSortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentBlueprintGetBlueprintStoresRequest struct {
	ctx context.Context
	ApiService *AgentBlueprintApiService
	id string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
	pqPageReturned *int32
	pqReturnLimit *int32
	pqSortField *string
	pqSortAscending *int32
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentBlueprintGetBlueprintStoresRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentBlueprintGetBlueprintStoresRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentBlueprintGetBlueprintStoresRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentBlueprintGetBlueprintStoresRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// The current page within the result set to be returned
func (r ApiAgentBlueprintGetBlueprintStoresRequest) PqPageReturned(pqPageReturned int32) ApiAgentBlueprintGetBlueprintStoresRequest {
	r.pqPageReturned = &pqPageReturned
	return r
}

// Maximum number of records to be returned in a single call
func (r ApiAgentBlueprintGetBlueprintStoresRequest) PqReturnLimit(pqReturnLimit int32) ApiAgentBlueprintGetBlueprintStoresRequest {
	r.pqReturnLimit = &pqReturnLimit
	return r
}

// Field by which the results should be sorted (OperationStart, OperationEnd, UserName)
func (r ApiAgentBlueprintGetBlueprintStoresRequest) PqSortField(pqSortField string) ApiAgentBlueprintGetBlueprintStoresRequest {
	r.pqSortField = &pqSortField
	return r
}

// Field sort direction [0&#x3D;ascending, 1&#x3D;descending]
func (r ApiAgentBlueprintGetBlueprintStoresRequest) PqSortAscending(pqSortAscending int32) ApiAgentBlueprintGetBlueprintStoresRequest {
	r.pqSortAscending = &pqSortAscending
	return r
}

func (r ApiAgentBlueprintGetBlueprintStoresRequest) Execute() ([]KeyfactorApiModelsOrchestratorsAgentBlueprintStoresResponse, *http.Response, error) {
	return r.ApiService.AgentBlueprintGetBlueprintStoresExecute(r)
}

/*
AgentBlueprintGetBlueprintStores Gets the agent blueprint certificate stores

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAgentBlueprintGetBlueprintStoresRequest
*/
func (a *AgentBlueprintApiService) AgentBlueprintGetBlueprintStores(ctx context.Context, id string) ApiAgentBlueprintGetBlueprintStoresRequest {
	return ApiAgentBlueprintGetBlueprintStoresRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []KeyfactorApiModelsOrchestratorsAgentBlueprintStoresResponse
func (a *AgentBlueprintApiService) AgentBlueprintGetBlueprintStoresExecute(r ApiAgentBlueprintGetBlueprintStoresRequest) ([]KeyfactorApiModelsOrchestratorsAgentBlueprintStoresResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KeyfactorApiModelsOrchestratorsAgentBlueprintStoresResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentBlueprintApiService.AgentBlueprintGetBlueprintStores")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AgentBluePrint/{id}/Stores"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.pqPageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "pq.pageReturned", r.pqPageReturned, "")
	}
	if r.pqReturnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "pq.returnLimit", r.pqReturnLimit, "")
	}
	if r.pqSortField != nil {
		parameterAddToQuery(localVarQueryParams, "pq.sortField", r.pqSortField, "")
	}
	if r.pqSortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "pq.sortAscending", r.pqSortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
