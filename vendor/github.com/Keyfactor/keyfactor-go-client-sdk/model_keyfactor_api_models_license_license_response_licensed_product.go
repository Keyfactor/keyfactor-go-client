/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the KeyfactorApiModelsLicenseLicenseResponseLicensedProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorApiModelsLicenseLicenseResponseLicensedProduct{}

// KeyfactorApiModelsLicenseLicenseResponseLicensedProduct struct for KeyfactorApiModelsLicenseLicenseResponseLicensedProduct
type KeyfactorApiModelsLicenseLicenseResponseLicensedProduct struct {
	ProductId *string `json:"ProductId,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty"`
	MajorRev *string `json:"MajorRev,omitempty"`
	MinorRev *string `json:"MinorRev,omitempty"`
	LicensedFeatures []KeyfactorApiModelsLicenseLicenseResponseLicensedFeature `json:"LicensedFeatures,omitempty"`
}

// NewKeyfactorApiModelsLicenseLicenseResponseLicensedProduct instantiates a new KeyfactorApiModelsLicenseLicenseResponseLicensedProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorApiModelsLicenseLicenseResponseLicensedProduct() *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct {
	this := KeyfactorApiModelsLicenseLicenseResponseLicensedProduct{}
	return &this
}

// NewKeyfactorApiModelsLicenseLicenseResponseLicensedProductWithDefaults instantiates a new KeyfactorApiModelsLicenseLicenseResponseLicensedProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorApiModelsLicenseLicenseResponseLicensedProductWithDefaults() *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct {
	this := KeyfactorApiModelsLicenseLicenseResponseLicensedProduct{}
	return &this
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetProductId() string {
	if o == nil || isNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetProductIdOk() (*string, bool) {
	if o == nil || isNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) HasProductId() bool {
	if o != nil && !isNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) SetProductId(v string) {
	o.ProductId = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetMajorRev returns the MajorRev field value if set, zero value otherwise.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetMajorRev() string {
	if o == nil || isNil(o.MajorRev) {
		var ret string
		return ret
	}
	return *o.MajorRev
}

// GetMajorRevOk returns a tuple with the MajorRev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetMajorRevOk() (*string, bool) {
	if o == nil || isNil(o.MajorRev) {
		return nil, false
	}
	return o.MajorRev, true
}

// HasMajorRev returns a boolean if a field has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) HasMajorRev() bool {
	if o != nil && !isNil(o.MajorRev) {
		return true
	}

	return false
}

// SetMajorRev gets a reference to the given string and assigns it to the MajorRev field.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) SetMajorRev(v string) {
	o.MajorRev = &v
}

// GetMinorRev returns the MinorRev field value if set, zero value otherwise.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetMinorRev() string {
	if o == nil || isNil(o.MinorRev) {
		var ret string
		return ret
	}
	return *o.MinorRev
}

// GetMinorRevOk returns a tuple with the MinorRev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetMinorRevOk() (*string, bool) {
	if o == nil || isNil(o.MinorRev) {
		return nil, false
	}
	return o.MinorRev, true
}

// HasMinorRev returns a boolean if a field has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) HasMinorRev() bool {
	if o != nil && !isNil(o.MinorRev) {
		return true
	}

	return false
}

// SetMinorRev gets a reference to the given string and assigns it to the MinorRev field.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) SetMinorRev(v string) {
	o.MinorRev = &v
}

// GetLicensedFeatures returns the LicensedFeatures field value if set, zero value otherwise.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetLicensedFeatures() []KeyfactorApiModelsLicenseLicenseResponseLicensedFeature {
	if o == nil || isNil(o.LicensedFeatures) {
		var ret []KeyfactorApiModelsLicenseLicenseResponseLicensedFeature
		return ret
	}
	return o.LicensedFeatures
}

// GetLicensedFeaturesOk returns a tuple with the LicensedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetLicensedFeaturesOk() ([]KeyfactorApiModelsLicenseLicenseResponseLicensedFeature, bool) {
	if o == nil || isNil(o.LicensedFeatures) {
		return nil, false
	}
	return o.LicensedFeatures, true
}

// HasLicensedFeatures returns a boolean if a field has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) HasLicensedFeatures() bool {
	if o != nil && !isNil(o.LicensedFeatures) {
		return true
	}

	return false
}

// SetLicensedFeatures gets a reference to the given []KeyfactorApiModelsLicenseLicenseResponseLicensedFeature and assigns it to the LicensedFeatures field.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) SetLicensedFeatures(v []KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) {
	o.LicensedFeatures = v
}

func (o KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ProductId) {
		toSerialize["ProductId"] = o.ProductId
	}
	if !isNil(o.DisplayName) {
		toSerialize["DisplayName"] = o.DisplayName
	}
	if !isNil(o.MajorRev) {
		toSerialize["MajorRev"] = o.MajorRev
	}
	if !isNil(o.MinorRev) {
		toSerialize["MinorRev"] = o.MinorRev
	}
	if !isNil(o.LicensedFeatures) {
		toSerialize["LicensedFeatures"] = o.LicensedFeatures
	}
	return toSerialize, nil
}

type NullableKeyfactorApiModelsLicenseLicenseResponseLicensedProduct struct {
	value *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct
	isSet bool
}

func (v NullableKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) Get() *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct {
	return v.value
}

func (v *NullableKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) Set(val *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorApiModelsLicenseLicenseResponseLicensedProduct(val *KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) *NullableKeyfactorApiModelsLicenseLicenseResponseLicensedProduct {
	return &NullableKeyfactorApiModelsLicenseLicenseResponseLicensedProduct{value: val, isSet: true}
}

func (v NullableKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


