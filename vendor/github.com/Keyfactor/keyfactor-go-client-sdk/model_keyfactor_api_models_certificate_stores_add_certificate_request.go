/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the KeyfactorApiModelsCertificateStoresAddCertificateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorApiModelsCertificateStoresAddCertificateRequest{}

// KeyfactorApiModelsCertificateStoresAddCertificateRequest struct for KeyfactorApiModelsCertificateStoresAddCertificateRequest
type KeyfactorApiModelsCertificateStoresAddCertificateRequest struct {
	CertificateId int32 `json:"CertificateId"`
	CertificateStores []ModelsCertificateStoreEntry `json:"CertificateStores"`
	Schedule KeyfactorCommonSchedulingKeyfactorSchedule `json:"Schedule"`
	CollectionId *int32 `json:"CollectionId,omitempty"`
}

// NewKeyfactorApiModelsCertificateStoresAddCertificateRequest instantiates a new KeyfactorApiModelsCertificateStoresAddCertificateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorApiModelsCertificateStoresAddCertificateRequest(certificateId int32, certificateStores []ModelsCertificateStoreEntry, schedule KeyfactorCommonSchedulingKeyfactorSchedule) *KeyfactorApiModelsCertificateStoresAddCertificateRequest {
	this := KeyfactorApiModelsCertificateStoresAddCertificateRequest{}
	this.CertificateId = certificateId
	this.CertificateStores = certificateStores
	this.Schedule = schedule
	return &this
}

// NewKeyfactorApiModelsCertificateStoresAddCertificateRequestWithDefaults instantiates a new KeyfactorApiModelsCertificateStoresAddCertificateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorApiModelsCertificateStoresAddCertificateRequestWithDefaults() *KeyfactorApiModelsCertificateStoresAddCertificateRequest {
	this := KeyfactorApiModelsCertificateStoresAddCertificateRequest{}
	return &this
}

// GetCertificateId returns the CertificateId field value
func (o *KeyfactorApiModelsCertificateStoresAddCertificateRequest) GetCertificateId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CertificateId
}

// GetCertificateIdOk returns a tuple with the CertificateId field value
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresAddCertificateRequest) GetCertificateIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateId, true
}

// SetCertificateId sets field value
func (o *KeyfactorApiModelsCertificateStoresAddCertificateRequest) SetCertificateId(v int32) {
	o.CertificateId = v
}

// GetCertificateStores returns the CertificateStores field value
func (o *KeyfactorApiModelsCertificateStoresAddCertificateRequest) GetCertificateStores() []ModelsCertificateStoreEntry {
	if o == nil {
		var ret []ModelsCertificateStoreEntry
		return ret
	}

	return o.CertificateStores
}

// GetCertificateStoresOk returns a tuple with the CertificateStores field value
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresAddCertificateRequest) GetCertificateStoresOk() ([]ModelsCertificateStoreEntry, bool) {
	if o == nil {
		return nil, false
	}
	return o.CertificateStores, true
}

// SetCertificateStores sets field value
func (o *KeyfactorApiModelsCertificateStoresAddCertificateRequest) SetCertificateStores(v []ModelsCertificateStoreEntry) {
	o.CertificateStores = v
}

// GetSchedule returns the Schedule field value
func (o *KeyfactorApiModelsCertificateStoresAddCertificateRequest) GetSchedule() KeyfactorCommonSchedulingKeyfactorSchedule {
	if o == nil {
		var ret KeyfactorCommonSchedulingKeyfactorSchedule
		return ret
	}

	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresAddCertificateRequest) GetScheduleOk() (*KeyfactorCommonSchedulingKeyfactorSchedule, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Schedule, true
}

// SetSchedule sets field value
func (o *KeyfactorApiModelsCertificateStoresAddCertificateRequest) SetSchedule(v KeyfactorCommonSchedulingKeyfactorSchedule) {
	o.Schedule = v
}

// GetCollectionId returns the CollectionId field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresAddCertificateRequest) GetCollectionId() int32 {
	if o == nil || isNil(o.CollectionId) {
		var ret int32
		return ret
	}
	return *o.CollectionId
}

// GetCollectionIdOk returns a tuple with the CollectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresAddCertificateRequest) GetCollectionIdOk() (*int32, bool) {
	if o == nil || isNil(o.CollectionId) {
		return nil, false
	}
	return o.CollectionId, true
}

// HasCollectionId returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresAddCertificateRequest) HasCollectionId() bool {
	if o != nil && !isNil(o.CollectionId) {
		return true
	}

	return false
}

// SetCollectionId gets a reference to the given int32 and assigns it to the CollectionId field.
func (o *KeyfactorApiModelsCertificateStoresAddCertificateRequest) SetCollectionId(v int32) {
	o.CollectionId = &v
}

func (o KeyfactorApiModelsCertificateStoresAddCertificateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorApiModelsCertificateStoresAddCertificateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["CertificateId"] = o.CertificateId
	toSerialize["CertificateStores"] = o.CertificateStores
	toSerialize["Schedule"] = o.Schedule
	if !isNil(o.CollectionId) {
		toSerialize["CollectionId"] = o.CollectionId
	}
	return toSerialize, nil
}

type NullableKeyfactorApiModelsCertificateStoresAddCertificateRequest struct {
	value *KeyfactorApiModelsCertificateStoresAddCertificateRequest
	isSet bool
}

func (v NullableKeyfactorApiModelsCertificateStoresAddCertificateRequest) Get() *KeyfactorApiModelsCertificateStoresAddCertificateRequest {
	return v.value
}

func (v *NullableKeyfactorApiModelsCertificateStoresAddCertificateRequest) Set(val *KeyfactorApiModelsCertificateStoresAddCertificateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorApiModelsCertificateStoresAddCertificateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorApiModelsCertificateStoresAddCertificateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorApiModelsCertificateStoresAddCertificateRequest(val *KeyfactorApiModelsCertificateStoresAddCertificateRequest) *NullableKeyfactorApiModelsCertificateStoresAddCertificateRequest {
	return &NullableKeyfactorApiModelsCertificateStoresAddCertificateRequest{value: val, isSet: true}
}

func (v NullableKeyfactorApiModelsCertificateStoresAddCertificateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorApiModelsCertificateStoresAddCertificateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


