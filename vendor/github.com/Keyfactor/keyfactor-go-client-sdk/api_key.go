/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// KeyApiService KeyApi service
type KeyApiService service

type ApiKeyDeleteUnmanagedKeyRequest struct {
	ctx context.Context
	ApiService *KeyApiService
	id int32
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiKeyDeleteUnmanagedKeyRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiKeyDeleteUnmanagedKeyRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiKeyDeleteUnmanagedKeyRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiKeyDeleteUnmanagedKeyRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiKeyDeleteUnmanagedKeyRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeyDeleteUnmanagedKeyExecute(r)
}

/*
KeyDeleteUnmanagedKey Deletes Unmanaged Key associated with the provided identifier

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Keyfactor identifer of the Key to be deleted
 @return ApiKeyDeleteUnmanagedKeyRequest
*/
func (a *KeyApiService) KeyDeleteUnmanagedKey(ctx context.Context, id int32) ApiKeyDeleteUnmanagedKeyRequest {
	return ApiKeyDeleteUnmanagedKeyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *KeyApiService) KeyDeleteUnmanagedKeyExecute(r ApiKeyDeleteUnmanagedKeyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeyApiService.KeyDeleteUnmanagedKey")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/SSH/Keys/Unmanaged/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeyDeleteUnmanagedKeysRequest struct {
	ctx context.Context
	ApiService *KeyApiService
	xKeyfactorRequestedWith *string
	ids *[]int32
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiKeyDeleteUnmanagedKeysRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiKeyDeleteUnmanagedKeysRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Keyfactor identifers of the Keys to be deleted
func (r ApiKeyDeleteUnmanagedKeysRequest) Ids(ids []int32) ApiKeyDeleteUnmanagedKeysRequest {
	r.ids = &ids
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiKeyDeleteUnmanagedKeysRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiKeyDeleteUnmanagedKeysRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiKeyDeleteUnmanagedKeysRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeyDeleteUnmanagedKeysExecute(r)
}

/*
KeyDeleteUnmanagedKeys Deletes Unmanaged Keys associated with the provided identifiers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiKeyDeleteUnmanagedKeysRequest
*/
func (a *KeyApiService) KeyDeleteUnmanagedKeys(ctx context.Context) ApiKeyDeleteUnmanagedKeysRequest {
	return ApiKeyDeleteUnmanagedKeysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *KeyApiService) KeyDeleteUnmanagedKeysExecute(r ApiKeyDeleteUnmanagedKeysRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeyApiService.KeyDeleteUnmanagedKeys")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/SSH/Keys/Unmanaged"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.ids == nil {
		return nil, reportError("ids is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.ids
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeyGenerateKeyRequest struct {
	ctx context.Context
	ApiService *KeyApiService
	xKeyfactorRequestedWith *string
	generationRequest *ModelsSSHKeysKeyGenerationRequest
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiKeyGenerateKeyRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiKeyGenerateKeyRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Object containing information about the key to be generated
func (r ApiKeyGenerateKeyRequest) GenerationRequest(generationRequest ModelsSSHKeysKeyGenerationRequest) ApiKeyGenerateKeyRequest {
	r.generationRequest = &generationRequest
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiKeyGenerateKeyRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiKeyGenerateKeyRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiKeyGenerateKeyRequest) Execute() (*ModelsSSHKeysKeyResponse, *http.Response, error) {
	return r.ApiService.KeyGenerateKeyExecute(r)
}

/*
KeyGenerateKey Generates an SSH Key Pair for the requesting user.

### SSH Key Algorithms ###
| Value              | Description               |
|--------------------|---------------------------|
| 0              | Unknown                 |
| 1             | ECDSA                |
| 2                | Ed25519                   |
| 3                | RSA                   |

### Private Key Formats ###
| Value              | Description               |
|--------------------|---------------------------|
| 0              | Unknown                 |
| 1             | OpenSSH                |
| 2                | PKCS8                   |

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiKeyGenerateKeyRequest
*/
func (a *KeyApiService) KeyGenerateKey(ctx context.Context) ApiKeyGenerateKeyRequest {
	return ApiKeyGenerateKeyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelsSSHKeysKeyResponse
func (a *KeyApiService) KeyGenerateKeyExecute(r ApiKeyGenerateKeyRequest) (*ModelsSSHKeysKeyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsSSHKeysKeyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeyApiService.KeyGenerateKey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/SSH/Keys/MyKey"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.generationRequest == nil {
		return localVarReturnValue, nil, reportError("generationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.generationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiKeyGetMyKeyRequest struct {
	ctx context.Context
	ApiService *KeyApiService
	xKeyfactorRequestedWith *string
	xKeyfactorKeyPassphrase *string
	includePrivateKey *bool
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiKeyGetMyKeyRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiKeyGetMyKeyRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Key password
func (r ApiKeyGetMyKeyRequest) XKeyfactorKeyPassphrase(xKeyfactorKeyPassphrase string) ApiKeyGetMyKeyRequest {
	r.xKeyfactorKeyPassphrase = &xKeyfactorKeyPassphrase
	return r
}

// Whether or not to include the private key. If true, you must supply the X-Keyfactor-Key-Passphrase header
func (r ApiKeyGetMyKeyRequest) IncludePrivateKey(includePrivateKey bool) ApiKeyGetMyKeyRequest {
	r.includePrivateKey = &includePrivateKey
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiKeyGetMyKeyRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiKeyGetMyKeyRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiKeyGetMyKeyRequest) Execute() (*ModelsSSHKeysKeyResponse, *http.Response, error) {
	return r.ApiService.KeyGetMyKeyExecute(r)
}

/*
KeyGetMyKey Returns the current key of the requesting user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiKeyGetMyKeyRequest
*/
func (a *KeyApiService) KeyGetMyKey(ctx context.Context) ApiKeyGetMyKeyRequest {
	return ApiKeyGetMyKeyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelsSSHKeysKeyResponse
func (a *KeyApiService) KeyGetMyKeyExecute(r ApiKeyGetMyKeyRequest) (*ModelsSSHKeysKeyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsSSHKeysKeyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeyApiService.KeyGetMyKey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/SSH/Keys/MyKey"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.xKeyfactorKeyPassphrase == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorKeyPassphrase is required and must be specified")
	}

	if r.includePrivateKey != nil {
		parameterAddToQuery(localVarQueryParams, "includePrivateKey", r.includePrivateKey, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	parameterAddToQuery(localVarQueryParams, "x-keyfactor-key-passphrase", r.xKeyfactorKeyPassphrase, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiKeyGetUnmanagedKeyRequest struct {
	ctx context.Context
	ApiService *KeyApiService
	id int32
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiKeyGetUnmanagedKeyRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiKeyGetUnmanagedKeyRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiKeyGetUnmanagedKeyRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiKeyGetUnmanagedKeyRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiKeyGetUnmanagedKeyRequest) Execute() (*ModelsSSHKeysUnmanagedKeyResponse, *http.Response, error) {
	return r.ApiService.KeyGetUnmanagedKeyExecute(r)
}

/*
KeyGetUnmanagedKey Returns an unmanaged SSH key with provided id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the key to get
 @return ApiKeyGetUnmanagedKeyRequest
*/
func (a *KeyApiService) KeyGetUnmanagedKey(ctx context.Context, id int32) ApiKeyGetUnmanagedKeyRequest {
	return ApiKeyGetUnmanagedKeyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ModelsSSHKeysUnmanagedKeyResponse
func (a *KeyApiService) KeyGetUnmanagedKeyExecute(r ApiKeyGetUnmanagedKeyRequest) (*ModelsSSHKeysUnmanagedKeyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsSSHKeysUnmanagedKeyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeyApiService.KeyGetUnmanagedKey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/SSH/Keys/Unmanaged/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiKeyGetUnmanagedKeysRequest struct {
	ctx context.Context
	ApiService *KeyApiService
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
	pqQueryString *string
	pqPageReturned *int32
	pqReturnLimit *int32
	pqSortField *string
	pqSortAscending *int32
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiKeyGetUnmanagedKeysRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiKeyGetUnmanagedKeysRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiKeyGetUnmanagedKeysRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiKeyGetUnmanagedKeysRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)
func (r ApiKeyGetUnmanagedKeysRequest) PqQueryString(pqQueryString string) ApiKeyGetUnmanagedKeysRequest {
	r.pqQueryString = &pqQueryString
	return r
}

// The current page within the result set to be returned
func (r ApiKeyGetUnmanagedKeysRequest) PqPageReturned(pqPageReturned int32) ApiKeyGetUnmanagedKeysRequest {
	r.pqPageReturned = &pqPageReturned
	return r
}

// Maximum number of records to be returned in a single call
func (r ApiKeyGetUnmanagedKeysRequest) PqReturnLimit(pqReturnLimit int32) ApiKeyGetUnmanagedKeysRequest {
	r.pqReturnLimit = &pqReturnLimit
	return r
}

// Field by which the results should be sorted (view results via Management Portal for sortable columns)
func (r ApiKeyGetUnmanagedKeysRequest) PqSortField(pqSortField string) ApiKeyGetUnmanagedKeysRequest {
	r.pqSortField = &pqSortField
	return r
}

// Field sort direction [0&#x3D;ascending, 1&#x3D;descending]
func (r ApiKeyGetUnmanagedKeysRequest) PqSortAscending(pqSortAscending int32) ApiKeyGetUnmanagedKeysRequest {
	r.pqSortAscending = &pqSortAscending
	return r
}

func (r ApiKeyGetUnmanagedKeysRequest) Execute() ([]ModelsSSHKeysUnmanagedKeyResponse, *http.Response, error) {
	return r.ApiService.KeyGetUnmanagedKeysExecute(r)
}

/*
KeyGetUnmanagedKeys Returns Unmanaged SSH keys

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiKeyGetUnmanagedKeysRequest
*/
func (a *KeyApiService) KeyGetUnmanagedKeys(ctx context.Context) ApiKeyGetUnmanagedKeysRequest {
	return ApiKeyGetUnmanagedKeysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ModelsSSHKeysUnmanagedKeyResponse
func (a *KeyApiService) KeyGetUnmanagedKeysExecute(r ApiKeyGetUnmanagedKeysRequest) ([]ModelsSSHKeysUnmanagedKeyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelsSSHKeysUnmanagedKeyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeyApiService.KeyGetUnmanagedKeys")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/SSH/Keys/Unmanaged"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.pqQueryString != nil {
		parameterAddToQuery(localVarQueryParams, "pq.queryString", r.pqQueryString, "")
	}
	if r.pqPageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "pq.pageReturned", r.pqPageReturned, "")
	}
	if r.pqReturnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "pq.returnLimit", r.pqReturnLimit, "")
	}
	if r.pqSortField != nil {
		parameterAddToQuery(localVarQueryParams, "pq.sortField", r.pqSortField, "")
	}
	if r.pqSortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "pq.sortAscending", r.pqSortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiKeyUpdateRequest struct {
	ctx context.Context
	ApiService *KeyApiService
	xKeyfactorRequestedWith *string
	keyUpdateRequest *ModelsSSHKeysKeyUpdateRequest
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiKeyUpdateRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiKeyUpdateRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Updated state of the SSH key
func (r ApiKeyUpdateRequest) KeyUpdateRequest(keyUpdateRequest ModelsSSHKeysKeyUpdateRequest) ApiKeyUpdateRequest {
	r.keyUpdateRequest = &keyUpdateRequest
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiKeyUpdateRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiKeyUpdateRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiKeyUpdateRequest) Execute() (*ModelsSSHKeysKeyResponse, *http.Response, error) {
	return r.ApiService.KeyUpdateExecute(r)
}

/*
KeyUpdate Updates the requesting user's SSH key

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiKeyUpdateRequest
*/
func (a *KeyApiService) KeyUpdate(ctx context.Context) ApiKeyUpdateRequest {
	return ApiKeyUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelsSSHKeysKeyResponse
func (a *KeyApiService) KeyUpdateExecute(r ApiKeyUpdateRequest) (*ModelsSSHKeysKeyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsSSHKeysKeyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeyApiService.KeyUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/SSH/Keys/MyKey"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.keyUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("keyUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.keyUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
