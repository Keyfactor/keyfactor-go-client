/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsInvalidKeystore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsInvalidKeystore{}

// ModelsInvalidKeystore struct for ModelsInvalidKeystore
type ModelsInvalidKeystore struct {
	KeystoreId *string `json:"KeystoreId,omitempty"`
	ClientMachine *string `json:"ClientMachine,omitempty"`
	StorePath *string `json:"StorePath,omitempty"`
	Alias *string `json:"Alias,omitempty"`
	Reason *int32 `json:"Reason,omitempty"`
	Explanation *string `json:"Explanation,omitempty"`
}

// NewModelsInvalidKeystore instantiates a new ModelsInvalidKeystore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsInvalidKeystore() *ModelsInvalidKeystore {
	this := ModelsInvalidKeystore{}
	return &this
}

// NewModelsInvalidKeystoreWithDefaults instantiates a new ModelsInvalidKeystore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsInvalidKeystoreWithDefaults() *ModelsInvalidKeystore {
	this := ModelsInvalidKeystore{}
	return &this
}

// GetKeystoreId returns the KeystoreId field value if set, zero value otherwise.
func (o *ModelsInvalidKeystore) GetKeystoreId() string {
	if o == nil || isNil(o.KeystoreId) {
		var ret string
		return ret
	}
	return *o.KeystoreId
}

// GetKeystoreIdOk returns a tuple with the KeystoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsInvalidKeystore) GetKeystoreIdOk() (*string, bool) {
	if o == nil || isNil(o.KeystoreId) {
		return nil, false
	}
	return o.KeystoreId, true
}

// HasKeystoreId returns a boolean if a field has been set.
func (o *ModelsInvalidKeystore) HasKeystoreId() bool {
	if o != nil && !isNil(o.KeystoreId) {
		return true
	}

	return false
}

// SetKeystoreId gets a reference to the given string and assigns it to the KeystoreId field.
func (o *ModelsInvalidKeystore) SetKeystoreId(v string) {
	o.KeystoreId = &v
}

// GetClientMachine returns the ClientMachine field value if set, zero value otherwise.
func (o *ModelsInvalidKeystore) GetClientMachine() string {
	if o == nil || isNil(o.ClientMachine) {
		var ret string
		return ret
	}
	return *o.ClientMachine
}

// GetClientMachineOk returns a tuple with the ClientMachine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsInvalidKeystore) GetClientMachineOk() (*string, bool) {
	if o == nil || isNil(o.ClientMachine) {
		return nil, false
	}
	return o.ClientMachine, true
}

// HasClientMachine returns a boolean if a field has been set.
func (o *ModelsInvalidKeystore) HasClientMachine() bool {
	if o != nil && !isNil(o.ClientMachine) {
		return true
	}

	return false
}

// SetClientMachine gets a reference to the given string and assigns it to the ClientMachine field.
func (o *ModelsInvalidKeystore) SetClientMachine(v string) {
	o.ClientMachine = &v
}

// GetStorePath returns the StorePath field value if set, zero value otherwise.
func (o *ModelsInvalidKeystore) GetStorePath() string {
	if o == nil || isNil(o.StorePath) {
		var ret string
		return ret
	}
	return *o.StorePath
}

// GetStorePathOk returns a tuple with the StorePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsInvalidKeystore) GetStorePathOk() (*string, bool) {
	if o == nil || isNil(o.StorePath) {
		return nil, false
	}
	return o.StorePath, true
}

// HasStorePath returns a boolean if a field has been set.
func (o *ModelsInvalidKeystore) HasStorePath() bool {
	if o != nil && !isNil(o.StorePath) {
		return true
	}

	return false
}

// SetStorePath gets a reference to the given string and assigns it to the StorePath field.
func (o *ModelsInvalidKeystore) SetStorePath(v string) {
	o.StorePath = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *ModelsInvalidKeystore) GetAlias() string {
	if o == nil || isNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsInvalidKeystore) GetAliasOk() (*string, bool) {
	if o == nil || isNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *ModelsInvalidKeystore) HasAlias() bool {
	if o != nil && !isNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *ModelsInvalidKeystore) SetAlias(v string) {
	o.Alias = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ModelsInvalidKeystore) GetReason() int32 {
	if o == nil || isNil(o.Reason) {
		var ret int32
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsInvalidKeystore) GetReasonOk() (*int32, bool) {
	if o == nil || isNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ModelsInvalidKeystore) HasReason() bool {
	if o != nil && !isNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given int32 and assigns it to the Reason field.
func (o *ModelsInvalidKeystore) SetReason(v int32) {
	o.Reason = &v
}

// GetExplanation returns the Explanation field value if set, zero value otherwise.
func (o *ModelsInvalidKeystore) GetExplanation() string {
	if o == nil || isNil(o.Explanation) {
		var ret string
		return ret
	}
	return *o.Explanation
}

// GetExplanationOk returns a tuple with the Explanation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsInvalidKeystore) GetExplanationOk() (*string, bool) {
	if o == nil || isNil(o.Explanation) {
		return nil, false
	}
	return o.Explanation, true
}

// HasExplanation returns a boolean if a field has been set.
func (o *ModelsInvalidKeystore) HasExplanation() bool {
	if o != nil && !isNil(o.Explanation) {
		return true
	}

	return false
}

// SetExplanation gets a reference to the given string and assigns it to the Explanation field.
func (o *ModelsInvalidKeystore) SetExplanation(v string) {
	o.Explanation = &v
}

func (o ModelsInvalidKeystore) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsInvalidKeystore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.KeystoreId) {
		toSerialize["KeystoreId"] = o.KeystoreId
	}
	if !isNil(o.ClientMachine) {
		toSerialize["ClientMachine"] = o.ClientMachine
	}
	if !isNil(o.StorePath) {
		toSerialize["StorePath"] = o.StorePath
	}
	if !isNil(o.Alias) {
		toSerialize["Alias"] = o.Alias
	}
	if !isNil(o.Reason) {
		toSerialize["Reason"] = o.Reason
	}
	if !isNil(o.Explanation) {
		toSerialize["Explanation"] = o.Explanation
	}
	return toSerialize, nil
}

type NullableModelsInvalidKeystore struct {
	value *ModelsInvalidKeystore
	isSet bool
}

func (v NullableModelsInvalidKeystore) Get() *ModelsInvalidKeystore {
	return v.value
}

func (v *NullableModelsInvalidKeystore) Set(val *ModelsInvalidKeystore) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsInvalidKeystore) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsInvalidKeystore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsInvalidKeystore(val *ModelsInvalidKeystore) *NullableModelsInvalidKeystore {
	return &NullableModelsInvalidKeystore{value: val, isSet: true}
}

func (v NullableModelsInvalidKeystore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsInvalidKeystore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


