/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsReport{}

// ModelsReport struct for ModelsReport
type ModelsReport struct {
	Id *int32 `json:"Id,omitempty"`
	Scheduled *int32 `json:"Scheduled,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty"`
	Description *string `json:"Description,omitempty"`
	ReportPath *string `json:"ReportPath,omitempty"`
	VersionNumber *string `json:"VersionNumber,omitempty"`
	Categories *string `json:"Categories,omitempty"`
	ShortName *string `json:"ShortName,omitempty"`
	InNavigator *bool `json:"InNavigator,omitempty"`
	Favorite *bool `json:"Favorite,omitempty"`
	RemoveDuplicates *bool `json:"RemoveDuplicates,omitempty"`
	UsesCollection *bool `json:"UsesCollection,omitempty"`
	ReportParameter []ModelsReportParameters `json:"ReportParameter,omitempty"`
	Schedules []ModelsReportSchedule `json:"Schedules,omitempty"`
	AcceptedScheduleFormats []string `json:"AcceptedScheduleFormats,omitempty"`
}

// NewModelsReport instantiates a new ModelsReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsReport() *ModelsReport {
	this := ModelsReport{}
	return &this
}

// NewModelsReportWithDefaults instantiates a new ModelsReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsReportWithDefaults() *ModelsReport {
	this := ModelsReport{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsReport) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsReport) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsReport) SetId(v int32) {
	o.Id = &v
}

// GetScheduled returns the Scheduled field value if set, zero value otherwise.
func (o *ModelsReport) GetScheduled() int32 {
	if o == nil || isNil(o.Scheduled) {
		var ret int32
		return ret
	}
	return *o.Scheduled
}

// GetScheduledOk returns a tuple with the Scheduled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetScheduledOk() (*int32, bool) {
	if o == nil || isNil(o.Scheduled) {
		return nil, false
	}
	return o.Scheduled, true
}

// HasScheduled returns a boolean if a field has been set.
func (o *ModelsReport) HasScheduled() bool {
	if o != nil && !isNil(o.Scheduled) {
		return true
	}

	return false
}

// SetScheduled gets a reference to the given int32 and assigns it to the Scheduled field.
func (o *ModelsReport) SetScheduled(v int32) {
	o.Scheduled = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ModelsReport) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ModelsReport) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ModelsReport) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ModelsReport) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ModelsReport) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ModelsReport) SetDescription(v string) {
	o.Description = &v
}

// GetReportPath returns the ReportPath field value if set, zero value otherwise.
func (o *ModelsReport) GetReportPath() string {
	if o == nil || isNil(o.ReportPath) {
		var ret string
		return ret
	}
	return *o.ReportPath
}

// GetReportPathOk returns a tuple with the ReportPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetReportPathOk() (*string, bool) {
	if o == nil || isNil(o.ReportPath) {
		return nil, false
	}
	return o.ReportPath, true
}

// HasReportPath returns a boolean if a field has been set.
func (o *ModelsReport) HasReportPath() bool {
	if o != nil && !isNil(o.ReportPath) {
		return true
	}

	return false
}

// SetReportPath gets a reference to the given string and assigns it to the ReportPath field.
func (o *ModelsReport) SetReportPath(v string) {
	o.ReportPath = &v
}

// GetVersionNumber returns the VersionNumber field value if set, zero value otherwise.
func (o *ModelsReport) GetVersionNumber() string {
	if o == nil || isNil(o.VersionNumber) {
		var ret string
		return ret
	}
	return *o.VersionNumber
}

// GetVersionNumberOk returns a tuple with the VersionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetVersionNumberOk() (*string, bool) {
	if o == nil || isNil(o.VersionNumber) {
		return nil, false
	}
	return o.VersionNumber, true
}

// HasVersionNumber returns a boolean if a field has been set.
func (o *ModelsReport) HasVersionNumber() bool {
	if o != nil && !isNil(o.VersionNumber) {
		return true
	}

	return false
}

// SetVersionNumber gets a reference to the given string and assigns it to the VersionNumber field.
func (o *ModelsReport) SetVersionNumber(v string) {
	o.VersionNumber = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *ModelsReport) GetCategories() string {
	if o == nil || isNil(o.Categories) {
		var ret string
		return ret
	}
	return *o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetCategoriesOk() (*string, bool) {
	if o == nil || isNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *ModelsReport) HasCategories() bool {
	if o != nil && !isNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given string and assigns it to the Categories field.
func (o *ModelsReport) SetCategories(v string) {
	o.Categories = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *ModelsReport) GetShortName() string {
	if o == nil || isNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetShortNameOk() (*string, bool) {
	if o == nil || isNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *ModelsReport) HasShortName() bool {
	if o != nil && !isNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *ModelsReport) SetShortName(v string) {
	o.ShortName = &v
}

// GetInNavigator returns the InNavigator field value if set, zero value otherwise.
func (o *ModelsReport) GetInNavigator() bool {
	if o == nil || isNil(o.InNavigator) {
		var ret bool
		return ret
	}
	return *o.InNavigator
}

// GetInNavigatorOk returns a tuple with the InNavigator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetInNavigatorOk() (*bool, bool) {
	if o == nil || isNil(o.InNavigator) {
		return nil, false
	}
	return o.InNavigator, true
}

// HasInNavigator returns a boolean if a field has been set.
func (o *ModelsReport) HasInNavigator() bool {
	if o != nil && !isNil(o.InNavigator) {
		return true
	}

	return false
}

// SetInNavigator gets a reference to the given bool and assigns it to the InNavigator field.
func (o *ModelsReport) SetInNavigator(v bool) {
	o.InNavigator = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *ModelsReport) GetFavorite() bool {
	if o == nil || isNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetFavoriteOk() (*bool, bool) {
	if o == nil || isNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *ModelsReport) HasFavorite() bool {
	if o != nil && !isNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *ModelsReport) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetRemoveDuplicates returns the RemoveDuplicates field value if set, zero value otherwise.
func (o *ModelsReport) GetRemoveDuplicates() bool {
	if o == nil || isNil(o.RemoveDuplicates) {
		var ret bool
		return ret
	}
	return *o.RemoveDuplicates
}

// GetRemoveDuplicatesOk returns a tuple with the RemoveDuplicates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetRemoveDuplicatesOk() (*bool, bool) {
	if o == nil || isNil(o.RemoveDuplicates) {
		return nil, false
	}
	return o.RemoveDuplicates, true
}

// HasRemoveDuplicates returns a boolean if a field has been set.
func (o *ModelsReport) HasRemoveDuplicates() bool {
	if o != nil && !isNil(o.RemoveDuplicates) {
		return true
	}

	return false
}

// SetRemoveDuplicates gets a reference to the given bool and assigns it to the RemoveDuplicates field.
func (o *ModelsReport) SetRemoveDuplicates(v bool) {
	o.RemoveDuplicates = &v
}

// GetUsesCollection returns the UsesCollection field value if set, zero value otherwise.
func (o *ModelsReport) GetUsesCollection() bool {
	if o == nil || isNil(o.UsesCollection) {
		var ret bool
		return ret
	}
	return *o.UsesCollection
}

// GetUsesCollectionOk returns a tuple with the UsesCollection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetUsesCollectionOk() (*bool, bool) {
	if o == nil || isNil(o.UsesCollection) {
		return nil, false
	}
	return o.UsesCollection, true
}

// HasUsesCollection returns a boolean if a field has been set.
func (o *ModelsReport) HasUsesCollection() bool {
	if o != nil && !isNil(o.UsesCollection) {
		return true
	}

	return false
}

// SetUsesCollection gets a reference to the given bool and assigns it to the UsesCollection field.
func (o *ModelsReport) SetUsesCollection(v bool) {
	o.UsesCollection = &v
}

// GetReportParameter returns the ReportParameter field value if set, zero value otherwise.
func (o *ModelsReport) GetReportParameter() []ModelsReportParameters {
	if o == nil || isNil(o.ReportParameter) {
		var ret []ModelsReportParameters
		return ret
	}
	return o.ReportParameter
}

// GetReportParameterOk returns a tuple with the ReportParameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetReportParameterOk() ([]ModelsReportParameters, bool) {
	if o == nil || isNil(o.ReportParameter) {
		return nil, false
	}
	return o.ReportParameter, true
}

// HasReportParameter returns a boolean if a field has been set.
func (o *ModelsReport) HasReportParameter() bool {
	if o != nil && !isNil(o.ReportParameter) {
		return true
	}

	return false
}

// SetReportParameter gets a reference to the given []ModelsReportParameters and assigns it to the ReportParameter field.
func (o *ModelsReport) SetReportParameter(v []ModelsReportParameters) {
	o.ReportParameter = v
}

// GetSchedules returns the Schedules field value if set, zero value otherwise.
func (o *ModelsReport) GetSchedules() []ModelsReportSchedule {
	if o == nil || isNil(o.Schedules) {
		var ret []ModelsReportSchedule
		return ret
	}
	return o.Schedules
}

// GetSchedulesOk returns a tuple with the Schedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetSchedulesOk() ([]ModelsReportSchedule, bool) {
	if o == nil || isNil(o.Schedules) {
		return nil, false
	}
	return o.Schedules, true
}

// HasSchedules returns a boolean if a field has been set.
func (o *ModelsReport) HasSchedules() bool {
	if o != nil && !isNil(o.Schedules) {
		return true
	}

	return false
}

// SetSchedules gets a reference to the given []ModelsReportSchedule and assigns it to the Schedules field.
func (o *ModelsReport) SetSchedules(v []ModelsReportSchedule) {
	o.Schedules = v
}

// GetAcceptedScheduleFormats returns the AcceptedScheduleFormats field value if set, zero value otherwise.
func (o *ModelsReport) GetAcceptedScheduleFormats() []string {
	if o == nil || isNil(o.AcceptedScheduleFormats) {
		var ret []string
		return ret
	}
	return o.AcceptedScheduleFormats
}

// GetAcceptedScheduleFormatsOk returns a tuple with the AcceptedScheduleFormats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetAcceptedScheduleFormatsOk() ([]string, bool) {
	if o == nil || isNil(o.AcceptedScheduleFormats) {
		return nil, false
	}
	return o.AcceptedScheduleFormats, true
}

// HasAcceptedScheduleFormats returns a boolean if a field has been set.
func (o *ModelsReport) HasAcceptedScheduleFormats() bool {
	if o != nil && !isNil(o.AcceptedScheduleFormats) {
		return true
	}

	return false
}

// SetAcceptedScheduleFormats gets a reference to the given []string and assigns it to the AcceptedScheduleFormats field.
func (o *ModelsReport) SetAcceptedScheduleFormats(v []string) {
	o.AcceptedScheduleFormats = v
}

func (o ModelsReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !isNil(o.Scheduled) {
		toSerialize["Scheduled"] = o.Scheduled
	}
	if !isNil(o.DisplayName) {
		toSerialize["DisplayName"] = o.DisplayName
	}
	if !isNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !isNil(o.ReportPath) {
		toSerialize["ReportPath"] = o.ReportPath
	}
	if !isNil(o.VersionNumber) {
		toSerialize["VersionNumber"] = o.VersionNumber
	}
	if !isNil(o.Categories) {
		toSerialize["Categories"] = o.Categories
	}
	if !isNil(o.ShortName) {
		toSerialize["ShortName"] = o.ShortName
	}
	if !isNil(o.InNavigator) {
		toSerialize["InNavigator"] = o.InNavigator
	}
	if !isNil(o.Favorite) {
		toSerialize["Favorite"] = o.Favorite
	}
	if !isNil(o.RemoveDuplicates) {
		toSerialize["RemoveDuplicates"] = o.RemoveDuplicates
	}
	if !isNil(o.UsesCollection) {
		toSerialize["UsesCollection"] = o.UsesCollection
	}
	if !isNil(o.ReportParameter) {
		toSerialize["ReportParameter"] = o.ReportParameter
	}
	if !isNil(o.Schedules) {
		toSerialize["Schedules"] = o.Schedules
	}
	if !isNil(o.AcceptedScheduleFormats) {
		toSerialize["AcceptedScheduleFormats"] = o.AcceptedScheduleFormats
	}
	return toSerialize, nil
}

type NullableModelsReport struct {
	value *ModelsReport
	isSet bool
}

func (v NullableModelsReport) Get() *ModelsReport {
	return v.value
}

func (v *NullableModelsReport) Set(val *ModelsReport) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsReport) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsReport(val *ModelsReport) *NullableModelsReport {
	return &NullableModelsReport{value: val, isSet: true}
}

func (v NullableModelsReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


