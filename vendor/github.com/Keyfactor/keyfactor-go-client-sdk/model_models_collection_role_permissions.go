/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsCollectionRolePermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCollectionRolePermissions{}

// ModelsCollectionRolePermissions struct for ModelsCollectionRolePermissions
type ModelsCollectionRolePermissions struct {
	RoleId *int32 `json:"RoleId,omitempty"`
	Permissions []string `json:"Permissions,omitempty"`
}

// NewModelsCollectionRolePermissions instantiates a new ModelsCollectionRolePermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCollectionRolePermissions() *ModelsCollectionRolePermissions {
	this := ModelsCollectionRolePermissions{}
	return &this
}

// NewModelsCollectionRolePermissionsWithDefaults instantiates a new ModelsCollectionRolePermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCollectionRolePermissionsWithDefaults() *ModelsCollectionRolePermissions {
	this := ModelsCollectionRolePermissions{}
	return &this
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *ModelsCollectionRolePermissions) GetRoleId() int32 {
	if o == nil || isNil(o.RoleId) {
		var ret int32
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCollectionRolePermissions) GetRoleIdOk() (*int32, bool) {
	if o == nil || isNil(o.RoleId) {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *ModelsCollectionRolePermissions) HasRoleId() bool {
	if o != nil && !isNil(o.RoleId) {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given int32 and assigns it to the RoleId field.
func (o *ModelsCollectionRolePermissions) SetRoleId(v int32) {
	o.RoleId = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *ModelsCollectionRolePermissions) GetPermissions() []string {
	if o == nil || isNil(o.Permissions) {
		var ret []string
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCollectionRolePermissions) GetPermissionsOk() ([]string, bool) {
	if o == nil || isNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *ModelsCollectionRolePermissions) HasPermissions() bool {
	if o != nil && !isNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []string and assigns it to the Permissions field.
func (o *ModelsCollectionRolePermissions) SetPermissions(v []string) {
	o.Permissions = v
}

func (o ModelsCollectionRolePermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCollectionRolePermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RoleId) {
		toSerialize["RoleId"] = o.RoleId
	}
	if !isNil(o.Permissions) {
		toSerialize["Permissions"] = o.Permissions
	}
	return toSerialize, nil
}

type NullableModelsCollectionRolePermissions struct {
	value *ModelsCollectionRolePermissions
	isSet bool
}

func (v NullableModelsCollectionRolePermissions) Get() *ModelsCollectionRolePermissions {
	return v.value
}

func (v *NullableModelsCollectionRolePermissions) Set(val *ModelsCollectionRolePermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCollectionRolePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCollectionRolePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCollectionRolePermissions(val *ModelsCollectionRolePermissions) *NullableModelsCollectionRolePermissions {
	return &NullableModelsCollectionRolePermissions{value: val, isSet: true}
}

func (v NullableModelsCollectionRolePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCollectionRolePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


