/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// WorkflowInstanceApiService WorkflowInstanceApi service
type WorkflowInstanceApiService service

type ApiWorkflowInstanceDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *WorkflowInstanceApiService
	instanceId string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowInstanceDeleteInstanceRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowInstanceDeleteInstanceRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowInstanceDeleteInstanceRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowInstanceDeleteInstanceRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowInstanceDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.WorkflowInstanceDeleteInstanceExecute(r)
}

/*
WorkflowInstanceDeleteInstance Deletes the specified instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId The Id of the instance to be deleted.
 @return ApiWorkflowInstanceDeleteInstanceRequest
*/
func (a *WorkflowInstanceApiService) WorkflowInstanceDeleteInstance(ctx context.Context, instanceId string) ApiWorkflowInstanceDeleteInstanceRequest {
	return ApiWorkflowInstanceDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
func (a *WorkflowInstanceApiService) WorkflowInstanceDeleteInstanceExecute(r ApiWorkflowInstanceDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowInstanceApiService.WorkflowInstanceDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Workflow/Instances/{instanceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowInstanceGetRequest struct {
	ctx context.Context
	ApiService *WorkflowInstanceApiService
	instanceId string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowInstanceGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowInstanceGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowInstanceGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowInstanceGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowInstanceGetRequest) Execute() (*KeyfactorApiModelsWorkflowsInstanceResponse, *http.Response, error) {
	return r.ApiService.WorkflowInstanceGetExecute(r)
}

/*
WorkflowInstanceGet Get information relevant for knowing where an instance is in its workflow.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId The {System.Guid} identifying the instance.
 @return ApiWorkflowInstanceGetRequest
*/
func (a *WorkflowInstanceApiService) WorkflowInstanceGet(ctx context.Context, instanceId string) ApiWorkflowInstanceGetRequest {
	return ApiWorkflowInstanceGetRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//  @return KeyfactorApiModelsWorkflowsInstanceResponse
func (a *WorkflowInstanceApiService) WorkflowInstanceGetExecute(r ApiWorkflowInstanceGetRequest) (*KeyfactorApiModelsWorkflowsInstanceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KeyfactorApiModelsWorkflowsInstanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowInstanceApiService.WorkflowInstanceGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Workflow/Instances/{instanceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowInstanceQueryRequest struct {
	ctx context.Context
	ApiService *WorkflowInstanceApiService
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
	pqQueryString *string
	pqPageReturned *int32
	pqReturnLimit *int32
	pqSortField *string
	pqSortAscending *int32
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowInstanceQueryRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowInstanceQueryRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowInstanceQueryRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowInstanceQueryRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)
func (r ApiWorkflowInstanceQueryRequest) PqQueryString(pqQueryString string) ApiWorkflowInstanceQueryRequest {
	r.pqQueryString = &pqQueryString
	return r
}

// The current page within the result set to be returned
func (r ApiWorkflowInstanceQueryRequest) PqPageReturned(pqPageReturned int32) ApiWorkflowInstanceQueryRequest {
	r.pqPageReturned = &pqPageReturned
	return r
}

// Maximum number of records to be returned in a single call
func (r ApiWorkflowInstanceQueryRequest) PqReturnLimit(pqReturnLimit int32) ApiWorkflowInstanceQueryRequest {
	r.pqReturnLimit = &pqReturnLimit
	return r
}

// Field by which the results should be sorted (view results via Management Portal for sortable columns)
func (r ApiWorkflowInstanceQueryRequest) PqSortField(pqSortField string) ApiWorkflowInstanceQueryRequest {
	r.pqSortField = &pqSortField
	return r
}

// Field sort direction [0&#x3D;ascending, 1&#x3D;descending]
func (r ApiWorkflowInstanceQueryRequest) PqSortAscending(pqSortAscending int32) ApiWorkflowInstanceQueryRequest {
	r.pqSortAscending = &pqSortAscending
	return r
}

func (r ApiWorkflowInstanceQueryRequest) Execute() ([]KeyfactorApiModelsWorkflowsInstanceQueryResponse, *http.Response, error) {
	return r.ApiService.WorkflowInstanceQueryExecute(r)
}

/*
WorkflowInstanceQuery Gets the workflow instances matching the query specifications.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWorkflowInstanceQueryRequest
*/
func (a *WorkflowInstanceApiService) WorkflowInstanceQuery(ctx context.Context) ApiWorkflowInstanceQueryRequest {
	return ApiWorkflowInstanceQueryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KeyfactorApiModelsWorkflowsInstanceQueryResponse
func (a *WorkflowInstanceApiService) WorkflowInstanceQueryExecute(r ApiWorkflowInstanceQueryRequest) ([]KeyfactorApiModelsWorkflowsInstanceQueryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KeyfactorApiModelsWorkflowsInstanceQueryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowInstanceApiService.WorkflowInstanceQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Workflow/Instances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.pqQueryString != nil {
		parameterAddToQuery(localVarQueryParams, "pq.queryString", r.pqQueryString, "")
	}
	if r.pqPageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "pq.pageReturned", r.pqPageReturned, "")
	}
	if r.pqReturnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "pq.returnLimit", r.pqReturnLimit, "")
	}
	if r.pqSortField != nil {
		parameterAddToQuery(localVarQueryParams, "pq.sortField", r.pqSortField, "")
	}
	if r.pqSortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "pq.sortAscending", r.pqSortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowInstanceQueryInstancesAssignedToMeRequest struct {
	ctx context.Context
	ApiService *WorkflowInstanceApiService
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
	pqQueryString *string
	pqPageReturned *int32
	pqReturnLimit *int32
	pqSortField *string
	pqSortAscending *int32
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowInstanceQueryInstancesAssignedToMeRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowInstanceQueryInstancesAssignedToMeRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowInstanceQueryInstancesAssignedToMeRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowInstanceQueryInstancesAssignedToMeRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)
func (r ApiWorkflowInstanceQueryInstancesAssignedToMeRequest) PqQueryString(pqQueryString string) ApiWorkflowInstanceQueryInstancesAssignedToMeRequest {
	r.pqQueryString = &pqQueryString
	return r
}

// The current page within the result set to be returned
func (r ApiWorkflowInstanceQueryInstancesAssignedToMeRequest) PqPageReturned(pqPageReturned int32) ApiWorkflowInstanceQueryInstancesAssignedToMeRequest {
	r.pqPageReturned = &pqPageReturned
	return r
}

// Maximum number of records to be returned in a single call
func (r ApiWorkflowInstanceQueryInstancesAssignedToMeRequest) PqReturnLimit(pqReturnLimit int32) ApiWorkflowInstanceQueryInstancesAssignedToMeRequest {
	r.pqReturnLimit = &pqReturnLimit
	return r
}

// Field by which the results should be sorted (view results via Management Portal for sortable columns)
func (r ApiWorkflowInstanceQueryInstancesAssignedToMeRequest) PqSortField(pqSortField string) ApiWorkflowInstanceQueryInstancesAssignedToMeRequest {
	r.pqSortField = &pqSortField
	return r
}

// Field sort direction [0&#x3D;ascending, 1&#x3D;descending]
func (r ApiWorkflowInstanceQueryInstancesAssignedToMeRequest) PqSortAscending(pqSortAscending int32) ApiWorkflowInstanceQueryInstancesAssignedToMeRequest {
	r.pqSortAscending = &pqSortAscending
	return r
}

func (r ApiWorkflowInstanceQueryInstancesAssignedToMeRequest) Execute() ([]KeyfactorApiModelsWorkflowsInstanceQueryResponse, *http.Response, error) {
	return r.ApiService.WorkflowInstanceQueryInstancesAssignedToMeExecute(r)
}

/*
WorkflowInstanceQueryInstancesAssignedToMe Gets the workflow instances waiting on the user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWorkflowInstanceQueryInstancesAssignedToMeRequest
*/
func (a *WorkflowInstanceApiService) WorkflowInstanceQueryInstancesAssignedToMe(ctx context.Context) ApiWorkflowInstanceQueryInstancesAssignedToMeRequest {
	return ApiWorkflowInstanceQueryInstancesAssignedToMeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KeyfactorApiModelsWorkflowsInstanceQueryResponse
func (a *WorkflowInstanceApiService) WorkflowInstanceQueryInstancesAssignedToMeExecute(r ApiWorkflowInstanceQueryInstancesAssignedToMeRequest) ([]KeyfactorApiModelsWorkflowsInstanceQueryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KeyfactorApiModelsWorkflowsInstanceQueryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowInstanceApiService.WorkflowInstanceQueryInstancesAssignedToMe")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Workflow/Instances/AssignedToMe"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.pqQueryString != nil {
		parameterAddToQuery(localVarQueryParams, "pq.queryString", r.pqQueryString, "")
	}
	if r.pqPageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "pq.pageReturned", r.pqPageReturned, "")
	}
	if r.pqReturnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "pq.returnLimit", r.pqReturnLimit, "")
	}
	if r.pqSortField != nil {
		parameterAddToQuery(localVarQueryParams, "pq.sortField", r.pqSortField, "")
	}
	if r.pqSortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "pq.sortAscending", r.pqSortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowInstanceQueryInstancesStartedByMeRequest struct {
	ctx context.Context
	ApiService *WorkflowInstanceApiService
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
	instanceQueryQueryString *string
	instanceQueryPageReturned *int32
	instanceQueryReturnLimit *int32
	instanceQuerySortField *string
	instanceQuerySortAscending *int32
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowInstanceQueryInstancesStartedByMeRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowInstanceQueryInstancesStartedByMeRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowInstanceQueryInstancesStartedByMeRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowInstanceQueryInstancesStartedByMeRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)
func (r ApiWorkflowInstanceQueryInstancesStartedByMeRequest) InstanceQueryQueryString(instanceQueryQueryString string) ApiWorkflowInstanceQueryInstancesStartedByMeRequest {
	r.instanceQueryQueryString = &instanceQueryQueryString
	return r
}

// The current page within the result set to be returned
func (r ApiWorkflowInstanceQueryInstancesStartedByMeRequest) InstanceQueryPageReturned(instanceQueryPageReturned int32) ApiWorkflowInstanceQueryInstancesStartedByMeRequest {
	r.instanceQueryPageReturned = &instanceQueryPageReturned
	return r
}

// Maximum number of records to be returned in a single call
func (r ApiWorkflowInstanceQueryInstancesStartedByMeRequest) InstanceQueryReturnLimit(instanceQueryReturnLimit int32) ApiWorkflowInstanceQueryInstancesStartedByMeRequest {
	r.instanceQueryReturnLimit = &instanceQueryReturnLimit
	return r
}

// Field by which the results should be sorted (view results via Management Portal for sortable columns)
func (r ApiWorkflowInstanceQueryInstancesStartedByMeRequest) InstanceQuerySortField(instanceQuerySortField string) ApiWorkflowInstanceQueryInstancesStartedByMeRequest {
	r.instanceQuerySortField = &instanceQuerySortField
	return r
}

// Field sort direction [0&#x3D;ascending, 1&#x3D;descending]
func (r ApiWorkflowInstanceQueryInstancesStartedByMeRequest) InstanceQuerySortAscending(instanceQuerySortAscending int32) ApiWorkflowInstanceQueryInstancesStartedByMeRequest {
	r.instanceQuerySortAscending = &instanceQuerySortAscending
	return r
}

func (r ApiWorkflowInstanceQueryInstancesStartedByMeRequest) Execute() ([]KeyfactorApiModelsWorkflowsInstanceQueryResponse, *http.Response, error) {
	return r.ApiService.WorkflowInstanceQueryInstancesStartedByMeExecute(r)
}

/*
WorkflowInstanceQueryInstancesStartedByMe Gets the workflow instances started by the user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWorkflowInstanceQueryInstancesStartedByMeRequest
*/
func (a *WorkflowInstanceApiService) WorkflowInstanceQueryInstancesStartedByMe(ctx context.Context) ApiWorkflowInstanceQueryInstancesStartedByMeRequest {
	return ApiWorkflowInstanceQueryInstancesStartedByMeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KeyfactorApiModelsWorkflowsInstanceQueryResponse
func (a *WorkflowInstanceApiService) WorkflowInstanceQueryInstancesStartedByMeExecute(r ApiWorkflowInstanceQueryInstancesStartedByMeRequest) ([]KeyfactorApiModelsWorkflowsInstanceQueryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KeyfactorApiModelsWorkflowsInstanceQueryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowInstanceApiService.WorkflowInstanceQueryInstancesStartedByMe")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Workflow/Instances/My"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.instanceQueryQueryString != nil {
		parameterAddToQuery(localVarQueryParams, "instanceQuery.queryString", r.instanceQueryQueryString, "")
	}
	if r.instanceQueryPageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "instanceQuery.pageReturned", r.instanceQueryPageReturned, "")
	}
	if r.instanceQueryReturnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "instanceQuery.returnLimit", r.instanceQueryReturnLimit, "")
	}
	if r.instanceQuerySortField != nil {
		parameterAddToQuery(localVarQueryParams, "instanceQuery.sortField", r.instanceQuerySortField, "")
	}
	if r.instanceQuerySortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "instanceQuery.sortAscending", r.instanceQuerySortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowInstanceRestartRequest struct {
	ctx context.Context
	ApiService *WorkflowInstanceApiService
	instanceId string
	xKeyfactorRequestedWith *string
	version *int32
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowInstanceRestartRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowInstanceRestartRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// The version of the definition to restart the instance against. Defaults to the published version.
func (r ApiWorkflowInstanceRestartRequest) Version(version int32) ApiWorkflowInstanceRestartRequest {
	r.version = &version
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowInstanceRestartRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowInstanceRestartRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowInstanceRestartRequest) Execute() (*http.Response, error) {
	return r.ApiService.WorkflowInstanceRestartExecute(r)
}

/*
WorkflowInstanceRestart Restarts a failed instance against the specified definition version or the published version if no version is specified.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId The instance Id to restart.
 @return ApiWorkflowInstanceRestartRequest
*/
func (a *WorkflowInstanceApiService) WorkflowInstanceRestart(ctx context.Context, instanceId string) ApiWorkflowInstanceRestartRequest {
	return ApiWorkflowInstanceRestartRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
func (a *WorkflowInstanceApiService) WorkflowInstanceRestartExecute(r ApiWorkflowInstanceRestartRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowInstanceApiService.WorkflowInstanceRestart")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Workflow/Instances/{instanceId}/Restart"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.version != nil {
		parameterAddToQuery(localVarQueryParams, "version", r.version, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowInstanceSignalRequest struct {
	ctx context.Context
	ApiService *WorkflowInstanceApiService
	instanceId string
	xKeyfactorRequestedWith *string
	signal *KeyfactorApiModelsWorkflowsSignalRequest
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowInstanceSignalRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowInstanceSignalRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// The signal to receive.
func (r ApiWorkflowInstanceSignalRequest) Signal(signal KeyfactorApiModelsWorkflowsSignalRequest) ApiWorkflowInstanceSignalRequest {
	r.signal = &signal
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowInstanceSignalRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowInstanceSignalRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowInstanceSignalRequest) Execute() (*http.Response, error) {
	return r.ApiService.WorkflowInstanceSignalExecute(r)
}

/*
WorkflowInstanceSignal Receives the given signal for the given instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId The instance that is receiving the signal.
 @return ApiWorkflowInstanceSignalRequest
*/
func (a *WorkflowInstanceApiService) WorkflowInstanceSignal(ctx context.Context, instanceId string) ApiWorkflowInstanceSignalRequest {
	return ApiWorkflowInstanceSignalRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
func (a *WorkflowInstanceApiService) WorkflowInstanceSignalExecute(r ApiWorkflowInstanceSignalRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowInstanceApiService.WorkflowInstanceSignal")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Workflow/Instances/{instanceId}/Signals"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.signal == nil {
		return nil, reportError("signal is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.signal
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowInstanceStopRequest struct {
	ctx context.Context
	ApiService *WorkflowInstanceApiService
	instanceId string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowInstanceStopRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowInstanceStopRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowInstanceStopRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowInstanceStopRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowInstanceStopRequest) Execute() (*http.Response, error) {
	return r.ApiService.WorkflowInstanceStopExecute(r)
}

/*
WorkflowInstanceStop Rejects an instance, preventing it from continuing.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId The Id of the instance to reject.
 @return ApiWorkflowInstanceStopRequest
*/
func (a *WorkflowInstanceApiService) WorkflowInstanceStop(ctx context.Context, instanceId string) ApiWorkflowInstanceStopRequest {
	return ApiWorkflowInstanceStopRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
func (a *WorkflowInstanceApiService) WorkflowInstanceStopExecute(r ApiWorkflowInstanceStopRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowInstanceApiService.WorkflowInstanceStop")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Workflow/Instances/{instanceId}/Stop"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
