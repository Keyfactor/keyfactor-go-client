/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsCertificateStoreInventory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCertificateStoreInventory{}

// ModelsCertificateStoreInventory struct for ModelsCertificateStoreInventory
type ModelsCertificateStoreInventory struct {
	Name *string `json:"Name,omitempty"`
	Certificates []ModelsCertificateStoreInventoryCertificates `json:"Certificates,omitempty"`
	Parameters map[string]map[string]interface{} `json:"Parameters,omitempty"`
}

// NewModelsCertificateStoreInventory instantiates a new ModelsCertificateStoreInventory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCertificateStoreInventory() *ModelsCertificateStoreInventory {
	this := ModelsCertificateStoreInventory{}
	return &this
}

// NewModelsCertificateStoreInventoryWithDefaults instantiates a new ModelsCertificateStoreInventory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCertificateStoreInventoryWithDefaults() *ModelsCertificateStoreInventory {
	this := ModelsCertificateStoreInventory{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelsCertificateStoreInventory) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreInventory) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelsCertificateStoreInventory) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelsCertificateStoreInventory) SetName(v string) {
	o.Name = &v
}

// GetCertificates returns the Certificates field value if set, zero value otherwise.
func (o *ModelsCertificateStoreInventory) GetCertificates() []ModelsCertificateStoreInventoryCertificates {
	if o == nil || isNil(o.Certificates) {
		var ret []ModelsCertificateStoreInventoryCertificates
		return ret
	}
	return o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreInventory) GetCertificatesOk() ([]ModelsCertificateStoreInventoryCertificates, bool) {
	if o == nil || isNil(o.Certificates) {
		return nil, false
	}
	return o.Certificates, true
}

// HasCertificates returns a boolean if a field has been set.
func (o *ModelsCertificateStoreInventory) HasCertificates() bool {
	if o != nil && !isNil(o.Certificates) {
		return true
	}

	return false
}

// SetCertificates gets a reference to the given []ModelsCertificateStoreInventoryCertificates and assigns it to the Certificates field.
func (o *ModelsCertificateStoreInventory) SetCertificates(v []ModelsCertificateStoreInventoryCertificates) {
	o.Certificates = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ModelsCertificateStoreInventory) GetParameters() map[string]map[string]interface{} {
	if o == nil || isNil(o.Parameters) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreInventory) GetParametersOk() (map[string]map[string]interface{}, bool) {
	if o == nil || isNil(o.Parameters) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *ModelsCertificateStoreInventory) HasParameters() bool {
	if o != nil && !isNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]map[string]interface{} and assigns it to the Parameters field.
func (o *ModelsCertificateStoreInventory) SetParameters(v map[string]map[string]interface{}) {
	o.Parameters = v
}

func (o ModelsCertificateStoreInventory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCertificateStoreInventory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !isNil(o.Certificates) {
		toSerialize["Certificates"] = o.Certificates
	}
	if !isNil(o.Parameters) {
		toSerialize["Parameters"] = o.Parameters
	}
	return toSerialize, nil
}

type NullableModelsCertificateStoreInventory struct {
	value *ModelsCertificateStoreInventory
	isSet bool
}

func (v NullableModelsCertificateStoreInventory) Get() *ModelsCertificateStoreInventory {
	return v.value
}

func (v *NullableModelsCertificateStoreInventory) Set(val *ModelsCertificateStoreInventory) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCertificateStoreInventory) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCertificateStoreInventory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCertificateStoreInventory(val *ModelsCertificateStoreInventory) *NullableModelsCertificateStoreInventory {
	return &NullableModelsCertificateStoreInventory{value: val, isSet: true}
}

func (v NullableModelsCertificateStoreInventory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCertificateStoreInventory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


