/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter{}

// ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter struct for ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter
type ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter struct {
	StoreTypeId *int32 `json:"StoreTypeId,omitempty"`
	Name *string `json:"Name,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty"`
	Type *int32 `json:"Type,omitempty"`
	RequiredWhen *map[string]bool `json:"RequiredWhen,omitempty"`
	DependsOn *string `json:"DependsOn,omitempty"`
	DefaultValue *string `json:"DefaultValue,omitempty"`
	Options *string `json:"Options,omitempty"`
}

// NewModelsCertificateStoreTypesCertificateStoreTypeEntryParameter instantiates a new ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCertificateStoreTypesCertificateStoreTypeEntryParameter() *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter {
	this := ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter{}
	return &this
}

// NewModelsCertificateStoreTypesCertificateStoreTypeEntryParameterWithDefaults instantiates a new ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCertificateStoreTypesCertificateStoreTypeEntryParameterWithDefaults() *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter {
	this := ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter{}
	return &this
}

// GetStoreTypeId returns the StoreTypeId field value if set, zero value otherwise.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) GetStoreTypeId() int32 {
	if o == nil || isNil(o.StoreTypeId) {
		var ret int32
		return ret
	}
	return *o.StoreTypeId
}

// GetStoreTypeIdOk returns a tuple with the StoreTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) GetStoreTypeIdOk() (*int32, bool) {
	if o == nil || isNil(o.StoreTypeId) {
		return nil, false
	}
	return o.StoreTypeId, true
}

// HasStoreTypeId returns a boolean if a field has been set.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) HasStoreTypeId() bool {
	if o != nil && !isNil(o.StoreTypeId) {
		return true
	}

	return false
}

// SetStoreTypeId gets a reference to the given int32 and assigns it to the StoreTypeId field.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) SetStoreTypeId(v int32) {
	o.StoreTypeId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) SetName(v string) {
	o.Name = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) GetType() int32 {
	if o == nil || isNil(o.Type) {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) GetTypeOk() (*int32, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) SetType(v int32) {
	o.Type = &v
}

// GetRequiredWhen returns the RequiredWhen field value if set, zero value otherwise.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) GetRequiredWhen() map[string]bool {
	if o == nil || isNil(o.RequiredWhen) {
		var ret map[string]bool
		return ret
	}
	return *o.RequiredWhen
}

// GetRequiredWhenOk returns a tuple with the RequiredWhen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) GetRequiredWhenOk() (*map[string]bool, bool) {
	if o == nil || isNil(o.RequiredWhen) {
		return nil, false
	}
	return o.RequiredWhen, true
}

// HasRequiredWhen returns a boolean if a field has been set.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) HasRequiredWhen() bool {
	if o != nil && !isNil(o.RequiredWhen) {
		return true
	}

	return false
}

// SetRequiredWhen gets a reference to the given map[string]bool and assigns it to the RequiredWhen field.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) SetRequiredWhen(v map[string]bool) {
	o.RequiredWhen = &v
}

// GetDependsOn returns the DependsOn field value if set, zero value otherwise.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) GetDependsOn() string {
	if o == nil || isNil(o.DependsOn) {
		var ret string
		return ret
	}
	return *o.DependsOn
}

// GetDependsOnOk returns a tuple with the DependsOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) GetDependsOnOk() (*string, bool) {
	if o == nil || isNil(o.DependsOn) {
		return nil, false
	}
	return o.DependsOn, true
}

// HasDependsOn returns a boolean if a field has been set.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) HasDependsOn() bool {
	if o != nil && !isNil(o.DependsOn) {
		return true
	}

	return false
}

// SetDependsOn gets a reference to the given string and assigns it to the DependsOn field.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) SetDependsOn(v string) {
	o.DependsOn = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) GetDefaultValue() string {
	if o == nil || isNil(o.DefaultValue) {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) GetDefaultValueOk() (*string, bool) {
	if o == nil || isNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) HasDefaultValue() bool {
	if o != nil && !isNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) GetOptions() string {
	if o == nil || isNil(o.Options) {
		var ret string
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) GetOptionsOk() (*string, bool) {
	if o == nil || isNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) HasOptions() bool {
	if o != nil && !isNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given string and assigns it to the Options field.
func (o *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) SetOptions(v string) {
	o.Options = &v
}

func (o ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.StoreTypeId) {
		toSerialize["StoreTypeId"] = o.StoreTypeId
	}
	if !isNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !isNil(o.DisplayName) {
		toSerialize["DisplayName"] = o.DisplayName
	}
	if !isNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !isNil(o.RequiredWhen) {
		toSerialize["RequiredWhen"] = o.RequiredWhen
	}
	if !isNil(o.DependsOn) {
		toSerialize["DependsOn"] = o.DependsOn
	}
	if !isNil(o.DefaultValue) {
		toSerialize["DefaultValue"] = o.DefaultValue
	}
	if !isNil(o.Options) {
		toSerialize["Options"] = o.Options
	}
	return toSerialize, nil
}

type NullableModelsCertificateStoreTypesCertificateStoreTypeEntryParameter struct {
	value *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter
	isSet bool
}

func (v NullableModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) Get() *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter {
	return v.value
}

func (v *NullableModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) Set(val *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCertificateStoreTypesCertificateStoreTypeEntryParameter(val *ModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) *NullableModelsCertificateStoreTypesCertificateStoreTypeEntryParameter {
	return &NullableModelsCertificateStoreTypesCertificateStoreTypeEntryParameter{value: val, isSet: true}
}

func (v NullableModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCertificateStoreTypesCertificateStoreTypeEntryParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


