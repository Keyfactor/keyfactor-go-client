/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the KeyfactorCommonSchedulingKeyfactorSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorCommonSchedulingKeyfactorSchedule{}

// KeyfactorCommonSchedulingKeyfactorSchedule struct for KeyfactorCommonSchedulingKeyfactorSchedule
type KeyfactorCommonSchedulingKeyfactorSchedule struct {
	Immediate *bool `json:"Immediate,omitempty"`
	Interval *KeyfactorCommonSchedulingModelsIntervalModel `json:"Interval,omitempty"`
	Daily *KeyfactorCommonSchedulingModelsTimeModel `json:"Daily,omitempty"`
	Weekly *KeyfactorCommonSchedulingModelsWeeklyModel `json:"Weekly,omitempty"`
	Monthly *KeyfactorCommonSchedulingModelsMonthlyModel `json:"Monthly,omitempty"`
	ExactlyOnce *KeyfactorCommonSchedulingModelsTimeModel `json:"ExactlyOnce,omitempty"`
}

// NewKeyfactorCommonSchedulingKeyfactorSchedule instantiates a new KeyfactorCommonSchedulingKeyfactorSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorCommonSchedulingKeyfactorSchedule() *KeyfactorCommonSchedulingKeyfactorSchedule {
	this := KeyfactorCommonSchedulingKeyfactorSchedule{}
	return &this
}

// NewKeyfactorCommonSchedulingKeyfactorScheduleWithDefaults instantiates a new KeyfactorCommonSchedulingKeyfactorSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorCommonSchedulingKeyfactorScheduleWithDefaults() *KeyfactorCommonSchedulingKeyfactorSchedule {
	this := KeyfactorCommonSchedulingKeyfactorSchedule{}
	return &this
}

// GetImmediate returns the Immediate field value if set, zero value otherwise.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetImmediate() bool {
	if o == nil || isNil(o.Immediate) {
		var ret bool
		return ret
	}
	return *o.Immediate
}

// GetImmediateOk returns a tuple with the Immediate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetImmediateOk() (*bool, bool) {
	if o == nil || isNil(o.Immediate) {
		return nil, false
	}
	return o.Immediate, true
}

// HasImmediate returns a boolean if a field has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) HasImmediate() bool {
	if o != nil && !isNil(o.Immediate) {
		return true
	}

	return false
}

// SetImmediate gets a reference to the given bool and assigns it to the Immediate field.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) SetImmediate(v bool) {
	o.Immediate = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetInterval() KeyfactorCommonSchedulingModelsIntervalModel {
	if o == nil || isNil(o.Interval) {
		var ret KeyfactorCommonSchedulingModelsIntervalModel
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetIntervalOk() (*KeyfactorCommonSchedulingModelsIntervalModel, bool) {
	if o == nil || isNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) HasInterval() bool {
	if o != nil && !isNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given KeyfactorCommonSchedulingModelsIntervalModel and assigns it to the Interval field.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) SetInterval(v KeyfactorCommonSchedulingModelsIntervalModel) {
	o.Interval = &v
}

// GetDaily returns the Daily field value if set, zero value otherwise.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetDaily() KeyfactorCommonSchedulingModelsTimeModel {
	if o == nil || isNil(o.Daily) {
		var ret KeyfactorCommonSchedulingModelsTimeModel
		return ret
	}
	return *o.Daily
}

// GetDailyOk returns a tuple with the Daily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetDailyOk() (*KeyfactorCommonSchedulingModelsTimeModel, bool) {
	if o == nil || isNil(o.Daily) {
		return nil, false
	}
	return o.Daily, true
}

// HasDaily returns a boolean if a field has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) HasDaily() bool {
	if o != nil && !isNil(o.Daily) {
		return true
	}

	return false
}

// SetDaily gets a reference to the given KeyfactorCommonSchedulingModelsTimeModel and assigns it to the Daily field.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) SetDaily(v KeyfactorCommonSchedulingModelsTimeModel) {
	o.Daily = &v
}

// GetWeekly returns the Weekly field value if set, zero value otherwise.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetWeekly() KeyfactorCommonSchedulingModelsWeeklyModel {
	if o == nil || isNil(o.Weekly) {
		var ret KeyfactorCommonSchedulingModelsWeeklyModel
		return ret
	}
	return *o.Weekly
}

// GetWeeklyOk returns a tuple with the Weekly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetWeeklyOk() (*KeyfactorCommonSchedulingModelsWeeklyModel, bool) {
	if o == nil || isNil(o.Weekly) {
		return nil, false
	}
	return o.Weekly, true
}

// HasWeekly returns a boolean if a field has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) HasWeekly() bool {
	if o != nil && !isNil(o.Weekly) {
		return true
	}

	return false
}

// SetWeekly gets a reference to the given KeyfactorCommonSchedulingModelsWeeklyModel and assigns it to the Weekly field.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) SetWeekly(v KeyfactorCommonSchedulingModelsWeeklyModel) {
	o.Weekly = &v
}

// GetMonthly returns the Monthly field value if set, zero value otherwise.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetMonthly() KeyfactorCommonSchedulingModelsMonthlyModel {
	if o == nil || isNil(o.Monthly) {
		var ret KeyfactorCommonSchedulingModelsMonthlyModel
		return ret
	}
	return *o.Monthly
}

// GetMonthlyOk returns a tuple with the Monthly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetMonthlyOk() (*KeyfactorCommonSchedulingModelsMonthlyModel, bool) {
	if o == nil || isNil(o.Monthly) {
		return nil, false
	}
	return o.Monthly, true
}

// HasMonthly returns a boolean if a field has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) HasMonthly() bool {
	if o != nil && !isNil(o.Monthly) {
		return true
	}

	return false
}

// SetMonthly gets a reference to the given KeyfactorCommonSchedulingModelsMonthlyModel and assigns it to the Monthly field.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) SetMonthly(v KeyfactorCommonSchedulingModelsMonthlyModel) {
	o.Monthly = &v
}

// GetExactlyOnce returns the ExactlyOnce field value if set, zero value otherwise.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetExactlyOnce() KeyfactorCommonSchedulingModelsTimeModel {
	if o == nil || isNil(o.ExactlyOnce) {
		var ret KeyfactorCommonSchedulingModelsTimeModel
		return ret
	}
	return *o.ExactlyOnce
}

// GetExactlyOnceOk returns a tuple with the ExactlyOnce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetExactlyOnceOk() (*KeyfactorCommonSchedulingModelsTimeModel, bool) {
	if o == nil || isNil(o.ExactlyOnce) {
		return nil, false
	}
	return o.ExactlyOnce, true
}

// HasExactlyOnce returns a boolean if a field has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) HasExactlyOnce() bool {
	if o != nil && !isNil(o.ExactlyOnce) {
		return true
	}

	return false
}

// SetExactlyOnce gets a reference to the given KeyfactorCommonSchedulingModelsTimeModel and assigns it to the ExactlyOnce field.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) SetExactlyOnce(v KeyfactorCommonSchedulingModelsTimeModel) {
	o.ExactlyOnce = &v
}

func (o KeyfactorCommonSchedulingKeyfactorSchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorCommonSchedulingKeyfactorSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Immediate) {
		toSerialize["Immediate"] = o.Immediate
	}
	if !isNil(o.Interval) {
		toSerialize["Interval"] = o.Interval
	}
	if !isNil(o.Daily) {
		toSerialize["Daily"] = o.Daily
	}
	if !isNil(o.Weekly) {
		toSerialize["Weekly"] = o.Weekly
	}
	if !isNil(o.Monthly) {
		toSerialize["Monthly"] = o.Monthly
	}
	if !isNil(o.ExactlyOnce) {
		toSerialize["ExactlyOnce"] = o.ExactlyOnce
	}
	return toSerialize, nil
}

type NullableKeyfactorCommonSchedulingKeyfactorSchedule struct {
	value *KeyfactorCommonSchedulingKeyfactorSchedule
	isSet bool
}

func (v NullableKeyfactorCommonSchedulingKeyfactorSchedule) Get() *KeyfactorCommonSchedulingKeyfactorSchedule {
	return v.value
}

func (v *NullableKeyfactorCommonSchedulingKeyfactorSchedule) Set(val *KeyfactorCommonSchedulingKeyfactorSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorCommonSchedulingKeyfactorSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorCommonSchedulingKeyfactorSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorCommonSchedulingKeyfactorSchedule(val *KeyfactorCommonSchedulingKeyfactorSchedule) *NullableKeyfactorCommonSchedulingKeyfactorSchedule {
	return &NullableKeyfactorCommonSchedulingKeyfactorSchedule{value: val, isSet: true}
}

func (v NullableKeyfactorCommonSchedulingKeyfactorSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorCommonSchedulingKeyfactorSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


