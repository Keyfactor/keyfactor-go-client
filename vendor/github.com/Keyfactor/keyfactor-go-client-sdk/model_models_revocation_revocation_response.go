/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsRevocationRevocationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsRevocationRevocationResponse{}

// ModelsRevocationRevocationResponse struct for ModelsRevocationRevocationResponse
type ModelsRevocationRevocationResponse struct {
	RevokedIds []int32 `json:"RevokedIds,omitempty"`
	SuspendedCerts []ModelsRevocationSuspendedRevocationResponse `json:"SuspendedCerts,omitempty"`
}

// NewModelsRevocationRevocationResponse instantiates a new ModelsRevocationRevocationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsRevocationRevocationResponse() *ModelsRevocationRevocationResponse {
	this := ModelsRevocationRevocationResponse{}
	return &this
}

// NewModelsRevocationRevocationResponseWithDefaults instantiates a new ModelsRevocationRevocationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsRevocationRevocationResponseWithDefaults() *ModelsRevocationRevocationResponse {
	this := ModelsRevocationRevocationResponse{}
	return &this
}

// GetRevokedIds returns the RevokedIds field value if set, zero value otherwise.
func (o *ModelsRevocationRevocationResponse) GetRevokedIds() []int32 {
	if o == nil || isNil(o.RevokedIds) {
		var ret []int32
		return ret
	}
	return o.RevokedIds
}

// GetRevokedIdsOk returns a tuple with the RevokedIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsRevocationRevocationResponse) GetRevokedIdsOk() ([]int32, bool) {
	if o == nil || isNil(o.RevokedIds) {
		return nil, false
	}
	return o.RevokedIds, true
}

// HasRevokedIds returns a boolean if a field has been set.
func (o *ModelsRevocationRevocationResponse) HasRevokedIds() bool {
	if o != nil && !isNil(o.RevokedIds) {
		return true
	}

	return false
}

// SetRevokedIds gets a reference to the given []int32 and assigns it to the RevokedIds field.
func (o *ModelsRevocationRevocationResponse) SetRevokedIds(v []int32) {
	o.RevokedIds = v
}

// GetSuspendedCerts returns the SuspendedCerts field value if set, zero value otherwise.
func (o *ModelsRevocationRevocationResponse) GetSuspendedCerts() []ModelsRevocationSuspendedRevocationResponse {
	if o == nil || isNil(o.SuspendedCerts) {
		var ret []ModelsRevocationSuspendedRevocationResponse
		return ret
	}
	return o.SuspendedCerts
}

// GetSuspendedCertsOk returns a tuple with the SuspendedCerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsRevocationRevocationResponse) GetSuspendedCertsOk() ([]ModelsRevocationSuspendedRevocationResponse, bool) {
	if o == nil || isNil(o.SuspendedCerts) {
		return nil, false
	}
	return o.SuspendedCerts, true
}

// HasSuspendedCerts returns a boolean if a field has been set.
func (o *ModelsRevocationRevocationResponse) HasSuspendedCerts() bool {
	if o != nil && !isNil(o.SuspendedCerts) {
		return true
	}

	return false
}

// SetSuspendedCerts gets a reference to the given []ModelsRevocationSuspendedRevocationResponse and assigns it to the SuspendedCerts field.
func (o *ModelsRevocationRevocationResponse) SetSuspendedCerts(v []ModelsRevocationSuspendedRevocationResponse) {
	o.SuspendedCerts = v
}

func (o ModelsRevocationRevocationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsRevocationRevocationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RevokedIds) {
		toSerialize["RevokedIds"] = o.RevokedIds
	}
	if !isNil(o.SuspendedCerts) {
		toSerialize["SuspendedCerts"] = o.SuspendedCerts
	}
	return toSerialize, nil
}

type NullableModelsRevocationRevocationResponse struct {
	value *ModelsRevocationRevocationResponse
	isSet bool
}

func (v NullableModelsRevocationRevocationResponse) Get() *ModelsRevocationRevocationResponse {
	return v.value
}

func (v *NullableModelsRevocationRevocationResponse) Set(val *ModelsRevocationRevocationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsRevocationRevocationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsRevocationRevocationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsRevocationRevocationResponse(val *ModelsRevocationRevocationResponse) *NullableModelsRevocationRevocationResponse {
	return &NullableModelsRevocationRevocationResponse{value: val, isSet: true}
}

func (v NullableModelsRevocationRevocationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsRevocationRevocationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


