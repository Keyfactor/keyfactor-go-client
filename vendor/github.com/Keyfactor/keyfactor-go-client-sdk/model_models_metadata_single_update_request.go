/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsMetadataSingleUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsMetadataSingleUpdateRequest{}

// ModelsMetadataSingleUpdateRequest struct for ModelsMetadataSingleUpdateRequest
type ModelsMetadataSingleUpdateRequest struct {
	MetadataName *string `json:"MetadataName,omitempty"`
	Value *string `json:"Value,omitempty"`
	OverwriteExisting *bool `json:"OverwriteExisting,omitempty"`
}

// NewModelsMetadataSingleUpdateRequest instantiates a new ModelsMetadataSingleUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsMetadataSingleUpdateRequest() *ModelsMetadataSingleUpdateRequest {
	this := ModelsMetadataSingleUpdateRequest{}
	return &this
}

// NewModelsMetadataSingleUpdateRequestWithDefaults instantiates a new ModelsMetadataSingleUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsMetadataSingleUpdateRequestWithDefaults() *ModelsMetadataSingleUpdateRequest {
	this := ModelsMetadataSingleUpdateRequest{}
	return &this
}

// GetMetadataName returns the MetadataName field value if set, zero value otherwise.
func (o *ModelsMetadataSingleUpdateRequest) GetMetadataName() string {
	if o == nil || isNil(o.MetadataName) {
		var ret string
		return ret
	}
	return *o.MetadataName
}

// GetMetadataNameOk returns a tuple with the MetadataName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsMetadataSingleUpdateRequest) GetMetadataNameOk() (*string, bool) {
	if o == nil || isNil(o.MetadataName) {
		return nil, false
	}
	return o.MetadataName, true
}

// HasMetadataName returns a boolean if a field has been set.
func (o *ModelsMetadataSingleUpdateRequest) HasMetadataName() bool {
	if o != nil && !isNil(o.MetadataName) {
		return true
	}

	return false
}

// SetMetadataName gets a reference to the given string and assigns it to the MetadataName field.
func (o *ModelsMetadataSingleUpdateRequest) SetMetadataName(v string) {
	o.MetadataName = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ModelsMetadataSingleUpdateRequest) GetValue() string {
	if o == nil || isNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsMetadataSingleUpdateRequest) GetValueOk() (*string, bool) {
	if o == nil || isNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ModelsMetadataSingleUpdateRequest) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ModelsMetadataSingleUpdateRequest) SetValue(v string) {
	o.Value = &v
}

// GetOverwriteExisting returns the OverwriteExisting field value if set, zero value otherwise.
func (o *ModelsMetadataSingleUpdateRequest) GetOverwriteExisting() bool {
	if o == nil || isNil(o.OverwriteExisting) {
		var ret bool
		return ret
	}
	return *o.OverwriteExisting
}

// GetOverwriteExistingOk returns a tuple with the OverwriteExisting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsMetadataSingleUpdateRequest) GetOverwriteExistingOk() (*bool, bool) {
	if o == nil || isNil(o.OverwriteExisting) {
		return nil, false
	}
	return o.OverwriteExisting, true
}

// HasOverwriteExisting returns a boolean if a field has been set.
func (o *ModelsMetadataSingleUpdateRequest) HasOverwriteExisting() bool {
	if o != nil && !isNil(o.OverwriteExisting) {
		return true
	}

	return false
}

// SetOverwriteExisting gets a reference to the given bool and assigns it to the OverwriteExisting field.
func (o *ModelsMetadataSingleUpdateRequest) SetOverwriteExisting(v bool) {
	o.OverwriteExisting = &v
}

func (o ModelsMetadataSingleUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsMetadataSingleUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.MetadataName) {
		toSerialize["MetadataName"] = o.MetadataName
	}
	if !isNil(o.Value) {
		toSerialize["Value"] = o.Value
	}
	if !isNil(o.OverwriteExisting) {
		toSerialize["OverwriteExisting"] = o.OverwriteExisting
	}
	return toSerialize, nil
}

type NullableModelsMetadataSingleUpdateRequest struct {
	value *ModelsMetadataSingleUpdateRequest
	isSet bool
}

func (v NullableModelsMetadataSingleUpdateRequest) Get() *ModelsMetadataSingleUpdateRequest {
	return v.value
}

func (v *NullableModelsMetadataSingleUpdateRequest) Set(val *ModelsMetadataSingleUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsMetadataSingleUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsMetadataSingleUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsMetadataSingleUpdateRequest(val *ModelsMetadataSingleUpdateRequest) *NullableModelsMetadataSingleUpdateRequest {
	return &NullableModelsMetadataSingleUpdateRequest{value: val, isSet: true}
}

func (v NullableModelsMetadataSingleUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsMetadataSingleUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


