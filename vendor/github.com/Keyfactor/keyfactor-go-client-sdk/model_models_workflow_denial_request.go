/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsWorkflowDenialRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsWorkflowDenialRequest{}

// ModelsWorkflowDenialRequest struct for ModelsWorkflowDenialRequest
type ModelsWorkflowDenialRequest struct {
	Comment *string `json:"Comment,omitempty"`
	CertificateRequestIds []int32 `json:"CertificateRequestIds,omitempty"`
}

// NewModelsWorkflowDenialRequest instantiates a new ModelsWorkflowDenialRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsWorkflowDenialRequest() *ModelsWorkflowDenialRequest {
	this := ModelsWorkflowDenialRequest{}
	return &this
}

// NewModelsWorkflowDenialRequestWithDefaults instantiates a new ModelsWorkflowDenialRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsWorkflowDenialRequestWithDefaults() *ModelsWorkflowDenialRequest {
	this := ModelsWorkflowDenialRequest{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ModelsWorkflowDenialRequest) GetComment() string {
	if o == nil || isNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsWorkflowDenialRequest) GetCommentOk() (*string, bool) {
	if o == nil || isNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ModelsWorkflowDenialRequest) HasComment() bool {
	if o != nil && !isNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ModelsWorkflowDenialRequest) SetComment(v string) {
	o.Comment = &v
}

// GetCertificateRequestIds returns the CertificateRequestIds field value if set, zero value otherwise.
func (o *ModelsWorkflowDenialRequest) GetCertificateRequestIds() []int32 {
	if o == nil || isNil(o.CertificateRequestIds) {
		var ret []int32
		return ret
	}
	return o.CertificateRequestIds
}

// GetCertificateRequestIdsOk returns a tuple with the CertificateRequestIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsWorkflowDenialRequest) GetCertificateRequestIdsOk() ([]int32, bool) {
	if o == nil || isNil(o.CertificateRequestIds) {
		return nil, false
	}
	return o.CertificateRequestIds, true
}

// HasCertificateRequestIds returns a boolean if a field has been set.
func (o *ModelsWorkflowDenialRequest) HasCertificateRequestIds() bool {
	if o != nil && !isNil(o.CertificateRequestIds) {
		return true
	}

	return false
}

// SetCertificateRequestIds gets a reference to the given []int32 and assigns it to the CertificateRequestIds field.
func (o *ModelsWorkflowDenialRequest) SetCertificateRequestIds(v []int32) {
	o.CertificateRequestIds = v
}

func (o ModelsWorkflowDenialRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsWorkflowDenialRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Comment) {
		toSerialize["Comment"] = o.Comment
	}
	if !isNil(o.CertificateRequestIds) {
		toSerialize["CertificateRequestIds"] = o.CertificateRequestIds
	}
	return toSerialize, nil
}

type NullableModelsWorkflowDenialRequest struct {
	value *ModelsWorkflowDenialRequest
	isSet bool
}

func (v NullableModelsWorkflowDenialRequest) Get() *ModelsWorkflowDenialRequest {
	return v.value
}

func (v *NullableModelsWorkflowDenialRequest) Set(val *ModelsWorkflowDenialRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsWorkflowDenialRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsWorkflowDenialRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsWorkflowDenialRequest(val *ModelsWorkflowDenialRequest) *NullableModelsWorkflowDenialRequest {
	return &NullableModelsWorkflowDenialRequest{value: val, isSet: true}
}

func (v NullableModelsWorkflowDenialRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsWorkflowDenialRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


