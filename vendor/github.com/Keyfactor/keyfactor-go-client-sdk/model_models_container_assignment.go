/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsContainerAssignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsContainerAssignment{}

// ModelsContainerAssignment struct for ModelsContainerAssignment
type ModelsContainerAssignment struct {
	CertStoreContainerId *int32 `json:"CertStoreContainerId,omitempty"`
	NewContainerName *string `json:"NewContainerName,omitempty"`
	NewContainerType *int32 `json:"NewContainerType,omitempty"`
	KeystoreIds []string `json:"KeystoreIds"`
}

// NewModelsContainerAssignment instantiates a new ModelsContainerAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsContainerAssignment(keystoreIds []string) *ModelsContainerAssignment {
	this := ModelsContainerAssignment{}
	this.KeystoreIds = keystoreIds
	return &this
}

// NewModelsContainerAssignmentWithDefaults instantiates a new ModelsContainerAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsContainerAssignmentWithDefaults() *ModelsContainerAssignment {
	this := ModelsContainerAssignment{}
	return &this
}

// GetCertStoreContainerId returns the CertStoreContainerId field value if set, zero value otherwise.
func (o *ModelsContainerAssignment) GetCertStoreContainerId() int32 {
	if o == nil || isNil(o.CertStoreContainerId) {
		var ret int32
		return ret
	}
	return *o.CertStoreContainerId
}

// GetCertStoreContainerIdOk returns a tuple with the CertStoreContainerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsContainerAssignment) GetCertStoreContainerIdOk() (*int32, bool) {
	if o == nil || isNil(o.CertStoreContainerId) {
		return nil, false
	}
	return o.CertStoreContainerId, true
}

// HasCertStoreContainerId returns a boolean if a field has been set.
func (o *ModelsContainerAssignment) HasCertStoreContainerId() bool {
	if o != nil && !isNil(o.CertStoreContainerId) {
		return true
	}

	return false
}

// SetCertStoreContainerId gets a reference to the given int32 and assigns it to the CertStoreContainerId field.
func (o *ModelsContainerAssignment) SetCertStoreContainerId(v int32) {
	o.CertStoreContainerId = &v
}

// GetNewContainerName returns the NewContainerName field value if set, zero value otherwise.
func (o *ModelsContainerAssignment) GetNewContainerName() string {
	if o == nil || isNil(o.NewContainerName) {
		var ret string
		return ret
	}
	return *o.NewContainerName
}

// GetNewContainerNameOk returns a tuple with the NewContainerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsContainerAssignment) GetNewContainerNameOk() (*string, bool) {
	if o == nil || isNil(o.NewContainerName) {
		return nil, false
	}
	return o.NewContainerName, true
}

// HasNewContainerName returns a boolean if a field has been set.
func (o *ModelsContainerAssignment) HasNewContainerName() bool {
	if o != nil && !isNil(o.NewContainerName) {
		return true
	}

	return false
}

// SetNewContainerName gets a reference to the given string and assigns it to the NewContainerName field.
func (o *ModelsContainerAssignment) SetNewContainerName(v string) {
	o.NewContainerName = &v
}

// GetNewContainerType returns the NewContainerType field value if set, zero value otherwise.
func (o *ModelsContainerAssignment) GetNewContainerType() int32 {
	if o == nil || isNil(o.NewContainerType) {
		var ret int32
		return ret
	}
	return *o.NewContainerType
}

// GetNewContainerTypeOk returns a tuple with the NewContainerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsContainerAssignment) GetNewContainerTypeOk() (*int32, bool) {
	if o == nil || isNil(o.NewContainerType) {
		return nil, false
	}
	return o.NewContainerType, true
}

// HasNewContainerType returns a boolean if a field has been set.
func (o *ModelsContainerAssignment) HasNewContainerType() bool {
	if o != nil && !isNil(o.NewContainerType) {
		return true
	}

	return false
}

// SetNewContainerType gets a reference to the given int32 and assigns it to the NewContainerType field.
func (o *ModelsContainerAssignment) SetNewContainerType(v int32) {
	o.NewContainerType = &v
}

// GetKeystoreIds returns the KeystoreIds field value
func (o *ModelsContainerAssignment) GetKeystoreIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.KeystoreIds
}

// GetKeystoreIdsOk returns a tuple with the KeystoreIds field value
// and a boolean to check if the value has been set.
func (o *ModelsContainerAssignment) GetKeystoreIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KeystoreIds, true
}

// SetKeystoreIds sets field value
func (o *ModelsContainerAssignment) SetKeystoreIds(v []string) {
	o.KeystoreIds = v
}

func (o ModelsContainerAssignment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsContainerAssignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CertStoreContainerId) {
		toSerialize["CertStoreContainerId"] = o.CertStoreContainerId
	}
	if !isNil(o.NewContainerName) {
		toSerialize["NewContainerName"] = o.NewContainerName
	}
	if !isNil(o.NewContainerType) {
		toSerialize["NewContainerType"] = o.NewContainerType
	}
	toSerialize["KeystoreIds"] = o.KeystoreIds
	return toSerialize, nil
}

type NullableModelsContainerAssignment struct {
	value *ModelsContainerAssignment
	isSet bool
}

func (v NullableModelsContainerAssignment) Get() *ModelsContainerAssignment {
	return v.value
}

func (v *NullableModelsContainerAssignment) Set(val *ModelsContainerAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsContainerAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsContainerAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsContainerAssignment(val *ModelsContainerAssignment) *NullableModelsContainerAssignment {
	return &NullableModelsContainerAssignment{value: val, isSet: true}
}

func (v NullableModelsContainerAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsContainerAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


