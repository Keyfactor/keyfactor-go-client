/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsCertificateValidationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCertificateValidationResponse{}

// ModelsCertificateValidationResponse struct for ModelsCertificateValidationResponse
type ModelsCertificateValidationResponse struct {
	// States whether the certificate is valid or not
	Valid *bool `json:"Valid,omitempty"`
	// Lists any reasons why the certificate is not valid
	Results *map[string]string `json:"Results,omitempty"`
}

// NewModelsCertificateValidationResponse instantiates a new ModelsCertificateValidationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCertificateValidationResponse() *ModelsCertificateValidationResponse {
	this := ModelsCertificateValidationResponse{}
	return &this
}

// NewModelsCertificateValidationResponseWithDefaults instantiates a new ModelsCertificateValidationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCertificateValidationResponseWithDefaults() *ModelsCertificateValidationResponse {
	this := ModelsCertificateValidationResponse{}
	return &this
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *ModelsCertificateValidationResponse) GetValid() bool {
	if o == nil || isNil(o.Valid) {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateValidationResponse) GetValidOk() (*bool, bool) {
	if o == nil || isNil(o.Valid) {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *ModelsCertificateValidationResponse) HasValid() bool {
	if o != nil && !isNil(o.Valid) {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *ModelsCertificateValidationResponse) SetValid(v bool) {
	o.Valid = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *ModelsCertificateValidationResponse) GetResults() map[string]string {
	if o == nil || isNil(o.Results) {
		var ret map[string]string
		return ret
	}
	return *o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateValidationResponse) GetResultsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *ModelsCertificateValidationResponse) HasResults() bool {
	if o != nil && !isNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given map[string]string and assigns it to the Results field.
func (o *ModelsCertificateValidationResponse) SetResults(v map[string]string) {
	o.Results = &v
}

func (o ModelsCertificateValidationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCertificateValidationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Valid) {
		toSerialize["Valid"] = o.Valid
	}
	if !isNil(o.Results) {
		toSerialize["Results"] = o.Results
	}
	return toSerialize, nil
}

type NullableModelsCertificateValidationResponse struct {
	value *ModelsCertificateValidationResponse
	isSet bool
}

func (v NullableModelsCertificateValidationResponse) Get() *ModelsCertificateValidationResponse {
	return v.value
}

func (v *NullableModelsCertificateValidationResponse) Set(val *ModelsCertificateValidationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCertificateValidationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCertificateValidationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCertificateValidationResponse(val *ModelsCertificateValidationResponse) *NullableModelsCertificateValidationResponse {
	return &NullableModelsCertificateValidationResponse{value: val, isSet: true}
}

func (v NullableModelsCertificateValidationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCertificateValidationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


