/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
	"time"
)

// checks if the ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate{}

// ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate struct for ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate
type ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate struct {
	IssuedDN NullableString `json:"IssuedDN,omitempty"`
	IssuerDN NullableString `json:"IssuerDN,omitempty"`
	Thumbprint *string `json:"Thumbprint,omitempty"`
	ExpirationDate *time.Time `json:"ExpirationDate,omitempty"`
}

// NewModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate instantiates a new ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate() *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate {
	this := ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate{}
	return &this
}

// NewModelsCertificateAuthoritiesCertificateAuthorityAuthCertificateWithDefaults instantiates a new ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCertificateAuthoritiesCertificateAuthorityAuthCertificateWithDefaults() *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate {
	this := ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate{}
	return &this
}

// GetIssuedDN returns the IssuedDN field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) GetIssuedDN() string {
	if o == nil || isNil(o.IssuedDN.Get()) {
		var ret string
		return ret
	}
	return *o.IssuedDN.Get()
}

// GetIssuedDNOk returns a tuple with the IssuedDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) GetIssuedDNOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssuedDN.Get(), o.IssuedDN.IsSet()
}

// HasIssuedDN returns a boolean if a field has been set.
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) HasIssuedDN() bool {
	if o != nil && o.IssuedDN.IsSet() {
		return true
	}

	return false
}

// SetIssuedDN gets a reference to the given NullableString and assigns it to the IssuedDN field.
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) SetIssuedDN(v string) {
	o.IssuedDN.Set(&v)
}
// SetIssuedDNNil sets the value for IssuedDN to be an explicit nil
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) SetIssuedDNNil() {
	o.IssuedDN.Set(nil)
}

// UnsetIssuedDN ensures that no value is present for IssuedDN, not even an explicit nil
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) UnsetIssuedDN() {
	o.IssuedDN.Unset()
}

// GetIssuerDN returns the IssuerDN field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) GetIssuerDN() string {
	if o == nil || isNil(o.IssuerDN.Get()) {
		var ret string
		return ret
	}
	return *o.IssuerDN.Get()
}

// GetIssuerDNOk returns a tuple with the IssuerDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) GetIssuerDNOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssuerDN.Get(), o.IssuerDN.IsSet()
}

// HasIssuerDN returns a boolean if a field has been set.
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) HasIssuerDN() bool {
	if o != nil && o.IssuerDN.IsSet() {
		return true
	}

	return false
}

// SetIssuerDN gets a reference to the given NullableString and assigns it to the IssuerDN field.
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) SetIssuerDN(v string) {
	o.IssuerDN.Set(&v)
}
// SetIssuerDNNil sets the value for IssuerDN to be an explicit nil
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) SetIssuerDNNil() {
	o.IssuerDN.Set(nil)
}

// UnsetIssuerDN ensures that no value is present for IssuerDN, not even an explicit nil
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) UnsetIssuerDN() {
	o.IssuerDN.Unset()
}

// GetThumbprint returns the Thumbprint field value if set, zero value otherwise.
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) GetThumbprint() string {
	if o == nil || isNil(o.Thumbprint) {
		var ret string
		return ret
	}
	return *o.Thumbprint
}

// GetThumbprintOk returns a tuple with the Thumbprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) GetThumbprintOk() (*string, bool) {
	if o == nil || isNil(o.Thumbprint) {
		return nil, false
	}
	return o.Thumbprint, true
}

// HasThumbprint returns a boolean if a field has been set.
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) HasThumbprint() bool {
	if o != nil && !isNil(o.Thumbprint) {
		return true
	}

	return false
}

// SetThumbprint gets a reference to the given string and assigns it to the Thumbprint field.
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) SetThumbprint(v string) {
	o.Thumbprint = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) GetExpirationDate() time.Time {
	if o == nil || isNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) HasExpirationDate() bool {
	if o != nil && !isNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

func (o ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IssuedDN.IsSet() {
		toSerialize["IssuedDN"] = o.IssuedDN.Get()
	}
	if o.IssuerDN.IsSet() {
		toSerialize["IssuerDN"] = o.IssuerDN.Get()
	}
	if !isNil(o.Thumbprint) {
		toSerialize["Thumbprint"] = o.Thumbprint
	}
	if !isNil(o.ExpirationDate) {
		toSerialize["ExpirationDate"] = o.ExpirationDate
	}
	return toSerialize, nil
}

type NullableModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate struct {
	value *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate
	isSet bool
}

func (v NullableModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) Get() *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate {
	return v.value
}

func (v *NullableModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) Set(val *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate(val *ModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) *NullableModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate {
	return &NullableModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate{value: val, isSet: true}
}

func (v NullableModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCertificateAuthoritiesCertificateAuthorityAuthCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


