/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the KeyfactorApiModelsAlertsPendingPendingAlertResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorApiModelsAlertsPendingPendingAlertResponse{}

// KeyfactorApiModelsAlertsPendingPendingAlertResponse struct for KeyfactorApiModelsAlertsPendingPendingAlertResponse
type KeyfactorApiModelsAlertsPendingPendingAlertResponse struct {
	Subject *string `json:"Subject,omitempty"`
	Message *string `json:"Message,omitempty"`
	Recipients []string `json:"Recipients,omitempty"`
	CARequestId *int32 `json:"CARequestId,omitempty"`
	CommonName *string `json:"CommonName,omitempty"`
	LogicalName *string `json:"LogicalName,omitempty"`
}

// NewKeyfactorApiModelsAlertsPendingPendingAlertResponse instantiates a new KeyfactorApiModelsAlertsPendingPendingAlertResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorApiModelsAlertsPendingPendingAlertResponse() *KeyfactorApiModelsAlertsPendingPendingAlertResponse {
	this := KeyfactorApiModelsAlertsPendingPendingAlertResponse{}
	return &this
}

// NewKeyfactorApiModelsAlertsPendingPendingAlertResponseWithDefaults instantiates a new KeyfactorApiModelsAlertsPendingPendingAlertResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorApiModelsAlertsPendingPendingAlertResponseWithDefaults() *KeyfactorApiModelsAlertsPendingPendingAlertResponse {
	this := KeyfactorApiModelsAlertsPendingPendingAlertResponse{}
	return &this
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) GetSubject() string {
	if o == nil || isNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) GetSubjectOk() (*string, bool) {
	if o == nil || isNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) HasSubject() bool {
	if o != nil && !isNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) SetSubject(v string) {
	o.Subject = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) GetMessage() string {
	if o == nil || isNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) GetMessageOk() (*string, bool) {
	if o == nil || isNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) HasMessage() bool {
	if o != nil && !isNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) SetMessage(v string) {
	o.Message = &v
}

// GetRecipients returns the Recipients field value if set, zero value otherwise.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) GetRecipients() []string {
	if o == nil || isNil(o.Recipients) {
		var ret []string
		return ret
	}
	return o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) GetRecipientsOk() ([]string, bool) {
	if o == nil || isNil(o.Recipients) {
		return nil, false
	}
	return o.Recipients, true
}

// HasRecipients returns a boolean if a field has been set.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) HasRecipients() bool {
	if o != nil && !isNil(o.Recipients) {
		return true
	}

	return false
}

// SetRecipients gets a reference to the given []string and assigns it to the Recipients field.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) SetRecipients(v []string) {
	o.Recipients = v
}

// GetCARequestId returns the CARequestId field value if set, zero value otherwise.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) GetCARequestId() int32 {
	if o == nil || isNil(o.CARequestId) {
		var ret int32
		return ret
	}
	return *o.CARequestId
}

// GetCARequestIdOk returns a tuple with the CARequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) GetCARequestIdOk() (*int32, bool) {
	if o == nil || isNil(o.CARequestId) {
		return nil, false
	}
	return o.CARequestId, true
}

// HasCARequestId returns a boolean if a field has been set.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) HasCARequestId() bool {
	if o != nil && !isNil(o.CARequestId) {
		return true
	}

	return false
}

// SetCARequestId gets a reference to the given int32 and assigns it to the CARequestId field.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) SetCARequestId(v int32) {
	o.CARequestId = &v
}

// GetCommonName returns the CommonName field value if set, zero value otherwise.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) GetCommonName() string {
	if o == nil || isNil(o.CommonName) {
		var ret string
		return ret
	}
	return *o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) GetCommonNameOk() (*string, bool) {
	if o == nil || isNil(o.CommonName) {
		return nil, false
	}
	return o.CommonName, true
}

// HasCommonName returns a boolean if a field has been set.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) HasCommonName() bool {
	if o != nil && !isNil(o.CommonName) {
		return true
	}

	return false
}

// SetCommonName gets a reference to the given string and assigns it to the CommonName field.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) SetCommonName(v string) {
	o.CommonName = &v
}

// GetLogicalName returns the LogicalName field value if set, zero value otherwise.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) GetLogicalName() string {
	if o == nil || isNil(o.LogicalName) {
		var ret string
		return ret
	}
	return *o.LogicalName
}

// GetLogicalNameOk returns a tuple with the LogicalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) GetLogicalNameOk() (*string, bool) {
	if o == nil || isNil(o.LogicalName) {
		return nil, false
	}
	return o.LogicalName, true
}

// HasLogicalName returns a boolean if a field has been set.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) HasLogicalName() bool {
	if o != nil && !isNil(o.LogicalName) {
		return true
	}

	return false
}

// SetLogicalName gets a reference to the given string and assigns it to the LogicalName field.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertResponse) SetLogicalName(v string) {
	o.LogicalName = &v
}

func (o KeyfactorApiModelsAlertsPendingPendingAlertResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorApiModelsAlertsPendingPendingAlertResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Subject) {
		toSerialize["Subject"] = o.Subject
	}
	if !isNil(o.Message) {
		toSerialize["Message"] = o.Message
	}
	if !isNil(o.Recipients) {
		toSerialize["Recipients"] = o.Recipients
	}
	if !isNil(o.CARequestId) {
		toSerialize["CARequestId"] = o.CARequestId
	}
	if !isNil(o.CommonName) {
		toSerialize["CommonName"] = o.CommonName
	}
	if !isNil(o.LogicalName) {
		toSerialize["LogicalName"] = o.LogicalName
	}
	return toSerialize, nil
}

type NullableKeyfactorApiModelsAlertsPendingPendingAlertResponse struct {
	value *KeyfactorApiModelsAlertsPendingPendingAlertResponse
	isSet bool
}

func (v NullableKeyfactorApiModelsAlertsPendingPendingAlertResponse) Get() *KeyfactorApiModelsAlertsPendingPendingAlertResponse {
	return v.value
}

func (v *NullableKeyfactorApiModelsAlertsPendingPendingAlertResponse) Set(val *KeyfactorApiModelsAlertsPendingPendingAlertResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorApiModelsAlertsPendingPendingAlertResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorApiModelsAlertsPendingPendingAlertResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorApiModelsAlertsPendingPendingAlertResponse(val *KeyfactorApiModelsAlertsPendingPendingAlertResponse) *NullableKeyfactorApiModelsAlertsPendingPendingAlertResponse {
	return &NullableKeyfactorApiModelsAlertsPendingPendingAlertResponse{value: val, isSet: true}
}

func (v NullableKeyfactorApiModelsAlertsPendingPendingAlertResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorApiModelsAlertsPendingPendingAlertResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


