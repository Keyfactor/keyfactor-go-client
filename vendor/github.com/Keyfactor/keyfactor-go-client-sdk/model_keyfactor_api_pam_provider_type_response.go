/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the KeyfactorApiPAMProviderTypeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorApiPAMProviderTypeResponse{}

// KeyfactorApiPAMProviderTypeResponse struct for KeyfactorApiPAMProviderTypeResponse
type KeyfactorApiPAMProviderTypeResponse struct {
	Id *string `json:"Id,omitempty"`
	Name *string `json:"Name,omitempty"`
	Parameters []KeyfactorApiPAMProviderTypeParameterResponse `json:"Parameters,omitempty"`
}

// NewKeyfactorApiPAMProviderTypeResponse instantiates a new KeyfactorApiPAMProviderTypeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorApiPAMProviderTypeResponse() *KeyfactorApiPAMProviderTypeResponse {
	this := KeyfactorApiPAMProviderTypeResponse{}
	return &this
}

// NewKeyfactorApiPAMProviderTypeResponseWithDefaults instantiates a new KeyfactorApiPAMProviderTypeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorApiPAMProviderTypeResponseWithDefaults() *KeyfactorApiPAMProviderTypeResponse {
	this := KeyfactorApiPAMProviderTypeResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KeyfactorApiPAMProviderTypeResponse) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiPAMProviderTypeResponse) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KeyfactorApiPAMProviderTypeResponse) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *KeyfactorApiPAMProviderTypeResponse) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KeyfactorApiPAMProviderTypeResponse) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiPAMProviderTypeResponse) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *KeyfactorApiPAMProviderTypeResponse) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KeyfactorApiPAMProviderTypeResponse) SetName(v string) {
	o.Name = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *KeyfactorApiPAMProviderTypeResponse) GetParameters() []KeyfactorApiPAMProviderTypeParameterResponse {
	if o == nil || isNil(o.Parameters) {
		var ret []KeyfactorApiPAMProviderTypeParameterResponse
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiPAMProviderTypeResponse) GetParametersOk() ([]KeyfactorApiPAMProviderTypeParameterResponse, bool) {
	if o == nil || isNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *KeyfactorApiPAMProviderTypeResponse) HasParameters() bool {
	if o != nil && !isNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []KeyfactorApiPAMProviderTypeParameterResponse and assigns it to the Parameters field.
func (o *KeyfactorApiPAMProviderTypeResponse) SetParameters(v []KeyfactorApiPAMProviderTypeParameterResponse) {
	o.Parameters = v
}

func (o KeyfactorApiPAMProviderTypeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorApiPAMProviderTypeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !isNil(o.Parameters) {
		toSerialize["Parameters"] = o.Parameters
	}
	return toSerialize, nil
}

type NullableKeyfactorApiPAMProviderTypeResponse struct {
	value *KeyfactorApiPAMProviderTypeResponse
	isSet bool
}

func (v NullableKeyfactorApiPAMProviderTypeResponse) Get() *KeyfactorApiPAMProviderTypeResponse {
	return v.value
}

func (v *NullableKeyfactorApiPAMProviderTypeResponse) Set(val *KeyfactorApiPAMProviderTypeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorApiPAMProviderTypeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorApiPAMProviderTypeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorApiPAMProviderTypeResponse(val *KeyfactorApiPAMProviderTypeResponse) *NullableKeyfactorApiPAMProviderTypeResponse {
	return &NullableKeyfactorApiPAMProviderTypeResponse{value: val, isSet: true}
}

func (v NullableKeyfactorApiPAMProviderTypeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorApiPAMProviderTypeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


