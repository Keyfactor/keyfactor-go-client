/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsOrchestratorJobsBulkOrchestratorJobPair type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsOrchestratorJobsBulkOrchestratorJobPair{}

// ModelsOrchestratorJobsBulkOrchestratorJobPair struct for ModelsOrchestratorJobsBulkOrchestratorJobPair
type ModelsOrchestratorJobsBulkOrchestratorJobPair struct {
	JobId *string `json:"JobId,omitempty"`
	OrchestratorId *string `json:"OrchestratorId,omitempty"`
}

// NewModelsOrchestratorJobsBulkOrchestratorJobPair instantiates a new ModelsOrchestratorJobsBulkOrchestratorJobPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsOrchestratorJobsBulkOrchestratorJobPair() *ModelsOrchestratorJobsBulkOrchestratorJobPair {
	this := ModelsOrchestratorJobsBulkOrchestratorJobPair{}
	return &this
}

// NewModelsOrchestratorJobsBulkOrchestratorJobPairWithDefaults instantiates a new ModelsOrchestratorJobsBulkOrchestratorJobPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsOrchestratorJobsBulkOrchestratorJobPairWithDefaults() *ModelsOrchestratorJobsBulkOrchestratorJobPair {
	this := ModelsOrchestratorJobsBulkOrchestratorJobPair{}
	return &this
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *ModelsOrchestratorJobsBulkOrchestratorJobPair) GetJobId() string {
	if o == nil || isNil(o.JobId) {
		var ret string
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsOrchestratorJobsBulkOrchestratorJobPair) GetJobIdOk() (*string, bool) {
	if o == nil || isNil(o.JobId) {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *ModelsOrchestratorJobsBulkOrchestratorJobPair) HasJobId() bool {
	if o != nil && !isNil(o.JobId) {
		return true
	}

	return false
}

// SetJobId gets a reference to the given string and assigns it to the JobId field.
func (o *ModelsOrchestratorJobsBulkOrchestratorJobPair) SetJobId(v string) {
	o.JobId = &v
}

// GetOrchestratorId returns the OrchestratorId field value if set, zero value otherwise.
func (o *ModelsOrchestratorJobsBulkOrchestratorJobPair) GetOrchestratorId() string {
	if o == nil || isNil(o.OrchestratorId) {
		var ret string
		return ret
	}
	return *o.OrchestratorId
}

// GetOrchestratorIdOk returns a tuple with the OrchestratorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsOrchestratorJobsBulkOrchestratorJobPair) GetOrchestratorIdOk() (*string, bool) {
	if o == nil || isNil(o.OrchestratorId) {
		return nil, false
	}
	return o.OrchestratorId, true
}

// HasOrchestratorId returns a boolean if a field has been set.
func (o *ModelsOrchestratorJobsBulkOrchestratorJobPair) HasOrchestratorId() bool {
	if o != nil && !isNil(o.OrchestratorId) {
		return true
	}

	return false
}

// SetOrchestratorId gets a reference to the given string and assigns it to the OrchestratorId field.
func (o *ModelsOrchestratorJobsBulkOrchestratorJobPair) SetOrchestratorId(v string) {
	o.OrchestratorId = &v
}

func (o ModelsOrchestratorJobsBulkOrchestratorJobPair) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsOrchestratorJobsBulkOrchestratorJobPair) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.JobId) {
		toSerialize["JobId"] = o.JobId
	}
	if !isNil(o.OrchestratorId) {
		toSerialize["OrchestratorId"] = o.OrchestratorId
	}
	return toSerialize, nil
}

type NullableModelsOrchestratorJobsBulkOrchestratorJobPair struct {
	value *ModelsOrchestratorJobsBulkOrchestratorJobPair
	isSet bool
}

func (v NullableModelsOrchestratorJobsBulkOrchestratorJobPair) Get() *ModelsOrchestratorJobsBulkOrchestratorJobPair {
	return v.value
}

func (v *NullableModelsOrchestratorJobsBulkOrchestratorJobPair) Set(val *ModelsOrchestratorJobsBulkOrchestratorJobPair) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsOrchestratorJobsBulkOrchestratorJobPair) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsOrchestratorJobsBulkOrchestratorJobPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsOrchestratorJobsBulkOrchestratorJobPair(val *ModelsOrchestratorJobsBulkOrchestratorJobPair) *NullableModelsOrchestratorJobsBulkOrchestratorJobPair {
	return &NullableModelsOrchestratorJobsBulkOrchestratorJobPair{value: val, isSet: true}
}

func (v NullableModelsOrchestratorJobsBulkOrchestratorJobPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsOrchestratorJobsBulkOrchestratorJobPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


