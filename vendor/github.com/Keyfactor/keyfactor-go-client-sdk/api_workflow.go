/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// WorkflowApiService WorkflowApi service
type WorkflowApiService service

type ApiWorkflowApprovePendingRequestsRequest struct {
	ctx context.Context
	ApiService *WorkflowApiService
	xKeyfactorRequestedWith *string
	requestIds *[]int32
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowApprovePendingRequestsRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowApprovePendingRequestsRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Array of Keyfactor identifiers of the certificate requests
func (r ApiWorkflowApprovePendingRequestsRequest) RequestIds(requestIds []int32) ApiWorkflowApprovePendingRequestsRequest {
	r.requestIds = &requestIds
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowApprovePendingRequestsRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowApprovePendingRequestsRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowApprovePendingRequestsRequest) Execute() (*ModelsWorkflowApproveDenyResult, *http.Response, error) {
	return r.ApiService.WorkflowApprovePendingRequestsExecute(r)
}

/*
WorkflowApprovePendingRequests Approves pending certificate requests associated with the provided ids

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWorkflowApprovePendingRequestsRequest
*/
func (a *WorkflowApiService) WorkflowApprovePendingRequests(ctx context.Context) ApiWorkflowApprovePendingRequestsRequest {
	return ApiWorkflowApprovePendingRequestsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelsWorkflowApproveDenyResult
func (a *WorkflowApiService) WorkflowApprovePendingRequestsExecute(r ApiWorkflowApprovePendingRequestsRequest) (*ModelsWorkflowApproveDenyResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsWorkflowApproveDenyResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowApiService.WorkflowApprovePendingRequests")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Workflow/Certificates/Approve"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.requestIds == nil {
		return localVarReturnValue, nil, reportError("requestIds is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.requestIds
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowDenyPendingRequestsRequest struct {
	ctx context.Context
	ApiService *WorkflowApiService
	xKeyfactorRequestedWith *string
	request *ModelsWorkflowDenialRequest
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowDenyPendingRequestsRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowDenyPendingRequestsRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Keyfactor identifiers of the certificate requests to be denied and any denial comments
func (r ApiWorkflowDenyPendingRequestsRequest) Request(request ModelsWorkflowDenialRequest) ApiWorkflowDenyPendingRequestsRequest {
	r.request = &request
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowDenyPendingRequestsRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowDenyPendingRequestsRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowDenyPendingRequestsRequest) Execute() (*ModelsWorkflowApproveDenyResult, *http.Response, error) {
	return r.ApiService.WorkflowDenyPendingRequestsExecute(r)
}

/*
WorkflowDenyPendingRequests Denies pending certificate requests associated with the provided ids

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWorkflowDenyPendingRequestsRequest
*/
func (a *WorkflowApiService) WorkflowDenyPendingRequests(ctx context.Context) ApiWorkflowDenyPendingRequestsRequest {
	return ApiWorkflowDenyPendingRequestsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelsWorkflowApproveDenyResult
func (a *WorkflowApiService) WorkflowDenyPendingRequestsExecute(r ApiWorkflowDenyPendingRequestsRequest) (*ModelsWorkflowApproveDenyResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsWorkflowApproveDenyResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowApiService.WorkflowDenyPendingRequests")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Workflow/Certificates/Deny"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.request == nil {
		return localVarReturnValue, nil, reportError("request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowGetRequest struct {
	ctx context.Context
	ApiService *WorkflowApiService
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
	pagedQueryQueryString *string
	pagedQueryPageReturned *int32
	pagedQueryReturnLimit *int32
	pagedQuerySortField *string
	pagedQuerySortAscending *int32
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)
func (r ApiWorkflowGetRequest) PagedQueryQueryString(pagedQueryQueryString string) ApiWorkflowGetRequest {
	r.pagedQueryQueryString = &pagedQueryQueryString
	return r
}

// The current page within the result set to be returned
func (r ApiWorkflowGetRequest) PagedQueryPageReturned(pagedQueryPageReturned int32) ApiWorkflowGetRequest {
	r.pagedQueryPageReturned = &pagedQueryPageReturned
	return r
}

// Maximum number of records to be returned in a single call
func (r ApiWorkflowGetRequest) PagedQueryReturnLimit(pagedQueryReturnLimit int32) ApiWorkflowGetRequest {
	r.pagedQueryReturnLimit = &pagedQueryReturnLimit
	return r
}

// Field by which the results should be sorted (view results via Management Portal for sortable columns)
func (r ApiWorkflowGetRequest) PagedQuerySortField(pagedQuerySortField string) ApiWorkflowGetRequest {
	r.pagedQuerySortField = &pagedQuerySortField
	return r
}

// Field sort direction [0&#x3D;ascending, 1&#x3D;descending]
func (r ApiWorkflowGetRequest) PagedQuerySortAscending(pagedQuerySortAscending int32) ApiWorkflowGetRequest {
	r.pagedQuerySortAscending = &pagedQuerySortAscending
	return r
}

func (r ApiWorkflowGetRequest) Execute() ([]ModelsWorkflowCertificateRequestModel, *http.Response, error) {
	return r.ApiService.WorkflowGetExecute(r)
}

/*
WorkflowGet Gets a collection of certificate requests based on the provided query.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWorkflowGetRequest
*/
func (a *WorkflowApiService) WorkflowGet(ctx context.Context) ApiWorkflowGetRequest {
	return ApiWorkflowGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ModelsWorkflowCertificateRequestModel
func (a *WorkflowApiService) WorkflowGetExecute(r ApiWorkflowGetRequest) ([]ModelsWorkflowCertificateRequestModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelsWorkflowCertificateRequestModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowApiService.WorkflowGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Workflow/Certificates/Pending"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.pagedQueryQueryString != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.queryString", r.pagedQueryQueryString, "")
	}
	if r.pagedQueryPageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.pageReturned", r.pagedQueryPageReturned, "")
	}
	if r.pagedQueryReturnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.returnLimit", r.pagedQueryReturnLimit, "")
	}
	if r.pagedQuerySortField != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.sortField", r.pagedQuerySortField, "")
	}
	if r.pagedQuerySortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.sortAscending", r.pagedQuerySortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowGetCertificateRequestDetailsRequest struct {
	ctx context.Context
	ApiService *WorkflowApiService
	id int32
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowGetCertificateRequestDetailsRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowGetCertificateRequestDetailsRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowGetCertificateRequestDetailsRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowGetCertificateRequestDetailsRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowGetCertificateRequestDetailsRequest) Execute() (*ModelsWorkflowCertificateRequestDetailsModel, *http.Response, error) {
	return r.ApiService.WorkflowGetCertificateRequestDetailsExecute(r)
}

/*
WorkflowGetCertificateRequestDetails Returns certificate request details based on the provided ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the certificate request.
 @return ApiWorkflowGetCertificateRequestDetailsRequest
*/
func (a *WorkflowApiService) WorkflowGetCertificateRequestDetails(ctx context.Context, id int32) ApiWorkflowGetCertificateRequestDetailsRequest {
	return ApiWorkflowGetCertificateRequestDetailsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ModelsWorkflowCertificateRequestDetailsModel
func (a *WorkflowApiService) WorkflowGetCertificateRequestDetailsExecute(r ApiWorkflowGetCertificateRequestDetailsRequest) (*ModelsWorkflowCertificateRequestDetailsModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsWorkflowCertificateRequestDetailsModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowApiService.WorkflowGetCertificateRequestDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Workflow/Certificates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowGetDeniedRequest struct {
	ctx context.Context
	ApiService *WorkflowApiService
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
	pagedQueryQueryString *string
	pagedQueryPageReturned *int32
	pagedQueryReturnLimit *int32
	pagedQuerySortField *string
	pagedQuerySortAscending *int32
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowGetDeniedRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowGetDeniedRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowGetDeniedRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowGetDeniedRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)
func (r ApiWorkflowGetDeniedRequest) PagedQueryQueryString(pagedQueryQueryString string) ApiWorkflowGetDeniedRequest {
	r.pagedQueryQueryString = &pagedQueryQueryString
	return r
}

// The current page within the result set to be returned
func (r ApiWorkflowGetDeniedRequest) PagedQueryPageReturned(pagedQueryPageReturned int32) ApiWorkflowGetDeniedRequest {
	r.pagedQueryPageReturned = &pagedQueryPageReturned
	return r
}

// Maximum number of records to be returned in a single call
func (r ApiWorkflowGetDeniedRequest) PagedQueryReturnLimit(pagedQueryReturnLimit int32) ApiWorkflowGetDeniedRequest {
	r.pagedQueryReturnLimit = &pagedQueryReturnLimit
	return r
}

// Field by which the results should be sorted (view results via Management Portal for sortable columns)
func (r ApiWorkflowGetDeniedRequest) PagedQuerySortField(pagedQuerySortField string) ApiWorkflowGetDeniedRequest {
	r.pagedQuerySortField = &pagedQuerySortField
	return r
}

// Field sort direction [0&#x3D;ascending, 1&#x3D;descending]
func (r ApiWorkflowGetDeniedRequest) PagedQuerySortAscending(pagedQuerySortAscending int32) ApiWorkflowGetDeniedRequest {
	r.pagedQuerySortAscending = &pagedQuerySortAscending
	return r
}

func (r ApiWorkflowGetDeniedRequest) Execute() ([]ModelsWorkflowCertificateRequestModel, *http.Response, error) {
	return r.ApiService.WorkflowGetDeniedExecute(r)
}

/*
WorkflowGetDenied Gets a collection of denied certificate requests based on the provided query.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWorkflowGetDeniedRequest
*/
func (a *WorkflowApiService) WorkflowGetDenied(ctx context.Context) ApiWorkflowGetDeniedRequest {
	return ApiWorkflowGetDeniedRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ModelsWorkflowCertificateRequestModel
func (a *WorkflowApiService) WorkflowGetDeniedExecute(r ApiWorkflowGetDeniedRequest) ([]ModelsWorkflowCertificateRequestModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelsWorkflowCertificateRequestModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowApiService.WorkflowGetDenied")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Workflow/Certificates/Denied"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.pagedQueryQueryString != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.queryString", r.pagedQueryQueryString, "")
	}
	if r.pagedQueryPageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.pageReturned", r.pagedQueryPageReturned, "")
	}
	if r.pagedQueryReturnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.returnLimit", r.pagedQueryReturnLimit, "")
	}
	if r.pagedQuerySortField != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.sortField", r.pagedQuerySortField, "")
	}
	if r.pagedQuerySortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.sortAscending", r.pagedQuerySortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
