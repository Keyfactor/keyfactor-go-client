/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
	"time"
)

// checks if the KeyfactorApiModelsLicenseLicenseResponseLicensedFeature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorApiModelsLicenseLicenseResponseLicensedFeature{}

// KeyfactorApiModelsLicenseLicenseResponseLicensedFeature struct for KeyfactorApiModelsLicenseLicenseResponseLicensedFeature
type KeyfactorApiModelsLicenseLicenseResponseLicensedFeature struct {
	FeatureID *string `json:"FeatureID,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty"`
	Enabled *bool `json:"Enabled,omitempty"`
	Quantity *int32 `json:"Quantity,omitempty"`
	ExpirationDate *time.Time `json:"ExpirationDate,omitempty"`
}

// NewKeyfactorApiModelsLicenseLicenseResponseLicensedFeature instantiates a new KeyfactorApiModelsLicenseLicenseResponseLicensedFeature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorApiModelsLicenseLicenseResponseLicensedFeature() *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature {
	this := KeyfactorApiModelsLicenseLicenseResponseLicensedFeature{}
	return &this
}

// NewKeyfactorApiModelsLicenseLicenseResponseLicensedFeatureWithDefaults instantiates a new KeyfactorApiModelsLicenseLicenseResponseLicensedFeature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorApiModelsLicenseLicenseResponseLicensedFeatureWithDefaults() *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature {
	this := KeyfactorApiModelsLicenseLicenseResponseLicensedFeature{}
	return &this
}

// GetFeatureID returns the FeatureID field value if set, zero value otherwise.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetFeatureID() string {
	if o == nil || isNil(o.FeatureID) {
		var ret string
		return ret
	}
	return *o.FeatureID
}

// GetFeatureIDOk returns a tuple with the FeatureID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetFeatureIDOk() (*string, bool) {
	if o == nil || isNil(o.FeatureID) {
		return nil, false
	}
	return o.FeatureID, true
}

// HasFeatureID returns a boolean if a field has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) HasFeatureID() bool {
	if o != nil && !isNil(o.FeatureID) {
		return true
	}

	return false
}

// SetFeatureID gets a reference to the given string and assigns it to the FeatureID field.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) SetFeatureID(v string) {
	o.FeatureID = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetQuantity() int32 {
	if o == nil || isNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetQuantityOk() (*int32, bool) {
	if o == nil || isNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) HasQuantity() bool {
	if o != nil && !isNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetExpirationDate() time.Time {
	if o == nil || isNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) HasExpirationDate() bool {
	if o != nil && !isNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

func (o KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.FeatureID) {
		toSerialize["FeatureID"] = o.FeatureID
	}
	if !isNil(o.DisplayName) {
		toSerialize["DisplayName"] = o.DisplayName
	}
	if !isNil(o.Enabled) {
		toSerialize["Enabled"] = o.Enabled
	}
	if !isNil(o.Quantity) {
		toSerialize["Quantity"] = o.Quantity
	}
	if !isNil(o.ExpirationDate) {
		toSerialize["ExpirationDate"] = o.ExpirationDate
	}
	return toSerialize, nil
}

type NullableKeyfactorApiModelsLicenseLicenseResponseLicensedFeature struct {
	value *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature
	isSet bool
}

func (v NullableKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) Get() *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature {
	return v.value
}

func (v *NullableKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) Set(val *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorApiModelsLicenseLicenseResponseLicensedFeature(val *KeyfactorApiModelsLicenseLicenseResponseLicensedFeature) *NullableKeyfactorApiModelsLicenseLicenseResponseLicensedFeature {
	return &NullableKeyfactorApiModelsLicenseLicenseResponseLicensedFeature{value: val, isSet: true}
}

func (v NullableKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


