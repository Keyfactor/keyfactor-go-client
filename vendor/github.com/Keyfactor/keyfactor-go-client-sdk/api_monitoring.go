/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// MonitoringApiService MonitoringApi service
type MonitoringApiService service

type ApiMonitoringAddRevocationMonitoringRequest struct {
	ctx context.Context
	ApiService *MonitoringApiService
	xKeyfactorRequestedWith *string
	endpoint *KeyfactorApiModelsMonitoringRevocationMonitoringCreationRequest
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiMonitoringAddRevocationMonitoringRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiMonitoringAddRevocationMonitoringRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Information for the new endpoint
func (r ApiMonitoringAddRevocationMonitoringRequest) Endpoint(endpoint KeyfactorApiModelsMonitoringRevocationMonitoringCreationRequest) ApiMonitoringAddRevocationMonitoringRequest {
	r.endpoint = &endpoint
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiMonitoringAddRevocationMonitoringRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiMonitoringAddRevocationMonitoringRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiMonitoringAddRevocationMonitoringRequest) Execute() (*KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse, *http.Response, error) {
	return r.ApiService.MonitoringAddRevocationMonitoringExecute(r)
}

/*
MonitoringAddRevocationMonitoring Add a revocation monitoring endpoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMonitoringAddRevocationMonitoringRequest
*/
func (a *MonitoringApiService) MonitoringAddRevocationMonitoring(ctx context.Context) ApiMonitoringAddRevocationMonitoringRequest {
	return ApiMonitoringAddRevocationMonitoringRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse
func (a *MonitoringApiService) MonitoringAddRevocationMonitoringExecute(r ApiMonitoringAddRevocationMonitoringRequest) (*KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringApiService.MonitoringAddRevocationMonitoring")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Monitoring/Revocation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.endpoint == nil {
		return localVarReturnValue, nil, reportError("endpoint is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.endpoint
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringDeleteRevocationMonitoringRequest struct {
	ctx context.Context
	ApiService *MonitoringApiService
	id int32
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiMonitoringDeleteRevocationMonitoringRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiMonitoringDeleteRevocationMonitoringRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiMonitoringDeleteRevocationMonitoringRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiMonitoringDeleteRevocationMonitoringRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiMonitoringDeleteRevocationMonitoringRequest) Execute() (*http.Response, error) {
	return r.ApiService.MonitoringDeleteRevocationMonitoringExecute(r)
}

/*
MonitoringDeleteRevocationMonitoring Delete a revocation monitoring endpoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Id for the revocation monitoring endpoint
 @return ApiMonitoringDeleteRevocationMonitoringRequest
*/
func (a *MonitoringApiService) MonitoringDeleteRevocationMonitoring(ctx context.Context, id int32) ApiMonitoringDeleteRevocationMonitoringRequest {
	return ApiMonitoringDeleteRevocationMonitoringRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *MonitoringApiService) MonitoringDeleteRevocationMonitoringExecute(r ApiMonitoringDeleteRevocationMonitoringRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringApiService.MonitoringDeleteRevocationMonitoring")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Monitoring/Revocation/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMonitoringEditRevocationMonitoringRequest struct {
	ctx context.Context
	ApiService *MonitoringApiService
	xKeyfactorRequestedWith *string
	endpoint *KeyfactorApiModelsMonitoringRevocationMonitoringUpdateRequest
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiMonitoringEditRevocationMonitoringRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiMonitoringEditRevocationMonitoringRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Information for the endpoint
func (r ApiMonitoringEditRevocationMonitoringRequest) Endpoint(endpoint KeyfactorApiModelsMonitoringRevocationMonitoringUpdateRequest) ApiMonitoringEditRevocationMonitoringRequest {
	r.endpoint = &endpoint
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiMonitoringEditRevocationMonitoringRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiMonitoringEditRevocationMonitoringRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiMonitoringEditRevocationMonitoringRequest) Execute() (*KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse, *http.Response, error) {
	return r.ApiService.MonitoringEditRevocationMonitoringExecute(r)
}

/*
MonitoringEditRevocationMonitoring Edit a revocation monitoring endpoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMonitoringEditRevocationMonitoringRequest
*/
func (a *MonitoringApiService) MonitoringEditRevocationMonitoring(ctx context.Context) ApiMonitoringEditRevocationMonitoringRequest {
	return ApiMonitoringEditRevocationMonitoringRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse
func (a *MonitoringApiService) MonitoringEditRevocationMonitoringExecute(r ApiMonitoringEditRevocationMonitoringRequest) (*KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringApiService.MonitoringEditRevocationMonitoring")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Monitoring/Revocation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.endpoint == nil {
		return localVarReturnValue, nil, reportError("endpoint is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.endpoint
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetRevocationMonitoringRequest struct {
	ctx context.Context
	ApiService *MonitoringApiService
	id int32
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiMonitoringGetRevocationMonitoringRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiMonitoringGetRevocationMonitoringRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiMonitoringGetRevocationMonitoringRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiMonitoringGetRevocationMonitoringRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiMonitoringGetRevocationMonitoringRequest) Execute() (*KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse, *http.Response, error) {
	return r.ApiService.MonitoringGetRevocationMonitoringExecute(r)
}

/*
MonitoringGetRevocationMonitoring Get a revocation monitoring endpoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Id for the endpoint to get
 @return ApiMonitoringGetRevocationMonitoringRequest
*/
func (a *MonitoringApiService) MonitoringGetRevocationMonitoring(ctx context.Context, id int32) ApiMonitoringGetRevocationMonitoringRequest {
	return ApiMonitoringGetRevocationMonitoringRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse
func (a *MonitoringApiService) MonitoringGetRevocationMonitoringExecute(r ApiMonitoringGetRevocationMonitoringRequest) (*KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringApiService.MonitoringGetRevocationMonitoring")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Monitoring/Revocation/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringGetRevocationMonitoringEndpointsRequest struct {
	ctx context.Context
	ApiService *MonitoringApiService
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
	pagedQueryQueryString *string
	pagedQueryPageReturned *int32
	pagedQueryReturnLimit *int32
	pagedQuerySortField *string
	pagedQuerySortAscending *int32
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiMonitoringGetRevocationMonitoringEndpointsRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiMonitoringGetRevocationMonitoringEndpointsRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiMonitoringGetRevocationMonitoringEndpointsRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiMonitoringGetRevocationMonitoringEndpointsRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)
func (r ApiMonitoringGetRevocationMonitoringEndpointsRequest) PagedQueryQueryString(pagedQueryQueryString string) ApiMonitoringGetRevocationMonitoringEndpointsRequest {
	r.pagedQueryQueryString = &pagedQueryQueryString
	return r
}

// The current page within the result set to be returned
func (r ApiMonitoringGetRevocationMonitoringEndpointsRequest) PagedQueryPageReturned(pagedQueryPageReturned int32) ApiMonitoringGetRevocationMonitoringEndpointsRequest {
	r.pagedQueryPageReturned = &pagedQueryPageReturned
	return r
}

// Maximum number of records to be returned in a single call
func (r ApiMonitoringGetRevocationMonitoringEndpointsRequest) PagedQueryReturnLimit(pagedQueryReturnLimit int32) ApiMonitoringGetRevocationMonitoringEndpointsRequest {
	r.pagedQueryReturnLimit = &pagedQueryReturnLimit
	return r
}

// Field by which the results should be sorted (view results via Management Portal for sortable columns)
func (r ApiMonitoringGetRevocationMonitoringEndpointsRequest) PagedQuerySortField(pagedQuerySortField string) ApiMonitoringGetRevocationMonitoringEndpointsRequest {
	r.pagedQuerySortField = &pagedQuerySortField
	return r
}

// Field sort direction [0&#x3D;ascending, 1&#x3D;descending]
func (r ApiMonitoringGetRevocationMonitoringEndpointsRequest) PagedQuerySortAscending(pagedQuerySortAscending int32) ApiMonitoringGetRevocationMonitoringEndpointsRequest {
	r.pagedQuerySortAscending = &pagedQuerySortAscending
	return r
}

func (r ApiMonitoringGetRevocationMonitoringEndpointsRequest) Execute() ([]KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse, *http.Response, error) {
	return r.ApiService.MonitoringGetRevocationMonitoringEndpointsExecute(r)
}

/*
MonitoringGetRevocationMonitoringEndpoints Gets all revocation monitoring endpoints according to the provided filter and output parameters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMonitoringGetRevocationMonitoringEndpointsRequest
*/
func (a *MonitoringApiService) MonitoringGetRevocationMonitoringEndpoints(ctx context.Context) ApiMonitoringGetRevocationMonitoringEndpointsRequest {
	return ApiMonitoringGetRevocationMonitoringEndpointsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse
func (a *MonitoringApiService) MonitoringGetRevocationMonitoringEndpointsExecute(r ApiMonitoringGetRevocationMonitoringEndpointsRequest) ([]KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KeyfactorApiModelsMonitoringRevocationMonitoringDefinitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringApiService.MonitoringGetRevocationMonitoringEndpoints")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Monitoring/Revocation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.pagedQueryQueryString != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.queryString", r.pagedQueryQueryString, "")
	}
	if r.pagedQueryPageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.pageReturned", r.pagedQueryPageReturned, "")
	}
	if r.pagedQueryReturnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.returnLimit", r.pagedQueryReturnLimit, "")
	}
	if r.pagedQuerySortField != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.sortField", r.pagedQuerySortField, "")
	}
	if r.pagedQuerySortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.sortAscending", r.pagedQuerySortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringResolveOCSPRequest struct {
	ctx context.Context
	ApiService *MonitoringApiService
	xKeyfactorRequestedWith *string
	endpoint *KeyfactorApiModelsMonitoringOCSPParametersRequest
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiMonitoringResolveOCSPRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiMonitoringResolveOCSPRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Information for the new endpoint
func (r ApiMonitoringResolveOCSPRequest) Endpoint(endpoint KeyfactorApiModelsMonitoringOCSPParametersRequest) ApiMonitoringResolveOCSPRequest {
	r.endpoint = &endpoint
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiMonitoringResolveOCSPRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiMonitoringResolveOCSPRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiMonitoringResolveOCSPRequest) Execute() (*KeyfactorApiModelsMonitoringOCSPParametersResponse, *http.Response, error) {
	return r.ApiService.MonitoringResolveOCSPExecute(r)
}

/*
MonitoringResolveOCSP Resolve the Certificate authority given

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMonitoringResolveOCSPRequest
*/
func (a *MonitoringApiService) MonitoringResolveOCSP(ctx context.Context) ApiMonitoringResolveOCSPRequest {
	return ApiMonitoringResolveOCSPRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KeyfactorApiModelsMonitoringOCSPParametersResponse
func (a *MonitoringApiService) MonitoringResolveOCSPExecute(r ApiMonitoringResolveOCSPRequest) (*KeyfactorApiModelsMonitoringOCSPParametersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KeyfactorApiModelsMonitoringOCSPParametersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringApiService.MonitoringResolveOCSP")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Monitoring/ResolveOCSP"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.endpoint == nil {
		return localVarReturnValue, nil, reportError("endpoint is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.endpoint
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringTestAllRevocationMonitoringAlertRequest struct {
	ctx context.Context
	ApiService *MonitoringApiService
	xKeyfactorRequestedWith *string
	revocationMonitoringAlertTestRequest *KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestAllRequest
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiMonitoringTestAllRevocationMonitoringAlertRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiMonitoringTestAllRevocationMonitoringAlertRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Information about the revocation monitoring alert test
func (r ApiMonitoringTestAllRevocationMonitoringAlertRequest) RevocationMonitoringAlertTestRequest(revocationMonitoringAlertTestRequest KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestAllRequest) ApiMonitoringTestAllRevocationMonitoringAlertRequest {
	r.revocationMonitoringAlertTestRequest = &revocationMonitoringAlertTestRequest
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiMonitoringTestAllRevocationMonitoringAlertRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiMonitoringTestAllRevocationMonitoringAlertRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiMonitoringTestAllRevocationMonitoringAlertRequest) Execute() (*KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse, *http.Response, error) {
	return r.ApiService.MonitoringTestAllRevocationMonitoringAlertExecute(r)
}

/*
MonitoringTestAllRevocationMonitoringAlert Test All Alerts

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMonitoringTestAllRevocationMonitoringAlertRequest
*/
func (a *MonitoringApiService) MonitoringTestAllRevocationMonitoringAlert(ctx context.Context) ApiMonitoringTestAllRevocationMonitoringAlertRequest {
	return ApiMonitoringTestAllRevocationMonitoringAlertRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse
func (a *MonitoringApiService) MonitoringTestAllRevocationMonitoringAlertExecute(r ApiMonitoringTestAllRevocationMonitoringAlertRequest) (*KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringApiService.MonitoringTestAllRevocationMonitoringAlert")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Monitoring/Revocation/TestAll"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.revocationMonitoringAlertTestRequest == nil {
		return localVarReturnValue, nil, reportError("revocationMonitoringAlertTestRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.revocationMonitoringAlertTestRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMonitoringTestRevocationMonitoringAlertRequest struct {
	ctx context.Context
	ApiService *MonitoringApiService
	xKeyfactorRequestedWith *string
	revocationMonitoringAlertTestRequest *KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestRequest
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiMonitoringTestRevocationMonitoringAlertRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiMonitoringTestRevocationMonitoringAlertRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Information about the revocation monitoring alert test
func (r ApiMonitoringTestRevocationMonitoringAlertRequest) RevocationMonitoringAlertTestRequest(revocationMonitoringAlertTestRequest KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestRequest) ApiMonitoringTestRevocationMonitoringAlertRequest {
	r.revocationMonitoringAlertTestRequest = &revocationMonitoringAlertTestRequest
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiMonitoringTestRevocationMonitoringAlertRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiMonitoringTestRevocationMonitoringAlertRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiMonitoringTestRevocationMonitoringAlertRequest) Execute() (*KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse, *http.Response, error) {
	return r.ApiService.MonitoringTestRevocationMonitoringAlertExecute(r)
}

/*
MonitoringTestRevocationMonitoringAlert Test Alert

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMonitoringTestRevocationMonitoringAlertRequest
*/
func (a *MonitoringApiService) MonitoringTestRevocationMonitoringAlert(ctx context.Context) ApiMonitoringTestRevocationMonitoringAlertRequest {
	return ApiMonitoringTestRevocationMonitoringAlertRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse
func (a *MonitoringApiService) MonitoringTestRevocationMonitoringAlertExecute(r ApiMonitoringTestRevocationMonitoringAlertRequest) (*KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KeyfactorApiModelsMonitoringRevocationMonitoringAlertTestResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringApiService.MonitoringTestRevocationMonitoringAlert")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Monitoring/Revocation/Test"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.revocationMonitoringAlertTestRequest == nil {
		return localVarReturnValue, nil, reportError("revocationMonitoringAlertTestRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.revocationMonitoringAlertTestRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
