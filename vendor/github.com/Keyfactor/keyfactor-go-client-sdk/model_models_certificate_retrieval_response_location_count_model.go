/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsCertificateRetrievalResponseLocationCountModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCertificateRetrievalResponseLocationCountModel{}

// ModelsCertificateRetrievalResponseLocationCountModel struct for ModelsCertificateRetrievalResponseLocationCountModel
type ModelsCertificateRetrievalResponseLocationCountModel struct {
	Type *string `json:"Type,omitempty"`
	Count *int32 `json:"Count,omitempty"`
}

// NewModelsCertificateRetrievalResponseLocationCountModel instantiates a new ModelsCertificateRetrievalResponseLocationCountModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCertificateRetrievalResponseLocationCountModel() *ModelsCertificateRetrievalResponseLocationCountModel {
	this := ModelsCertificateRetrievalResponseLocationCountModel{}
	return &this
}

// NewModelsCertificateRetrievalResponseLocationCountModelWithDefaults instantiates a new ModelsCertificateRetrievalResponseLocationCountModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCertificateRetrievalResponseLocationCountModelWithDefaults() *ModelsCertificateRetrievalResponseLocationCountModel {
	this := ModelsCertificateRetrievalResponseLocationCountModel{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ModelsCertificateRetrievalResponseLocationCountModel) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateRetrievalResponseLocationCountModel) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ModelsCertificateRetrievalResponseLocationCountModel) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ModelsCertificateRetrievalResponseLocationCountModel) SetType(v string) {
	o.Type = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ModelsCertificateRetrievalResponseLocationCountModel) GetCount() int32 {
	if o == nil || isNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateRetrievalResponseLocationCountModel) GetCountOk() (*int32, bool) {
	if o == nil || isNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ModelsCertificateRetrievalResponseLocationCountModel) HasCount() bool {
	if o != nil && !isNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *ModelsCertificateRetrievalResponseLocationCountModel) SetCount(v int32) {
	o.Count = &v
}

func (o ModelsCertificateRetrievalResponseLocationCountModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCertificateRetrievalResponseLocationCountModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !isNil(o.Count) {
		toSerialize["Count"] = o.Count
	}
	return toSerialize, nil
}

type NullableModelsCertificateRetrievalResponseLocationCountModel struct {
	value *ModelsCertificateRetrievalResponseLocationCountModel
	isSet bool
}

func (v NullableModelsCertificateRetrievalResponseLocationCountModel) Get() *ModelsCertificateRetrievalResponseLocationCountModel {
	return v.value
}

func (v *NullableModelsCertificateRetrievalResponseLocationCountModel) Set(val *ModelsCertificateRetrievalResponseLocationCountModel) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCertificateRetrievalResponseLocationCountModel) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCertificateRetrievalResponseLocationCountModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCertificateRetrievalResponseLocationCountModel(val *ModelsCertificateRetrievalResponseLocationCountModel) *NullableModelsCertificateRetrievalResponseLocationCountModel {
	return &NullableModelsCertificateRetrievalResponseLocationCountModel{value: val, isSet: true}
}

func (v NullableModelsCertificateRetrievalResponseLocationCountModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCertificateRetrievalResponseLocationCountModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


