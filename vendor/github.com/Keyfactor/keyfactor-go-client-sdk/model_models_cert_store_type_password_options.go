/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsCertStoreTypePasswordOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCertStoreTypePasswordOptions{}

// ModelsCertStoreTypePasswordOptions struct for ModelsCertStoreTypePasswordOptions
type ModelsCertStoreTypePasswordOptions struct {
	EntrySupported *bool `json:"EntrySupported,omitempty"`
	StoreRequired *bool `json:"StoreRequired,omitempty"`
	Style *int32 `json:"Style,omitempty"`
}

// NewModelsCertStoreTypePasswordOptions instantiates a new ModelsCertStoreTypePasswordOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCertStoreTypePasswordOptions() *ModelsCertStoreTypePasswordOptions {
	this := ModelsCertStoreTypePasswordOptions{}
	return &this
}

// NewModelsCertStoreTypePasswordOptionsWithDefaults instantiates a new ModelsCertStoreTypePasswordOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCertStoreTypePasswordOptionsWithDefaults() *ModelsCertStoreTypePasswordOptions {
	this := ModelsCertStoreTypePasswordOptions{}
	return &this
}

// GetEntrySupported returns the EntrySupported field value if set, zero value otherwise.
func (o *ModelsCertStoreTypePasswordOptions) GetEntrySupported() bool {
	if o == nil || isNil(o.EntrySupported) {
		var ret bool
		return ret
	}
	return *o.EntrySupported
}

// GetEntrySupportedOk returns a tuple with the EntrySupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreTypePasswordOptions) GetEntrySupportedOk() (*bool, bool) {
	if o == nil || isNil(o.EntrySupported) {
		return nil, false
	}
	return o.EntrySupported, true
}

// HasEntrySupported returns a boolean if a field has been set.
func (o *ModelsCertStoreTypePasswordOptions) HasEntrySupported() bool {
	if o != nil && !isNil(o.EntrySupported) {
		return true
	}

	return false
}

// SetEntrySupported gets a reference to the given bool and assigns it to the EntrySupported field.
func (o *ModelsCertStoreTypePasswordOptions) SetEntrySupported(v bool) {
	o.EntrySupported = &v
}

// GetStoreRequired returns the StoreRequired field value if set, zero value otherwise.
func (o *ModelsCertStoreTypePasswordOptions) GetStoreRequired() bool {
	if o == nil || isNil(o.StoreRequired) {
		var ret bool
		return ret
	}
	return *o.StoreRequired
}

// GetStoreRequiredOk returns a tuple with the StoreRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreTypePasswordOptions) GetStoreRequiredOk() (*bool, bool) {
	if o == nil || isNil(o.StoreRequired) {
		return nil, false
	}
	return o.StoreRequired, true
}

// HasStoreRequired returns a boolean if a field has been set.
func (o *ModelsCertStoreTypePasswordOptions) HasStoreRequired() bool {
	if o != nil && !isNil(o.StoreRequired) {
		return true
	}

	return false
}

// SetStoreRequired gets a reference to the given bool and assigns it to the StoreRequired field.
func (o *ModelsCertStoreTypePasswordOptions) SetStoreRequired(v bool) {
	o.StoreRequired = &v
}

// GetStyle returns the Style field value if set, zero value otherwise.
func (o *ModelsCertStoreTypePasswordOptions) GetStyle() int32 {
	if o == nil || isNil(o.Style) {
		var ret int32
		return ret
	}
	return *o.Style
}

// GetStyleOk returns a tuple with the Style field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreTypePasswordOptions) GetStyleOk() (*int32, bool) {
	if o == nil || isNil(o.Style) {
		return nil, false
	}
	return o.Style, true
}

// HasStyle returns a boolean if a field has been set.
func (o *ModelsCertStoreTypePasswordOptions) HasStyle() bool {
	if o != nil && !isNil(o.Style) {
		return true
	}

	return false
}

// SetStyle gets a reference to the given int32 and assigns it to the Style field.
func (o *ModelsCertStoreTypePasswordOptions) SetStyle(v int32) {
	o.Style = &v
}

func (o ModelsCertStoreTypePasswordOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCertStoreTypePasswordOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EntrySupported) {
		toSerialize["EntrySupported"] = o.EntrySupported
	}
	if !isNil(o.StoreRequired) {
		toSerialize["StoreRequired"] = o.StoreRequired
	}
	if !isNil(o.Style) {
		toSerialize["Style"] = o.Style
	}
	return toSerialize, nil
}

type NullableModelsCertStoreTypePasswordOptions struct {
	value *ModelsCertStoreTypePasswordOptions
	isSet bool
}

func (v NullableModelsCertStoreTypePasswordOptions) Get() *ModelsCertStoreTypePasswordOptions {
	return v.value
}

func (v *NullableModelsCertStoreTypePasswordOptions) Set(val *ModelsCertStoreTypePasswordOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCertStoreTypePasswordOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCertStoreTypePasswordOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCertStoreTypePasswordOptions(val *ModelsCertStoreTypePasswordOptions) *NullableModelsCertStoreTypePasswordOptions {
	return &NullableModelsCertStoreTypePasswordOptions{value: val, isSet: true}
}

func (v NullableModelsCertStoreTypePasswordOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCertStoreTypePasswordOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


