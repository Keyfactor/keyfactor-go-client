/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest{}

// KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest struct for KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest
type KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest struct {
	Id *string `json:"Id,omitempty"`
	ContainerId *int32 `json:"ContainerId,omitempty"`
	CertStoreType *int32 `json:"CertStoreType,omitempty"`
	Properties *string `json:"Properties,omitempty"`
	Password *ModelsKeyfactorAPISecret `json:"Password,omitempty"`
}

// NewKeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest instantiates a new KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest() *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest {
	this := KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest{}
	return &this
}

// NewKeyfactorApiModelsCertificateStoresCertificateStoreApproveRequestWithDefaults instantiates a new KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorApiModelsCertificateStoresCertificateStoreApproveRequestWithDefaults() *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest {
	this := KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) SetId(v string) {
	o.Id = &v
}

// GetContainerId returns the ContainerId field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) GetContainerId() int32 {
	if o == nil || isNil(o.ContainerId) {
		var ret int32
		return ret
	}
	return *o.ContainerId
}

// GetContainerIdOk returns a tuple with the ContainerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) GetContainerIdOk() (*int32, bool) {
	if o == nil || isNil(o.ContainerId) {
		return nil, false
	}
	return o.ContainerId, true
}

// HasContainerId returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) HasContainerId() bool {
	if o != nil && !isNil(o.ContainerId) {
		return true
	}

	return false
}

// SetContainerId gets a reference to the given int32 and assigns it to the ContainerId field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) SetContainerId(v int32) {
	o.ContainerId = &v
}

// GetCertStoreType returns the CertStoreType field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) GetCertStoreType() int32 {
	if o == nil || isNil(o.CertStoreType) {
		var ret int32
		return ret
	}
	return *o.CertStoreType
}

// GetCertStoreTypeOk returns a tuple with the CertStoreType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) GetCertStoreTypeOk() (*int32, bool) {
	if o == nil || isNil(o.CertStoreType) {
		return nil, false
	}
	return o.CertStoreType, true
}

// HasCertStoreType returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) HasCertStoreType() bool {
	if o != nil && !isNil(o.CertStoreType) {
		return true
	}

	return false
}

// SetCertStoreType gets a reference to the given int32 and assigns it to the CertStoreType field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) SetCertStoreType(v int32) {
	o.CertStoreType = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) GetProperties() string {
	if o == nil || isNil(o.Properties) {
		var ret string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) GetPropertiesOk() (*string, bool) {
	if o == nil || isNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) HasProperties() bool {
	if o != nil && !isNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given string and assigns it to the Properties field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) SetProperties(v string) {
	o.Properties = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) GetPassword() ModelsKeyfactorAPISecret {
	if o == nil || isNil(o.Password) {
		var ret ModelsKeyfactorAPISecret
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) GetPasswordOk() (*ModelsKeyfactorAPISecret, bool) {
	if o == nil || isNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) HasPassword() bool {
	if o != nil && !isNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given ModelsKeyfactorAPISecret and assigns it to the Password field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) SetPassword(v ModelsKeyfactorAPISecret) {
	o.Password = &v
}

func (o KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !isNil(o.ContainerId) {
		toSerialize["ContainerId"] = o.ContainerId
	}
	if !isNil(o.CertStoreType) {
		toSerialize["CertStoreType"] = o.CertStoreType
	}
	if !isNil(o.Properties) {
		toSerialize["Properties"] = o.Properties
	}
	if !isNil(o.Password) {
		toSerialize["Password"] = o.Password
	}
	return toSerialize, nil
}

type NullableKeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest struct {
	value *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest
	isSet bool
}

func (v NullableKeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) Get() *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest {
	return v.value
}

func (v *NullableKeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) Set(val *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest(val *KeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) *NullableKeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest {
	return &NullableKeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest{value: val, isSet: true}
}

func (v NullableKeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorApiModelsCertificateStoresCertificateStoreApproveRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


