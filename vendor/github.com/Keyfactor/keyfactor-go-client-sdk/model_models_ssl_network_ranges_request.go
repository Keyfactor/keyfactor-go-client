/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsSSLNetworkRangesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsSSLNetworkRangesRequest{}

// ModelsSSLNetworkRangesRequest struct for ModelsSSLNetworkRangesRequest
type ModelsSSLNetworkRangesRequest struct {
	NetworkId string `json:"NetworkId"`
	Ranges []string `json:"Ranges"`
}

// NewModelsSSLNetworkRangesRequest instantiates a new ModelsSSLNetworkRangesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsSSLNetworkRangesRequest(networkId string, ranges []string) *ModelsSSLNetworkRangesRequest {
	this := ModelsSSLNetworkRangesRequest{}
	this.NetworkId = networkId
	this.Ranges = ranges
	return &this
}

// NewModelsSSLNetworkRangesRequestWithDefaults instantiates a new ModelsSSLNetworkRangesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsSSLNetworkRangesRequestWithDefaults() *ModelsSSLNetworkRangesRequest {
	this := ModelsSSLNetworkRangesRequest{}
	return &this
}

// GetNetworkId returns the NetworkId field value
func (o *ModelsSSLNetworkRangesRequest) GetNetworkId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value
// and a boolean to check if the value has been set.
func (o *ModelsSSLNetworkRangesRequest) GetNetworkIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkId, true
}

// SetNetworkId sets field value
func (o *ModelsSSLNetworkRangesRequest) SetNetworkId(v string) {
	o.NetworkId = v
}

// GetRanges returns the Ranges field value
func (o *ModelsSSLNetworkRangesRequest) GetRanges() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ranges
}

// GetRangesOk returns a tuple with the Ranges field value
// and a boolean to check if the value has been set.
func (o *ModelsSSLNetworkRangesRequest) GetRangesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ranges, true
}

// SetRanges sets field value
func (o *ModelsSSLNetworkRangesRequest) SetRanges(v []string) {
	o.Ranges = v
}

func (o ModelsSSLNetworkRangesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsSSLNetworkRangesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["NetworkId"] = o.NetworkId
	toSerialize["Ranges"] = o.Ranges
	return toSerialize, nil
}

type NullableModelsSSLNetworkRangesRequest struct {
	value *ModelsSSLNetworkRangesRequest
	isSet bool
}

func (v NullableModelsSSLNetworkRangesRequest) Get() *ModelsSSLNetworkRangesRequest {
	return v.value
}

func (v *NullableModelsSSLNetworkRangesRequest) Set(val *ModelsSSLNetworkRangesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsSSLNetworkRangesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsSSLNetworkRangesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsSSLNetworkRangesRequest(val *ModelsSSLNetworkRangesRequest) *NullableModelsSSLNetworkRangesRequest {
	return &NullableModelsSSLNetworkRangesRequest{value: val, isSet: true}
}

func (v NullableModelsSSLNetworkRangesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsSSLNetworkRangesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


