/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// AgentPoolApiService AgentPoolApi service
type AgentPoolApiService service

type ApiAgentPoolCreateAgentPoolRequest struct {
	ctx context.Context
	ApiService *AgentPoolApiService
	xKeyfactorRequestedWith *string
	agentPool *ModelsAgentsAgentPool
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentPoolCreateAgentPoolRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentPoolCreateAgentPoolRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Agent pool properties to be applied to the new pool
func (r ApiAgentPoolCreateAgentPoolRequest) AgentPool(agentPool ModelsAgentsAgentPool) ApiAgentPoolCreateAgentPoolRequest {
	r.agentPool = &agentPool
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentPoolCreateAgentPoolRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentPoolCreateAgentPoolRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiAgentPoolCreateAgentPoolRequest) Execute() (*ModelsAgentsAgentPool, *http.Response, error) {
	return r.ApiService.AgentPoolCreateAgentPoolExecute(r)
}

/*
AgentPoolCreateAgentPool Creates an agent pool with the provided properties

- DiscoverAgentsCount = An integer specifying the number of agents that can perform discovery jobs
- MonitorAgentsCount = An integer specifying the number of agents that can perform monitoring jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAgentPoolCreateAgentPoolRequest
*/
func (a *AgentPoolApiService) AgentPoolCreateAgentPool(ctx context.Context) ApiAgentPoolCreateAgentPoolRequest {
	return ApiAgentPoolCreateAgentPoolRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelsAgentsAgentPool
func (a *AgentPoolApiService) AgentPoolCreateAgentPoolExecute(r ApiAgentPoolCreateAgentPoolRequest) (*ModelsAgentsAgentPool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsAgentsAgentPool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentPoolApiService.AgentPoolCreateAgentPool")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AgentPools"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.agentPool == nil {
		return localVarReturnValue, nil, reportError("agentPool is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.agentPool
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentPoolDeleteAgentPoolRequest struct {
	ctx context.Context
	ApiService *AgentPoolApiService
	id string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentPoolDeleteAgentPoolRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentPoolDeleteAgentPoolRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentPoolDeleteAgentPoolRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentPoolDeleteAgentPoolRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiAgentPoolDeleteAgentPoolRequest) Execute() (*http.Response, error) {
	return r.ApiService.AgentPoolDeleteAgentPoolExecute(r)
}

/*
AgentPoolDeleteAgentPool Deletes the agent pool associated with the provided id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Keyfactor identifier (GUID) of the agent pool
 @return ApiAgentPoolDeleteAgentPoolRequest
*/
func (a *AgentPoolApiService) AgentPoolDeleteAgentPool(ctx context.Context, id string) ApiAgentPoolDeleteAgentPoolRequest {
	return ApiAgentPoolDeleteAgentPoolRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AgentPoolApiService) AgentPoolDeleteAgentPoolExecute(r ApiAgentPoolDeleteAgentPoolRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentPoolApiService.AgentPoolDeleteAgentPool")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AgentPools/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAgentPoolGetAgentPoolByIdRequest struct {
	ctx context.Context
	ApiService *AgentPoolApiService
	id string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentPoolGetAgentPoolByIdRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentPoolGetAgentPoolByIdRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentPoolGetAgentPoolByIdRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentPoolGetAgentPoolByIdRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiAgentPoolGetAgentPoolByIdRequest) Execute() (*ModelsAgentsAgentPool, *http.Response, error) {
	return r.ApiService.AgentPoolGetAgentPoolByIdExecute(r)
}

/*
AgentPoolGetAgentPoolById Returns a single agent pool associated with the provided id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Keyfactor (GUID) identifier of the agent pool
 @return ApiAgentPoolGetAgentPoolByIdRequest
*/
func (a *AgentPoolApiService) AgentPoolGetAgentPoolById(ctx context.Context, id string) ApiAgentPoolGetAgentPoolByIdRequest {
	return ApiAgentPoolGetAgentPoolByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ModelsAgentsAgentPool
func (a *AgentPoolApiService) AgentPoolGetAgentPoolByIdExecute(r ApiAgentPoolGetAgentPoolByIdRequest) (*ModelsAgentsAgentPool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsAgentsAgentPool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentPoolApiService.AgentPoolGetAgentPoolById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AgentPools/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentPoolGetAgentPoolsRequest struct {
	ctx context.Context
	ApiService *AgentPoolApiService
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
	pqQueryString *string
	pqPageReturned *int32
	pqReturnLimit *int32
	pqSortField *string
	pqSortAscending *int32
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentPoolGetAgentPoolsRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentPoolGetAgentPoolsRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentPoolGetAgentPoolsRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentPoolGetAgentPoolsRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)
func (r ApiAgentPoolGetAgentPoolsRequest) PqQueryString(pqQueryString string) ApiAgentPoolGetAgentPoolsRequest {
	r.pqQueryString = &pqQueryString
	return r
}

// The current page within the result set to be returned
func (r ApiAgentPoolGetAgentPoolsRequest) PqPageReturned(pqPageReturned int32) ApiAgentPoolGetAgentPoolsRequest {
	r.pqPageReturned = &pqPageReturned
	return r
}

// Maximum number of records to be returned in a single call
func (r ApiAgentPoolGetAgentPoolsRequest) PqReturnLimit(pqReturnLimit int32) ApiAgentPoolGetAgentPoolsRequest {
	r.pqReturnLimit = &pqReturnLimit
	return r
}

// Field by which the results should be sorted (view results via Management Portal for sortable columns)
func (r ApiAgentPoolGetAgentPoolsRequest) PqSortField(pqSortField string) ApiAgentPoolGetAgentPoolsRequest {
	r.pqSortField = &pqSortField
	return r
}

// Field sort direction [0&#x3D;ascending, 1&#x3D;descending]
func (r ApiAgentPoolGetAgentPoolsRequest) PqSortAscending(pqSortAscending int32) ApiAgentPoolGetAgentPoolsRequest {
	r.pqSortAscending = &pqSortAscending
	return r
}

func (r ApiAgentPoolGetAgentPoolsRequest) Execute() ([]ModelsAgentsAgentPool, *http.Response, error) {
	return r.ApiService.AgentPoolGetAgentPoolsExecute(r)
}

/*
AgentPoolGetAgentPools Returns all agent pools according to the provided filter and output parameters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAgentPoolGetAgentPoolsRequest
*/
func (a *AgentPoolApiService) AgentPoolGetAgentPools(ctx context.Context) ApiAgentPoolGetAgentPoolsRequest {
	return ApiAgentPoolGetAgentPoolsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ModelsAgentsAgentPool
func (a *AgentPoolApiService) AgentPoolGetAgentPoolsExecute(r ApiAgentPoolGetAgentPoolsRequest) ([]ModelsAgentsAgentPool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelsAgentsAgentPool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentPoolApiService.AgentPoolGetAgentPools")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AgentPools"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.pqQueryString != nil {
		parameterAddToQuery(localVarQueryParams, "pq.queryString", r.pqQueryString, "")
	}
	if r.pqPageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "pq.pageReturned", r.pqPageReturned, "")
	}
	if r.pqReturnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "pq.returnLimit", r.pqReturnLimit, "")
	}
	if r.pqSortField != nil {
		parameterAddToQuery(localVarQueryParams, "pq.sortField", r.pqSortField, "")
	}
	if r.pqSortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "pq.sortAscending", r.pqSortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentPoolGetDefaultAgentPoolAgentsRequest struct {
	ctx context.Context
	ApiService *AgentPoolApiService
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
	pqQueryString *string
	pqPageReturned *int32
	pqReturnLimit *int32
	pqSortField *string
	pqSortAscending *int32
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentPoolGetDefaultAgentPoolAgentsRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentPoolGetDefaultAgentPoolAgentsRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentPoolGetDefaultAgentPoolAgentsRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentPoolGetDefaultAgentPoolAgentsRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)
func (r ApiAgentPoolGetDefaultAgentPoolAgentsRequest) PqQueryString(pqQueryString string) ApiAgentPoolGetDefaultAgentPoolAgentsRequest {
	r.pqQueryString = &pqQueryString
	return r
}

// The current page within the result set to be returned
func (r ApiAgentPoolGetDefaultAgentPoolAgentsRequest) PqPageReturned(pqPageReturned int32) ApiAgentPoolGetDefaultAgentPoolAgentsRequest {
	r.pqPageReturned = &pqPageReturned
	return r
}

// Maximum number of records to be returned in a single call
func (r ApiAgentPoolGetDefaultAgentPoolAgentsRequest) PqReturnLimit(pqReturnLimit int32) ApiAgentPoolGetDefaultAgentPoolAgentsRequest {
	r.pqReturnLimit = &pqReturnLimit
	return r
}

// Field by which the results should be sorted (view results via Management Portal for sortable columns)
func (r ApiAgentPoolGetDefaultAgentPoolAgentsRequest) PqSortField(pqSortField string) ApiAgentPoolGetDefaultAgentPoolAgentsRequest {
	r.pqSortField = &pqSortField
	return r
}

// Field sort direction [0&#x3D;ascending, 1&#x3D;descending]
func (r ApiAgentPoolGetDefaultAgentPoolAgentsRequest) PqSortAscending(pqSortAscending int32) ApiAgentPoolGetDefaultAgentPoolAgentsRequest {
	r.pqSortAscending = &pqSortAscending
	return r
}

func (r ApiAgentPoolGetDefaultAgentPoolAgentsRequest) Execute() ([]ModelsAgentsAgentPoolAgent, *http.Response, error) {
	return r.ApiService.AgentPoolGetDefaultAgentPoolAgentsExecute(r)
}

/*
AgentPoolGetDefaultAgentPoolAgents Returns all agents for the default agent pool

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAgentPoolGetDefaultAgentPoolAgentsRequest
*/
func (a *AgentPoolApiService) AgentPoolGetDefaultAgentPoolAgents(ctx context.Context) ApiAgentPoolGetDefaultAgentPoolAgentsRequest {
	return ApiAgentPoolGetDefaultAgentPoolAgentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ModelsAgentsAgentPoolAgent
func (a *AgentPoolApiService) AgentPoolGetDefaultAgentPoolAgentsExecute(r ApiAgentPoolGetDefaultAgentPoolAgentsRequest) ([]ModelsAgentsAgentPoolAgent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelsAgentsAgentPoolAgent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentPoolApiService.AgentPoolGetDefaultAgentPoolAgents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AgentPools/Agents"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.pqQueryString != nil {
		parameterAddToQuery(localVarQueryParams, "pq.queryString", r.pqQueryString, "")
	}
	if r.pqPageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "pq.pageReturned", r.pqPageReturned, "")
	}
	if r.pqReturnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "pq.returnLimit", r.pqReturnLimit, "")
	}
	if r.pqSortField != nil {
		parameterAddToQuery(localVarQueryParams, "pq.sortField", r.pqSortField, "")
	}
	if r.pqSortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "pq.sortAscending", r.pqSortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentPoolUpdateAgentPoolRequest struct {
	ctx context.Context
	ApiService *AgentPoolApiService
	xKeyfactorRequestedWith *string
	agentPool *ModelsAgentsAgentPool
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentPoolUpdateAgentPoolRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentPoolUpdateAgentPoolRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Agent pool properties to be applied to the existing pool
func (r ApiAgentPoolUpdateAgentPoolRequest) AgentPool(agentPool ModelsAgentsAgentPool) ApiAgentPoolUpdateAgentPoolRequest {
	r.agentPool = &agentPool
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentPoolUpdateAgentPoolRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentPoolUpdateAgentPoolRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiAgentPoolUpdateAgentPoolRequest) Execute() (*ModelsAgentsAgentPool, *http.Response, error) {
	return r.ApiService.AgentPoolUpdateAgentPoolExecute(r)
}

/*
AgentPoolUpdateAgentPool Updates an existing agent pool with the provided properties

- DiscoverAgentsCount = An integer specifying the number of agents that can perform discovery jobs
- MonitorAgentsCount = An integer specifying the number of agents that can perform monitoring jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAgentPoolUpdateAgentPoolRequest
*/
func (a *AgentPoolApiService) AgentPoolUpdateAgentPool(ctx context.Context) ApiAgentPoolUpdateAgentPoolRequest {
	return ApiAgentPoolUpdateAgentPoolRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelsAgentsAgentPool
func (a *AgentPoolApiService) AgentPoolUpdateAgentPoolExecute(r ApiAgentPoolUpdateAgentPoolRequest) (*ModelsAgentsAgentPool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsAgentsAgentPool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentPoolApiService.AgentPoolUpdateAgentPool")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AgentPools"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.agentPool == nil {
		return localVarReturnValue, nil, reportError("agentPool is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.agentPool
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
