/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
	"time"
)

// checks if the KeyfactorAuditingQueryingAuditLogEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorAuditingQueryingAuditLogEntry{}

// KeyfactorAuditingQueryingAuditLogEntry struct for KeyfactorAuditingQueryingAuditLogEntry
type KeyfactorAuditingQueryingAuditLogEntry struct {
	Id *int32 `json:"Id,omitempty"`
	Timestamp *time.Time `json:"Timestamp,omitempty"`
	Message *string `json:"Message,omitempty"`
	Signature *string `json:"Signature,omitempty"`
	Category *int32 `json:"Category,omitempty"`
	Operation *int32 `json:"Operation,omitempty"`
	Level *int32 `json:"Level,omitempty"`
	User *string `json:"User,omitempty"`
	EntityType *string `json:"EntityType,omitempty"`
	AuditIdentifier *string `json:"AuditIdentifier,omitempty"`
	ImmutableIdentifier *string `json:"ImmutableIdentifier,omitempty"`
}

// NewKeyfactorAuditingQueryingAuditLogEntry instantiates a new KeyfactorAuditingQueryingAuditLogEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorAuditingQueryingAuditLogEntry() *KeyfactorAuditingQueryingAuditLogEntry {
	this := KeyfactorAuditingQueryingAuditLogEntry{}
	return &this
}

// NewKeyfactorAuditingQueryingAuditLogEntryWithDefaults instantiates a new KeyfactorAuditingQueryingAuditLogEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorAuditingQueryingAuditLogEntryWithDefaults() *KeyfactorAuditingQueryingAuditLogEntry {
	this := KeyfactorAuditingQueryingAuditLogEntry{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetId(v int32) {
	o.Id = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetTimestamp() time.Time {
	if o == nil || isNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetTimestampOk() (*time.Time, bool) {
	if o == nil || isNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasTimestamp() bool {
	if o != nil && !isNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetMessage() string {
	if o == nil || isNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetMessageOk() (*string, bool) {
	if o == nil || isNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasMessage() bool {
	if o != nil && !isNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetMessage(v string) {
	o.Message = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetSignature() string {
	if o == nil || isNil(o.Signature) {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetSignatureOk() (*string, bool) {
	if o == nil || isNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasSignature() bool {
	if o != nil && !isNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetSignature(v string) {
	o.Signature = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetCategory() int32 {
	if o == nil || isNil(o.Category) {
		var ret int32
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetCategoryOk() (*int32, bool) {
	if o == nil || isNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasCategory() bool {
	if o != nil && !isNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given int32 and assigns it to the Category field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetCategory(v int32) {
	o.Category = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetOperation() int32 {
	if o == nil || isNil(o.Operation) {
		var ret int32
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetOperationOk() (*int32, bool) {
	if o == nil || isNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasOperation() bool {
	if o != nil && !isNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given int32 and assigns it to the Operation field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetOperation(v int32) {
	o.Operation = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetLevel() int32 {
	if o == nil || isNil(o.Level) {
		var ret int32
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetLevelOk() (*int32, bool) {
	if o == nil || isNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasLevel() bool {
	if o != nil && !isNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given int32 and assigns it to the Level field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetLevel(v int32) {
	o.Level = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetUser() string {
	if o == nil || isNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetUserOk() (*string, bool) {
	if o == nil || isNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasUser() bool {
	if o != nil && !isNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetUser(v string) {
	o.User = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetEntityType() string {
	if o == nil || isNil(o.EntityType) {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetEntityTypeOk() (*string, bool) {
	if o == nil || isNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasEntityType() bool {
	if o != nil && !isNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetEntityType(v string) {
	o.EntityType = &v
}

// GetAuditIdentifier returns the AuditIdentifier field value if set, zero value otherwise.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetAuditIdentifier() string {
	if o == nil || isNil(o.AuditIdentifier) {
		var ret string
		return ret
	}
	return *o.AuditIdentifier
}

// GetAuditIdentifierOk returns a tuple with the AuditIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetAuditIdentifierOk() (*string, bool) {
	if o == nil || isNil(o.AuditIdentifier) {
		return nil, false
	}
	return o.AuditIdentifier, true
}

// HasAuditIdentifier returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasAuditIdentifier() bool {
	if o != nil && !isNil(o.AuditIdentifier) {
		return true
	}

	return false
}

// SetAuditIdentifier gets a reference to the given string and assigns it to the AuditIdentifier field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetAuditIdentifier(v string) {
	o.AuditIdentifier = &v
}

// GetImmutableIdentifier returns the ImmutableIdentifier field value if set, zero value otherwise.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetImmutableIdentifier() string {
	if o == nil || isNil(o.ImmutableIdentifier) {
		var ret string
		return ret
	}
	return *o.ImmutableIdentifier
}

// GetImmutableIdentifierOk returns a tuple with the ImmutableIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetImmutableIdentifierOk() (*string, bool) {
	if o == nil || isNil(o.ImmutableIdentifier) {
		return nil, false
	}
	return o.ImmutableIdentifier, true
}

// HasImmutableIdentifier returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasImmutableIdentifier() bool {
	if o != nil && !isNil(o.ImmutableIdentifier) {
		return true
	}

	return false
}

// SetImmutableIdentifier gets a reference to the given string and assigns it to the ImmutableIdentifier field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetImmutableIdentifier(v string) {
	o.ImmutableIdentifier = &v
}

func (o KeyfactorAuditingQueryingAuditLogEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorAuditingQueryingAuditLogEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !isNil(o.Timestamp) {
		toSerialize["Timestamp"] = o.Timestamp
	}
	if !isNil(o.Message) {
		toSerialize["Message"] = o.Message
	}
	if !isNil(o.Signature) {
		toSerialize["Signature"] = o.Signature
	}
	if !isNil(o.Category) {
		toSerialize["Category"] = o.Category
	}
	if !isNil(o.Operation) {
		toSerialize["Operation"] = o.Operation
	}
	if !isNil(o.Level) {
		toSerialize["Level"] = o.Level
	}
	if !isNil(o.User) {
		toSerialize["User"] = o.User
	}
	if !isNil(o.EntityType) {
		toSerialize["EntityType"] = o.EntityType
	}
	if !isNil(o.AuditIdentifier) {
		toSerialize["AuditIdentifier"] = o.AuditIdentifier
	}
	if !isNil(o.ImmutableIdentifier) {
		toSerialize["ImmutableIdentifier"] = o.ImmutableIdentifier
	}
	return toSerialize, nil
}

type NullableKeyfactorAuditingQueryingAuditLogEntry struct {
	value *KeyfactorAuditingQueryingAuditLogEntry
	isSet bool
}

func (v NullableKeyfactorAuditingQueryingAuditLogEntry) Get() *KeyfactorAuditingQueryingAuditLogEntry {
	return v.value
}

func (v *NullableKeyfactorAuditingQueryingAuditLogEntry) Set(val *KeyfactorAuditingQueryingAuditLogEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorAuditingQueryingAuditLogEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorAuditingQueryingAuditLogEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorAuditingQueryingAuditLogEntry(val *KeyfactorAuditingQueryingAuditLogEntry) *NullableKeyfactorAuditingQueryingAuditLogEntry {
	return &NullableKeyfactorAuditingQueryingAuditLogEntry{value: val, isSet: true}
}

func (v NullableKeyfactorAuditingQueryingAuditLogEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorAuditingQueryingAuditLogEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


