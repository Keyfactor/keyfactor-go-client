/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
	"time"
)

// checks if the KeyfactorApiModelsLicenseLicenseResponseLicense type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorApiModelsLicenseLicenseResponseLicense{}

// KeyfactorApiModelsLicenseLicenseResponseLicense struct for KeyfactorApiModelsLicenseLicenseResponseLicense
type KeyfactorApiModelsLicenseLicenseResponseLicense struct {
	LicenseId *string `json:"LicenseId,omitempty"`
	Customer *KeyfactorApiModelsLicenseLicenseResponseLicensedCustomer `json:"Customer,omitempty"`
	IssuedDate *time.Time `json:"IssuedDate,omitempty"`
	ExpirationDate *time.Time `json:"ExpirationDate,omitempty"`
	LicensedProducts []KeyfactorApiModelsLicenseLicenseResponseLicensedProduct `json:"LicensedProducts,omitempty"`
}

// NewKeyfactorApiModelsLicenseLicenseResponseLicense instantiates a new KeyfactorApiModelsLicenseLicenseResponseLicense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorApiModelsLicenseLicenseResponseLicense() *KeyfactorApiModelsLicenseLicenseResponseLicense {
	this := KeyfactorApiModelsLicenseLicenseResponseLicense{}
	return &this
}

// NewKeyfactorApiModelsLicenseLicenseResponseLicenseWithDefaults instantiates a new KeyfactorApiModelsLicenseLicenseResponseLicense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorApiModelsLicenseLicenseResponseLicenseWithDefaults() *KeyfactorApiModelsLicenseLicenseResponseLicense {
	this := KeyfactorApiModelsLicenseLicenseResponseLicense{}
	return &this
}

// GetLicenseId returns the LicenseId field value if set, zero value otherwise.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) GetLicenseId() string {
	if o == nil || isNil(o.LicenseId) {
		var ret string
		return ret
	}
	return *o.LicenseId
}

// GetLicenseIdOk returns a tuple with the LicenseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) GetLicenseIdOk() (*string, bool) {
	if o == nil || isNil(o.LicenseId) {
		return nil, false
	}
	return o.LicenseId, true
}

// HasLicenseId returns a boolean if a field has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) HasLicenseId() bool {
	if o != nil && !isNil(o.LicenseId) {
		return true
	}

	return false
}

// SetLicenseId gets a reference to the given string and assigns it to the LicenseId field.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) SetLicenseId(v string) {
	o.LicenseId = &v
}

// GetCustomer returns the Customer field value if set, zero value otherwise.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) GetCustomer() KeyfactorApiModelsLicenseLicenseResponseLicensedCustomer {
	if o == nil || isNil(o.Customer) {
		var ret KeyfactorApiModelsLicenseLicenseResponseLicensedCustomer
		return ret
	}
	return *o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) GetCustomerOk() (*KeyfactorApiModelsLicenseLicenseResponseLicensedCustomer, bool) {
	if o == nil || isNil(o.Customer) {
		return nil, false
	}
	return o.Customer, true
}

// HasCustomer returns a boolean if a field has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) HasCustomer() bool {
	if o != nil && !isNil(o.Customer) {
		return true
	}

	return false
}

// SetCustomer gets a reference to the given KeyfactorApiModelsLicenseLicenseResponseLicensedCustomer and assigns it to the Customer field.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) SetCustomer(v KeyfactorApiModelsLicenseLicenseResponseLicensedCustomer) {
	o.Customer = &v
}

// GetIssuedDate returns the IssuedDate field value if set, zero value otherwise.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) GetIssuedDate() time.Time {
	if o == nil || isNil(o.IssuedDate) {
		var ret time.Time
		return ret
	}
	return *o.IssuedDate
}

// GetIssuedDateOk returns a tuple with the IssuedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) GetIssuedDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.IssuedDate) {
		return nil, false
	}
	return o.IssuedDate, true
}

// HasIssuedDate returns a boolean if a field has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) HasIssuedDate() bool {
	if o != nil && !isNil(o.IssuedDate) {
		return true
	}

	return false
}

// SetIssuedDate gets a reference to the given time.Time and assigns it to the IssuedDate field.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) SetIssuedDate(v time.Time) {
	o.IssuedDate = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) GetExpirationDate() time.Time {
	if o == nil || isNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) HasExpirationDate() bool {
	if o != nil && !isNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetLicensedProducts returns the LicensedProducts field value if set, zero value otherwise.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) GetLicensedProducts() []KeyfactorApiModelsLicenseLicenseResponseLicensedProduct {
	if o == nil || isNil(o.LicensedProducts) {
		var ret []KeyfactorApiModelsLicenseLicenseResponseLicensedProduct
		return ret
	}
	return o.LicensedProducts
}

// GetLicensedProductsOk returns a tuple with the LicensedProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) GetLicensedProductsOk() ([]KeyfactorApiModelsLicenseLicenseResponseLicensedProduct, bool) {
	if o == nil || isNil(o.LicensedProducts) {
		return nil, false
	}
	return o.LicensedProducts, true
}

// HasLicensedProducts returns a boolean if a field has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) HasLicensedProducts() bool {
	if o != nil && !isNil(o.LicensedProducts) {
		return true
	}

	return false
}

// SetLicensedProducts gets a reference to the given []KeyfactorApiModelsLicenseLicenseResponseLicensedProduct and assigns it to the LicensedProducts field.
func (o *KeyfactorApiModelsLicenseLicenseResponseLicense) SetLicensedProducts(v []KeyfactorApiModelsLicenseLicenseResponseLicensedProduct) {
	o.LicensedProducts = v
}

func (o KeyfactorApiModelsLicenseLicenseResponseLicense) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorApiModelsLicenseLicenseResponseLicense) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.LicenseId) {
		toSerialize["LicenseId"] = o.LicenseId
	}
	if !isNil(o.Customer) {
		toSerialize["Customer"] = o.Customer
	}
	if !isNil(o.IssuedDate) {
		toSerialize["IssuedDate"] = o.IssuedDate
	}
	if !isNil(o.ExpirationDate) {
		toSerialize["ExpirationDate"] = o.ExpirationDate
	}
	if !isNil(o.LicensedProducts) {
		toSerialize["LicensedProducts"] = o.LicensedProducts
	}
	return toSerialize, nil
}

type NullableKeyfactorApiModelsLicenseLicenseResponseLicense struct {
	value *KeyfactorApiModelsLicenseLicenseResponseLicense
	isSet bool
}

func (v NullableKeyfactorApiModelsLicenseLicenseResponseLicense) Get() *KeyfactorApiModelsLicenseLicenseResponseLicense {
	return v.value
}

func (v *NullableKeyfactorApiModelsLicenseLicenseResponseLicense) Set(val *KeyfactorApiModelsLicenseLicenseResponseLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorApiModelsLicenseLicenseResponseLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorApiModelsLicenseLicenseResponseLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorApiModelsLicenseLicenseResponseLicense(val *KeyfactorApiModelsLicenseLicenseResponseLicense) *NullableKeyfactorApiModelsLicenseLicenseResponseLicense {
	return &NullableKeyfactorApiModelsLicenseLicenseResponseLicense{value: val, isSet: true}
}

func (v NullableKeyfactorApiModelsLicenseLicenseResponseLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorApiModelsLicenseLicenseResponseLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


