/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsCertStoreNewPasswordRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCertStoreNewPasswordRequest{}

// ModelsCertStoreNewPasswordRequest NewPassword must be provided and be of type string or KeyfactorAPISecret.
type ModelsCertStoreNewPasswordRequest struct {
	CertStoreId string `json:"CertStoreId"`
	NewPassword map[string]interface{} `json:"NewPassword"`
}

// NewModelsCertStoreNewPasswordRequest instantiates a new ModelsCertStoreNewPasswordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCertStoreNewPasswordRequest(certStoreId string, newPassword map[string]interface{}) *ModelsCertStoreNewPasswordRequest {
	this := ModelsCertStoreNewPasswordRequest{}
	this.CertStoreId = certStoreId
	this.NewPassword = newPassword
	return &this
}

// NewModelsCertStoreNewPasswordRequestWithDefaults instantiates a new ModelsCertStoreNewPasswordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCertStoreNewPasswordRequestWithDefaults() *ModelsCertStoreNewPasswordRequest {
	this := ModelsCertStoreNewPasswordRequest{}
	return &this
}

// GetCertStoreId returns the CertStoreId field value
func (o *ModelsCertStoreNewPasswordRequest) GetCertStoreId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertStoreId
}

// GetCertStoreIdOk returns a tuple with the CertStoreId field value
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreNewPasswordRequest) GetCertStoreIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertStoreId, true
}

// SetCertStoreId sets field value
func (o *ModelsCertStoreNewPasswordRequest) SetCertStoreId(v string) {
	o.CertStoreId = v
}

// GetNewPassword returns the NewPassword field value
func (o *ModelsCertStoreNewPasswordRequest) GetNewPassword() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreNewPasswordRequest) GetNewPasswordOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.NewPassword, true
}

// SetNewPassword sets field value
func (o *ModelsCertStoreNewPasswordRequest) SetNewPassword(v map[string]interface{}) {
	o.NewPassword = v
}

func (o ModelsCertStoreNewPasswordRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCertStoreNewPasswordRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["CertStoreId"] = o.CertStoreId
	toSerialize["NewPassword"] = o.NewPassword
	return toSerialize, nil
}

type NullableModelsCertStoreNewPasswordRequest struct {
	value *ModelsCertStoreNewPasswordRequest
	isSet bool
}

func (v NullableModelsCertStoreNewPasswordRequest) Get() *ModelsCertStoreNewPasswordRequest {
	return v.value
}

func (v *NullableModelsCertStoreNewPasswordRequest) Set(val *ModelsCertStoreNewPasswordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCertStoreNewPasswordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCertStoreNewPasswordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCertStoreNewPasswordRequest(val *ModelsCertStoreNewPasswordRequest) *NullableModelsCertStoreNewPasswordRequest {
	return &NullableModelsCertStoreNewPasswordRequest{value: val, isSet: true}
}

func (v NullableModelsCertStoreNewPasswordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCertStoreNewPasswordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


