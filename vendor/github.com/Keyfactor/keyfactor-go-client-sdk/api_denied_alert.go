/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// DeniedAlertApiService DeniedAlertApi service
type DeniedAlertApiService service

type ApiDeniedAlertAddDeniedAlertRequest struct {
	ctx context.Context
	ApiService *DeniedAlertApiService
	xKeyfactorRequestedWith *string
	req *KeyfactorApiModelsAlertsDeniedDeniedAlertCreationRequest
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiDeniedAlertAddDeniedAlertRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiDeniedAlertAddDeniedAlertRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Information for the new alert
func (r ApiDeniedAlertAddDeniedAlertRequest) Req(req KeyfactorApiModelsAlertsDeniedDeniedAlertCreationRequest) ApiDeniedAlertAddDeniedAlertRequest {
	r.req = &req
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiDeniedAlertAddDeniedAlertRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiDeniedAlertAddDeniedAlertRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiDeniedAlertAddDeniedAlertRequest) Execute() (*KeyfactorApiModelsAlertsDeniedDeniedAlertDefinitionResponse, *http.Response, error) {
	return r.ApiService.DeniedAlertAddDeniedAlertExecute(r)
}

/*
DeniedAlertAddDeniedAlert Add a denied alert

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeniedAlertAddDeniedAlertRequest
*/
func (a *DeniedAlertApiService) DeniedAlertAddDeniedAlert(ctx context.Context) ApiDeniedAlertAddDeniedAlertRequest {
	return ApiDeniedAlertAddDeniedAlertRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KeyfactorApiModelsAlertsDeniedDeniedAlertDefinitionResponse
func (a *DeniedAlertApiService) DeniedAlertAddDeniedAlertExecute(r ApiDeniedAlertAddDeniedAlertRequest) (*KeyfactorApiModelsAlertsDeniedDeniedAlertDefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KeyfactorApiModelsAlertsDeniedDeniedAlertDefinitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeniedAlertApiService.DeniedAlertAddDeniedAlert")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Alerts/Denied"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.req == nil {
		return localVarReturnValue, nil, reportError("req is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.req
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeniedAlertDeleteDeniedAlertRequest struct {
	ctx context.Context
	ApiService *DeniedAlertApiService
	id int32
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiDeniedAlertDeleteDeniedAlertRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiDeniedAlertDeleteDeniedAlertRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiDeniedAlertDeleteDeniedAlertRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiDeniedAlertDeleteDeniedAlertRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiDeniedAlertDeleteDeniedAlertRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeniedAlertDeleteDeniedAlertExecute(r)
}

/*
DeniedAlertDeleteDeniedAlert Delete a denied alert

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Id for the denied alert
 @return ApiDeniedAlertDeleteDeniedAlertRequest
*/
func (a *DeniedAlertApiService) DeniedAlertDeleteDeniedAlert(ctx context.Context, id int32) ApiDeniedAlertDeleteDeniedAlertRequest {
	return ApiDeniedAlertDeleteDeniedAlertRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DeniedAlertApiService) DeniedAlertDeleteDeniedAlertExecute(r ApiDeniedAlertDeleteDeniedAlertRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeniedAlertApiService.DeniedAlertDeleteDeniedAlert")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Alerts/Denied/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeniedAlertEditDeniedAlertRequest struct {
	ctx context.Context
	ApiService *DeniedAlertApiService
	xKeyfactorRequestedWith *string
	req *KeyfactorApiModelsAlertsDeniedDeniedAlertUpdateRequest
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiDeniedAlertEditDeniedAlertRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiDeniedAlertEditDeniedAlertRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Information for the denied alert
func (r ApiDeniedAlertEditDeniedAlertRequest) Req(req KeyfactorApiModelsAlertsDeniedDeniedAlertUpdateRequest) ApiDeniedAlertEditDeniedAlertRequest {
	r.req = &req
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiDeniedAlertEditDeniedAlertRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiDeniedAlertEditDeniedAlertRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiDeniedAlertEditDeniedAlertRequest) Execute() (*KeyfactorApiModelsAlertsDeniedDeniedAlertDefinitionResponse, *http.Response, error) {
	return r.ApiService.DeniedAlertEditDeniedAlertExecute(r)
}

/*
DeniedAlertEditDeniedAlert Edit a denied alert

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeniedAlertEditDeniedAlertRequest
*/
func (a *DeniedAlertApiService) DeniedAlertEditDeniedAlert(ctx context.Context) ApiDeniedAlertEditDeniedAlertRequest {
	return ApiDeniedAlertEditDeniedAlertRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KeyfactorApiModelsAlertsDeniedDeniedAlertDefinitionResponse
func (a *DeniedAlertApiService) DeniedAlertEditDeniedAlertExecute(r ApiDeniedAlertEditDeniedAlertRequest) (*KeyfactorApiModelsAlertsDeniedDeniedAlertDefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KeyfactorApiModelsAlertsDeniedDeniedAlertDefinitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeniedAlertApiService.DeniedAlertEditDeniedAlert")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Alerts/Denied"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.req == nil {
		return localVarReturnValue, nil, reportError("req is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.req
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeniedAlertGetDeniedAlertRequest struct {
	ctx context.Context
	ApiService *DeniedAlertApiService
	id int32
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiDeniedAlertGetDeniedAlertRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiDeniedAlertGetDeniedAlertRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiDeniedAlertGetDeniedAlertRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiDeniedAlertGetDeniedAlertRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiDeniedAlertGetDeniedAlertRequest) Execute() (*KeyfactorApiModelsAlertsDeniedDeniedAlertDefinitionResponse, *http.Response, error) {
	return r.ApiService.DeniedAlertGetDeniedAlertExecute(r)
}

/*
DeniedAlertGetDeniedAlert Get a denied alert

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Id for the denied alert to get
 @return ApiDeniedAlertGetDeniedAlertRequest
*/
func (a *DeniedAlertApiService) DeniedAlertGetDeniedAlert(ctx context.Context, id int32) ApiDeniedAlertGetDeniedAlertRequest {
	return ApiDeniedAlertGetDeniedAlertRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KeyfactorApiModelsAlertsDeniedDeniedAlertDefinitionResponse
func (a *DeniedAlertApiService) DeniedAlertGetDeniedAlertExecute(r ApiDeniedAlertGetDeniedAlertRequest) (*KeyfactorApiModelsAlertsDeniedDeniedAlertDefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KeyfactorApiModelsAlertsDeniedDeniedAlertDefinitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeniedAlertApiService.DeniedAlertGetDeniedAlert")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Alerts/Denied/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeniedAlertGetDeniedAlertsRequest struct {
	ctx context.Context
	ApiService *DeniedAlertApiService
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
	pagedQueryQueryString *string
	pagedQueryPageReturned *int32
	pagedQueryReturnLimit *int32
	pagedQuerySortField *string
	pagedQuerySortAscending *int32
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiDeniedAlertGetDeniedAlertsRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiDeniedAlertGetDeniedAlertsRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiDeniedAlertGetDeniedAlertsRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiDeniedAlertGetDeniedAlertsRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)
func (r ApiDeniedAlertGetDeniedAlertsRequest) PagedQueryQueryString(pagedQueryQueryString string) ApiDeniedAlertGetDeniedAlertsRequest {
	r.pagedQueryQueryString = &pagedQueryQueryString
	return r
}

// The current page within the result set to be returned
func (r ApiDeniedAlertGetDeniedAlertsRequest) PagedQueryPageReturned(pagedQueryPageReturned int32) ApiDeniedAlertGetDeniedAlertsRequest {
	r.pagedQueryPageReturned = &pagedQueryPageReturned
	return r
}

// Maximum number of records to be returned in a single call
func (r ApiDeniedAlertGetDeniedAlertsRequest) PagedQueryReturnLimit(pagedQueryReturnLimit int32) ApiDeniedAlertGetDeniedAlertsRequest {
	r.pagedQueryReturnLimit = &pagedQueryReturnLimit
	return r
}

// Field by which the results should be sorted (view results via Management Portal for sortable columns)
func (r ApiDeniedAlertGetDeniedAlertsRequest) PagedQuerySortField(pagedQuerySortField string) ApiDeniedAlertGetDeniedAlertsRequest {
	r.pagedQuerySortField = &pagedQuerySortField
	return r
}

// Field sort direction [0&#x3D;ascending, 1&#x3D;descending]
func (r ApiDeniedAlertGetDeniedAlertsRequest) PagedQuerySortAscending(pagedQuerySortAscending int32) ApiDeniedAlertGetDeniedAlertsRequest {
	r.pagedQuerySortAscending = &pagedQuerySortAscending
	return r
}

func (r ApiDeniedAlertGetDeniedAlertsRequest) Execute() ([]KeyfactorApiModelsAlertsDeniedDeniedAlertDefinitionResponse, *http.Response, error) {
	return r.ApiService.DeniedAlertGetDeniedAlertsExecute(r)
}

/*
DeniedAlertGetDeniedAlerts Gets all denied alerts according to the provided filter and output parameters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeniedAlertGetDeniedAlertsRequest
*/
func (a *DeniedAlertApiService) DeniedAlertGetDeniedAlerts(ctx context.Context) ApiDeniedAlertGetDeniedAlertsRequest {
	return ApiDeniedAlertGetDeniedAlertsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KeyfactorApiModelsAlertsDeniedDeniedAlertDefinitionResponse
func (a *DeniedAlertApiService) DeniedAlertGetDeniedAlertsExecute(r ApiDeniedAlertGetDeniedAlertsRequest) ([]KeyfactorApiModelsAlertsDeniedDeniedAlertDefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KeyfactorApiModelsAlertsDeniedDeniedAlertDefinitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeniedAlertApiService.DeniedAlertGetDeniedAlerts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Alerts/Denied"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.pagedQueryQueryString != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.queryString", r.pagedQueryQueryString, "")
	}
	if r.pagedQueryPageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.pageReturned", r.pagedQueryPageReturned, "")
	}
	if r.pagedQueryReturnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.returnLimit", r.pagedQueryReturnLimit, "")
	}
	if r.pagedQuerySortField != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.sortField", r.pagedQuerySortField, "")
	}
	if r.pagedQuerySortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "pagedQuery.sortAscending", r.pagedQuerySortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
