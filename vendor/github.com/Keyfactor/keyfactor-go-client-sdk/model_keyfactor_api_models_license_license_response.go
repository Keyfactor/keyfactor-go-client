/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the KeyfactorApiModelsLicenseLicenseResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorApiModelsLicenseLicenseResponse{}

// KeyfactorApiModelsLicenseLicenseResponse struct for KeyfactorApiModelsLicenseLicenseResponse
type KeyfactorApiModelsLicenseLicenseResponse struct {
	KeyfactorVersion *string `json:"KeyfactorVersion,omitempty"`
	LicenseData *KeyfactorApiModelsLicenseLicenseResponseLicense `json:"LicenseData,omitempty"`
}

// NewKeyfactorApiModelsLicenseLicenseResponse instantiates a new KeyfactorApiModelsLicenseLicenseResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorApiModelsLicenseLicenseResponse() *KeyfactorApiModelsLicenseLicenseResponse {
	this := KeyfactorApiModelsLicenseLicenseResponse{}
	return &this
}

// NewKeyfactorApiModelsLicenseLicenseResponseWithDefaults instantiates a new KeyfactorApiModelsLicenseLicenseResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorApiModelsLicenseLicenseResponseWithDefaults() *KeyfactorApiModelsLicenseLicenseResponse {
	this := KeyfactorApiModelsLicenseLicenseResponse{}
	return &this
}

// GetKeyfactorVersion returns the KeyfactorVersion field value if set, zero value otherwise.
func (o *KeyfactorApiModelsLicenseLicenseResponse) GetKeyfactorVersion() string {
	if o == nil || isNil(o.KeyfactorVersion) {
		var ret string
		return ret
	}
	return *o.KeyfactorVersion
}

// GetKeyfactorVersionOk returns a tuple with the KeyfactorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponse) GetKeyfactorVersionOk() (*string, bool) {
	if o == nil || isNil(o.KeyfactorVersion) {
		return nil, false
	}
	return o.KeyfactorVersion, true
}

// HasKeyfactorVersion returns a boolean if a field has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponse) HasKeyfactorVersion() bool {
	if o != nil && !isNil(o.KeyfactorVersion) {
		return true
	}

	return false
}

// SetKeyfactorVersion gets a reference to the given string and assigns it to the KeyfactorVersion field.
func (o *KeyfactorApiModelsLicenseLicenseResponse) SetKeyfactorVersion(v string) {
	o.KeyfactorVersion = &v
}

// GetLicenseData returns the LicenseData field value if set, zero value otherwise.
func (o *KeyfactorApiModelsLicenseLicenseResponse) GetLicenseData() KeyfactorApiModelsLicenseLicenseResponseLicense {
	if o == nil || isNil(o.LicenseData) {
		var ret KeyfactorApiModelsLicenseLicenseResponseLicense
		return ret
	}
	return *o.LicenseData
}

// GetLicenseDataOk returns a tuple with the LicenseData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponse) GetLicenseDataOk() (*KeyfactorApiModelsLicenseLicenseResponseLicense, bool) {
	if o == nil || isNil(o.LicenseData) {
		return nil, false
	}
	return o.LicenseData, true
}

// HasLicenseData returns a boolean if a field has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponse) HasLicenseData() bool {
	if o != nil && !isNil(o.LicenseData) {
		return true
	}

	return false
}

// SetLicenseData gets a reference to the given KeyfactorApiModelsLicenseLicenseResponseLicense and assigns it to the LicenseData field.
func (o *KeyfactorApiModelsLicenseLicenseResponse) SetLicenseData(v KeyfactorApiModelsLicenseLicenseResponseLicense) {
	o.LicenseData = &v
}

func (o KeyfactorApiModelsLicenseLicenseResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorApiModelsLicenseLicenseResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: KeyfactorVersion is readOnly
	if !isNil(o.LicenseData) {
		toSerialize["LicenseData"] = o.LicenseData
	}
	return toSerialize, nil
}

type NullableKeyfactorApiModelsLicenseLicenseResponse struct {
	value *KeyfactorApiModelsLicenseLicenseResponse
	isSet bool
}

func (v NullableKeyfactorApiModelsLicenseLicenseResponse) Get() *KeyfactorApiModelsLicenseLicenseResponse {
	return v.value
}

func (v *NullableKeyfactorApiModelsLicenseLicenseResponse) Set(val *KeyfactorApiModelsLicenseLicenseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorApiModelsLicenseLicenseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorApiModelsLicenseLicenseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorApiModelsLicenseLicenseResponse(val *KeyfactorApiModelsLicenseLicenseResponse) *NullableKeyfactorApiModelsLicenseLicenseResponse {
	return &NullableKeyfactorApiModelsLicenseLicenseResponse{value: val, isSet: true}
}

func (v NullableKeyfactorApiModelsLicenseLicenseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorApiModelsLicenseLicenseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


