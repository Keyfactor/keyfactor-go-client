/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
	"time"
)

// checks if the ModelsRevokeCertificateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsRevokeCertificateRequest{}

// ModelsRevokeCertificateRequest struct for ModelsRevokeCertificateRequest
type ModelsRevokeCertificateRequest struct {
	CertificateIds []int32 `json:"CertificateIds,omitempty"`
	Reason *int32 `json:"Reason,omitempty"`
	Comment *string `json:"Comment,omitempty"`
	EffectiveDate *time.Time `json:"EffectiveDate,omitempty"`
	CollectionId *int32 `json:"CollectionId,omitempty"`
}

// NewModelsRevokeCertificateRequest instantiates a new ModelsRevokeCertificateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsRevokeCertificateRequest() *ModelsRevokeCertificateRequest {
	this := ModelsRevokeCertificateRequest{}
	return &this
}

// NewModelsRevokeCertificateRequestWithDefaults instantiates a new ModelsRevokeCertificateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsRevokeCertificateRequestWithDefaults() *ModelsRevokeCertificateRequest {
	this := ModelsRevokeCertificateRequest{}
	return &this
}

// GetCertificateIds returns the CertificateIds field value if set, zero value otherwise.
func (o *ModelsRevokeCertificateRequest) GetCertificateIds() []int32 {
	if o == nil || isNil(o.CertificateIds) {
		var ret []int32
		return ret
	}
	return o.CertificateIds
}

// GetCertificateIdsOk returns a tuple with the CertificateIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsRevokeCertificateRequest) GetCertificateIdsOk() ([]int32, bool) {
	if o == nil || isNil(o.CertificateIds) {
		return nil, false
	}
	return o.CertificateIds, true
}

// HasCertificateIds returns a boolean if a field has been set.
func (o *ModelsRevokeCertificateRequest) HasCertificateIds() bool {
	if o != nil && !isNil(o.CertificateIds) {
		return true
	}

	return false
}

// SetCertificateIds gets a reference to the given []int32 and assigns it to the CertificateIds field.
func (o *ModelsRevokeCertificateRequest) SetCertificateIds(v []int32) {
	o.CertificateIds = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ModelsRevokeCertificateRequest) GetReason() int32 {
	if o == nil || isNil(o.Reason) {
		var ret int32
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsRevokeCertificateRequest) GetReasonOk() (*int32, bool) {
	if o == nil || isNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ModelsRevokeCertificateRequest) HasReason() bool {
	if o != nil && !isNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given int32 and assigns it to the Reason field.
func (o *ModelsRevokeCertificateRequest) SetReason(v int32) {
	o.Reason = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ModelsRevokeCertificateRequest) GetComment() string {
	if o == nil || isNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsRevokeCertificateRequest) GetCommentOk() (*string, bool) {
	if o == nil || isNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ModelsRevokeCertificateRequest) HasComment() bool {
	if o != nil && !isNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ModelsRevokeCertificateRequest) SetComment(v string) {
	o.Comment = &v
}

// GetEffectiveDate returns the EffectiveDate field value if set, zero value otherwise.
func (o *ModelsRevokeCertificateRequest) GetEffectiveDate() time.Time {
	if o == nil || isNil(o.EffectiveDate) {
		var ret time.Time
		return ret
	}
	return *o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsRevokeCertificateRequest) GetEffectiveDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.EffectiveDate) {
		return nil, false
	}
	return o.EffectiveDate, true
}

// HasEffectiveDate returns a boolean if a field has been set.
func (o *ModelsRevokeCertificateRequest) HasEffectiveDate() bool {
	if o != nil && !isNil(o.EffectiveDate) {
		return true
	}

	return false
}

// SetEffectiveDate gets a reference to the given time.Time and assigns it to the EffectiveDate field.
func (o *ModelsRevokeCertificateRequest) SetEffectiveDate(v time.Time) {
	o.EffectiveDate = &v
}

// GetCollectionId returns the CollectionId field value if set, zero value otherwise.
func (o *ModelsRevokeCertificateRequest) GetCollectionId() int32 {
	if o == nil || isNil(o.CollectionId) {
		var ret int32
		return ret
	}
	return *o.CollectionId
}

// GetCollectionIdOk returns a tuple with the CollectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsRevokeCertificateRequest) GetCollectionIdOk() (*int32, bool) {
	if o == nil || isNil(o.CollectionId) {
		return nil, false
	}
	return o.CollectionId, true
}

// HasCollectionId returns a boolean if a field has been set.
func (o *ModelsRevokeCertificateRequest) HasCollectionId() bool {
	if o != nil && !isNil(o.CollectionId) {
		return true
	}

	return false
}

// SetCollectionId gets a reference to the given int32 and assigns it to the CollectionId field.
func (o *ModelsRevokeCertificateRequest) SetCollectionId(v int32) {
	o.CollectionId = &v
}

func (o ModelsRevokeCertificateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsRevokeCertificateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CertificateIds) {
		toSerialize["CertificateIds"] = o.CertificateIds
	}
	if !isNil(o.Reason) {
		toSerialize["Reason"] = o.Reason
	}
	if !isNil(o.Comment) {
		toSerialize["Comment"] = o.Comment
	}
	if !isNil(o.EffectiveDate) {
		toSerialize["EffectiveDate"] = o.EffectiveDate
	}
	if !isNil(o.CollectionId) {
		toSerialize["CollectionId"] = o.CollectionId
	}
	return toSerialize, nil
}

type NullableModelsRevokeCertificateRequest struct {
	value *ModelsRevokeCertificateRequest
	isSet bool
}

func (v NullableModelsRevokeCertificateRequest) Get() *ModelsRevokeCertificateRequest {
	return v.value
}

func (v *NullableModelsRevokeCertificateRequest) Set(val *ModelsRevokeCertificateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsRevokeCertificateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsRevokeCertificateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsRevokeCertificateRequest(val *ModelsRevokeCertificateRequest) *NullableModelsRevokeCertificateRequest {
	return &NullableModelsRevokeCertificateRequest{value: val, isSet: true}
}

func (v NullableModelsRevokeCertificateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsRevokeCertificateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


