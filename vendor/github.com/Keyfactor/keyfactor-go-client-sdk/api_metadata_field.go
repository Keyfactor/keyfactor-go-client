/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// MetadataFieldApiService MetadataFieldApi service
type MetadataFieldApiService service

type ApiMetadataFieldCreateMetadataFieldRequest struct {
	ctx context.Context
	ApiService *MetadataFieldApiService
	xKeyfactorRequestedWith *string
	metadataFieldType *KeyfactorApiModelsMetadataFieldMetadataFieldCreateRequest
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiMetadataFieldCreateMetadataFieldRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiMetadataFieldCreateMetadataFieldRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Properties of the metadata field type to be created
func (r ApiMetadataFieldCreateMetadataFieldRequest) MetadataFieldType(metadataFieldType KeyfactorApiModelsMetadataFieldMetadataFieldCreateRequest) ApiMetadataFieldCreateMetadataFieldRequest {
	r.metadataFieldType = &metadataFieldType
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiMetadataFieldCreateMetadataFieldRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiMetadataFieldCreateMetadataFieldRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiMetadataFieldCreateMetadataFieldRequest) Execute() (*KeyfactorApiModelsMetadataFieldMetadataFieldResponse, *http.Response, error) {
	return r.ApiService.MetadataFieldCreateMetadataFieldExecute(r)
}

/*
MetadataFieldCreateMetadataField Creates a new metadata field type with the given metadata field type properties

*NOTE: Metadata Field in this context refers to MetadataFieldType, as opposed to the value of a metadata field associated with a certificate.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMetadataFieldCreateMetadataFieldRequest
*/
func (a *MetadataFieldApiService) MetadataFieldCreateMetadataField(ctx context.Context) ApiMetadataFieldCreateMetadataFieldRequest {
	return ApiMetadataFieldCreateMetadataFieldRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KeyfactorApiModelsMetadataFieldMetadataFieldResponse
func (a *MetadataFieldApiService) MetadataFieldCreateMetadataFieldExecute(r ApiMetadataFieldCreateMetadataFieldRequest) (*KeyfactorApiModelsMetadataFieldMetadataFieldResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KeyfactorApiModelsMetadataFieldMetadataFieldResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataFieldApiService.MetadataFieldCreateMetadataField")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MetadataFields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.metadataFieldType == nil {
		return localVarReturnValue, nil, reportError("metadataFieldType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.metadataFieldType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMetadataFieldDeleteMetadataFieldRequest struct {
	ctx context.Context
	ApiService *MetadataFieldApiService
	id int32
	xKeyfactorRequestedWith *string
	force *bool
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiMetadataFieldDeleteMetadataFieldRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiMetadataFieldDeleteMetadataFieldRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Forces deletion of the metadata field type even if in-use
func (r ApiMetadataFieldDeleteMetadataFieldRequest) Force(force bool) ApiMetadataFieldDeleteMetadataFieldRequest {
	r.force = &force
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiMetadataFieldDeleteMetadataFieldRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiMetadataFieldDeleteMetadataFieldRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiMetadataFieldDeleteMetadataFieldRequest) Execute() (*http.Response, error) {
	return r.ApiService.MetadataFieldDeleteMetadataFieldExecute(r)
}

/*
MetadataFieldDeleteMetadataField Deletes a persisted metadata field type by its unique id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Keyfactor identifier of the metadata field type
 @return ApiMetadataFieldDeleteMetadataFieldRequest
*/
func (a *MetadataFieldApiService) MetadataFieldDeleteMetadataField(ctx context.Context, id int32) ApiMetadataFieldDeleteMetadataFieldRequest {
	return ApiMetadataFieldDeleteMetadataFieldRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *MetadataFieldApiService) MetadataFieldDeleteMetadataFieldExecute(r ApiMetadataFieldDeleteMetadataFieldRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataFieldApiService.MetadataFieldDeleteMetadataField")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MetadataFields/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.force != nil {
		parameterAddToQuery(localVarQueryParams, "force", r.force, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMetadataFieldDeleteMetadataFieldsRequest struct {
	ctx context.Context
	ApiService *MetadataFieldApiService
	xKeyfactorRequestedWith *string
	ids *[]int32
	force *bool
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiMetadataFieldDeleteMetadataFieldsRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiMetadataFieldDeleteMetadataFieldsRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Array of Keyfactor identifiers for metadata field types to be deleted
func (r ApiMetadataFieldDeleteMetadataFieldsRequest) Ids(ids []int32) ApiMetadataFieldDeleteMetadataFieldsRequest {
	r.ids = &ids
	return r
}

// Forces deletion of the metadata field type even if in-use
func (r ApiMetadataFieldDeleteMetadataFieldsRequest) Force(force bool) ApiMetadataFieldDeleteMetadataFieldsRequest {
	r.force = &force
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiMetadataFieldDeleteMetadataFieldsRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiMetadataFieldDeleteMetadataFieldsRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiMetadataFieldDeleteMetadataFieldsRequest) Execute() (*http.Response, error) {
	return r.ApiService.MetadataFieldDeleteMetadataFieldsExecute(r)
}

/*
MetadataFieldDeleteMetadataFields Deletes multiple persisted metadata field types by their unique ids

This will ignore individual delete failures, and continue processing the array.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMetadataFieldDeleteMetadataFieldsRequest
*/
func (a *MetadataFieldApiService) MetadataFieldDeleteMetadataFields(ctx context.Context) ApiMetadataFieldDeleteMetadataFieldsRequest {
	return ApiMetadataFieldDeleteMetadataFieldsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MetadataFieldApiService) MetadataFieldDeleteMetadataFieldsExecute(r ApiMetadataFieldDeleteMetadataFieldsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataFieldApiService.MetadataFieldDeleteMetadataFields")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MetadataFields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.ids == nil {
		return nil, reportError("ids is required and must be specified")
	}

	if r.force != nil {
		parameterAddToQuery(localVarQueryParams, "force", r.force, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.ids
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMetadataFieldGetAllMetadataFieldsRequest struct {
	ctx context.Context
	ApiService *MetadataFieldApiService
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
	pqQueryString *string
	pqPageReturned *int32
	pqReturnLimit *int32
	pqSortField *string
	pqSortAscending *int32
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiMetadataFieldGetAllMetadataFieldsRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiMetadataFieldGetAllMetadataFieldsRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiMetadataFieldGetAllMetadataFieldsRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiMetadataFieldGetAllMetadataFieldsRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)
func (r ApiMetadataFieldGetAllMetadataFieldsRequest) PqQueryString(pqQueryString string) ApiMetadataFieldGetAllMetadataFieldsRequest {
	r.pqQueryString = &pqQueryString
	return r
}

// The current page within the result set to be returned
func (r ApiMetadataFieldGetAllMetadataFieldsRequest) PqPageReturned(pqPageReturned int32) ApiMetadataFieldGetAllMetadataFieldsRequest {
	r.pqPageReturned = &pqPageReturned
	return r
}

// Maximum number of records to be returned in a single call
func (r ApiMetadataFieldGetAllMetadataFieldsRequest) PqReturnLimit(pqReturnLimit int32) ApiMetadataFieldGetAllMetadataFieldsRequest {
	r.pqReturnLimit = &pqReturnLimit
	return r
}

// Field by which the results should be sorted (view results via Management Portal for sortable columns)
func (r ApiMetadataFieldGetAllMetadataFieldsRequest) PqSortField(pqSortField string) ApiMetadataFieldGetAllMetadataFieldsRequest {
	r.pqSortField = &pqSortField
	return r
}

// Field sort direction [0&#x3D;ascending, 1&#x3D;descending]
func (r ApiMetadataFieldGetAllMetadataFieldsRequest) PqSortAscending(pqSortAscending int32) ApiMetadataFieldGetAllMetadataFieldsRequest {
	r.pqSortAscending = &pqSortAscending
	return r
}

func (r ApiMetadataFieldGetAllMetadataFieldsRequest) Execute() ([]ModelsMetadataFieldTypeModel, *http.Response, error) {
	return r.ApiService.MetadataFieldGetAllMetadataFieldsExecute(r)
}

/*
MetadataFieldGetAllMetadataFields Returns all metadata field types according to the provided filter and output parameters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMetadataFieldGetAllMetadataFieldsRequest
*/
func (a *MetadataFieldApiService) MetadataFieldGetAllMetadataFields(ctx context.Context) ApiMetadataFieldGetAllMetadataFieldsRequest {
	return ApiMetadataFieldGetAllMetadataFieldsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ModelsMetadataFieldTypeModel
func (a *MetadataFieldApiService) MetadataFieldGetAllMetadataFieldsExecute(r ApiMetadataFieldGetAllMetadataFieldsRequest) ([]ModelsMetadataFieldTypeModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelsMetadataFieldTypeModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataFieldApiService.MetadataFieldGetAllMetadataFields")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MetadataFields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.pqQueryString != nil {
		parameterAddToQuery(localVarQueryParams, "pq.queryString", r.pqQueryString, "")
	}
	if r.pqPageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "pq.pageReturned", r.pqPageReturned, "")
	}
	if r.pqReturnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "pq.returnLimit", r.pqReturnLimit, "")
	}
	if r.pqSortField != nil {
		parameterAddToQuery(localVarQueryParams, "pq.sortField", r.pqSortField, "")
	}
	if r.pqSortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "pq.sortAscending", r.pqSortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMetadataFieldGetMetadataField0Request struct {
	ctx context.Context
	ApiService *MetadataFieldApiService
	id int32
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiMetadataFieldGetMetadataField0Request) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiMetadataFieldGetMetadataField0Request {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiMetadataFieldGetMetadataField0Request) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiMetadataFieldGetMetadataField0Request {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiMetadataFieldGetMetadataField0Request) Execute() (*ModelsMetadataFieldTypeModel, *http.Response, error) {
	return r.ApiService.MetadataFieldGetMetadataField0Execute(r)
}

/*
MetadataFieldGetMetadataField0 Gets a persisted metadata field type by its unique id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique id of the metadata field type
 @return ApiMetadataFieldGetMetadataField0Request
*/
func (a *MetadataFieldApiService) MetadataFieldGetMetadataField0(ctx context.Context, id int32) ApiMetadataFieldGetMetadataField0Request {
	return ApiMetadataFieldGetMetadataField0Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ModelsMetadataFieldTypeModel
func (a *MetadataFieldApiService) MetadataFieldGetMetadataField0Execute(r ApiMetadataFieldGetMetadataField0Request) (*ModelsMetadataFieldTypeModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsMetadataFieldTypeModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataFieldApiService.MetadataFieldGetMetadataField0")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MetadataFields/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMetadataFieldGetMetadataField1Request struct {
	ctx context.Context
	ApiService *MetadataFieldApiService
	name string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiMetadataFieldGetMetadataField1Request) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiMetadataFieldGetMetadataField1Request {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiMetadataFieldGetMetadataField1Request) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiMetadataFieldGetMetadataField1Request {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiMetadataFieldGetMetadataField1Request) Execute() (*ModelsMetadataFieldTypeModel, *http.Response, error) {
	return r.ApiService.MetadataFieldGetMetadataField1Execute(r)
}

/*
MetadataFieldGetMetadataField1 Gets a persisted metadata field type by its unique name

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name The unique name of the metadata field.
 @return ApiMetadataFieldGetMetadataField1Request
*/
func (a *MetadataFieldApiService) MetadataFieldGetMetadataField1(ctx context.Context, name string) ApiMetadataFieldGetMetadataField1Request {
	return ApiMetadataFieldGetMetadataField1Request{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ModelsMetadataFieldTypeModel
func (a *MetadataFieldApiService) MetadataFieldGetMetadataField1Execute(r ApiMetadataFieldGetMetadataField1Request) (*ModelsMetadataFieldTypeModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsMetadataFieldTypeModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataFieldApiService.MetadataFieldGetMetadataField1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MetadataFields/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMetadataFieldGetMetadataFieldInUseRequest struct {
	ctx context.Context
	ApiService *MetadataFieldApiService
	id int32
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiMetadataFieldGetMetadataFieldInUseRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiMetadataFieldGetMetadataFieldInUseRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiMetadataFieldGetMetadataFieldInUseRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiMetadataFieldGetMetadataFieldInUseRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiMetadataFieldGetMetadataFieldInUseRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.MetadataFieldGetMetadataFieldInUseExecute(r)
}

/*
MetadataFieldGetMetadataFieldInUse Determines if a metadata field type associated with the provided identifier is currently in use

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Keyfactor identitifer of the metadata field
 @return ApiMetadataFieldGetMetadataFieldInUseRequest
*/
func (a *MetadataFieldApiService) MetadataFieldGetMetadataFieldInUse(ctx context.Context, id int32) ApiMetadataFieldGetMetadataFieldInUseRequest {
	return ApiMetadataFieldGetMetadataFieldInUseRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return bool
func (a *MetadataFieldApiService) MetadataFieldGetMetadataFieldInUseExecute(r ApiMetadataFieldGetMetadataFieldInUseRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataFieldApiService.MetadataFieldGetMetadataFieldInUse")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MetadataFields/{id}/InUse"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMetadataFieldUpdateMetadataFieldRequest struct {
	ctx context.Context
	ApiService *MetadataFieldApiService
	xKeyfactorRequestedWith *string
	metadataFieldType *KeyfactorApiModelsMetadataFieldMetadataFieldUpdateRequest
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiMetadataFieldUpdateMetadataFieldRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiMetadataFieldUpdateMetadataFieldRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Properties of the metadata field type to be updated
func (r ApiMetadataFieldUpdateMetadataFieldRequest) MetadataFieldType(metadataFieldType KeyfactorApiModelsMetadataFieldMetadataFieldUpdateRequest) ApiMetadataFieldUpdateMetadataFieldRequest {
	r.metadataFieldType = &metadataFieldType
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiMetadataFieldUpdateMetadataFieldRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiMetadataFieldUpdateMetadataFieldRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiMetadataFieldUpdateMetadataFieldRequest) Execute() (*KeyfactorApiModelsMetadataFieldMetadataFieldResponse, *http.Response, error) {
	return r.ApiService.MetadataFieldUpdateMetadataFieldExecute(r)
}

/*
MetadataFieldUpdateMetadataField Updates a persisted metadata field with the given metadata field type

*NOTE: Metadata Field in this context refers to MetadataFieldType, as opposed to the value of a metadata field associated with a certificate.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMetadataFieldUpdateMetadataFieldRequest
*/
func (a *MetadataFieldApiService) MetadataFieldUpdateMetadataField(ctx context.Context) ApiMetadataFieldUpdateMetadataFieldRequest {
	return ApiMetadataFieldUpdateMetadataFieldRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KeyfactorApiModelsMetadataFieldMetadataFieldResponse
func (a *MetadataFieldApiService) MetadataFieldUpdateMetadataFieldExecute(r ApiMetadataFieldUpdateMetadataFieldRequest) (*KeyfactorApiModelsMetadataFieldMetadataFieldResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KeyfactorApiModelsMetadataFieldMetadataFieldResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataFieldApiService.MetadataFieldUpdateMetadataField")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MetadataFields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.metadataFieldType == nil {
		return localVarReturnValue, nil, reportError("metadataFieldType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.metadataFieldType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
