/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsCertificateStoreServerResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCertificateStoreServerResponse{}

// ModelsCertificateStoreServerResponse struct for ModelsCertificateStoreServerResponse
type ModelsCertificateStoreServerResponse struct {
	Id *int32 `json:"Id,omitempty"`
	UseSSL *bool `json:"UseSSL,omitempty"`
	ServerType *int32 `json:"ServerType,omitempty"`
	Name *string `json:"Name,omitempty"`
}

// NewModelsCertificateStoreServerResponse instantiates a new ModelsCertificateStoreServerResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCertificateStoreServerResponse() *ModelsCertificateStoreServerResponse {
	this := ModelsCertificateStoreServerResponse{}
	return &this
}

// NewModelsCertificateStoreServerResponseWithDefaults instantiates a new ModelsCertificateStoreServerResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCertificateStoreServerResponseWithDefaults() *ModelsCertificateStoreServerResponse {
	this := ModelsCertificateStoreServerResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsCertificateStoreServerResponse) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreServerResponse) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsCertificateStoreServerResponse) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsCertificateStoreServerResponse) SetId(v int32) {
	o.Id = &v
}

// GetUseSSL returns the UseSSL field value if set, zero value otherwise.
func (o *ModelsCertificateStoreServerResponse) GetUseSSL() bool {
	if o == nil || isNil(o.UseSSL) {
		var ret bool
		return ret
	}
	return *o.UseSSL
}

// GetUseSSLOk returns a tuple with the UseSSL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreServerResponse) GetUseSSLOk() (*bool, bool) {
	if o == nil || isNil(o.UseSSL) {
		return nil, false
	}
	return o.UseSSL, true
}

// HasUseSSL returns a boolean if a field has been set.
func (o *ModelsCertificateStoreServerResponse) HasUseSSL() bool {
	if o != nil && !isNil(o.UseSSL) {
		return true
	}

	return false
}

// SetUseSSL gets a reference to the given bool and assigns it to the UseSSL field.
func (o *ModelsCertificateStoreServerResponse) SetUseSSL(v bool) {
	o.UseSSL = &v
}

// GetServerType returns the ServerType field value if set, zero value otherwise.
func (o *ModelsCertificateStoreServerResponse) GetServerType() int32 {
	if o == nil || isNil(o.ServerType) {
		var ret int32
		return ret
	}
	return *o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreServerResponse) GetServerTypeOk() (*int32, bool) {
	if o == nil || isNil(o.ServerType) {
		return nil, false
	}
	return o.ServerType, true
}

// HasServerType returns a boolean if a field has been set.
func (o *ModelsCertificateStoreServerResponse) HasServerType() bool {
	if o != nil && !isNil(o.ServerType) {
		return true
	}

	return false
}

// SetServerType gets a reference to the given int32 and assigns it to the ServerType field.
func (o *ModelsCertificateStoreServerResponse) SetServerType(v int32) {
	o.ServerType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelsCertificateStoreServerResponse) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreServerResponse) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelsCertificateStoreServerResponse) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelsCertificateStoreServerResponse) SetName(v string) {
	o.Name = &v
}

func (o ModelsCertificateStoreServerResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCertificateStoreServerResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !isNil(o.UseSSL) {
		toSerialize["UseSSL"] = o.UseSSL
	}
	if !isNil(o.ServerType) {
		toSerialize["ServerType"] = o.ServerType
	}
	if !isNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	return toSerialize, nil
}

type NullableModelsCertificateStoreServerResponse struct {
	value *ModelsCertificateStoreServerResponse
	isSet bool
}

func (v NullableModelsCertificateStoreServerResponse) Get() *ModelsCertificateStoreServerResponse {
	return v.value
}

func (v *NullableModelsCertificateStoreServerResponse) Set(val *ModelsCertificateStoreServerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCertificateStoreServerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCertificateStoreServerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCertificateStoreServerResponse(val *ModelsCertificateStoreServerResponse) *NullableModelsCertificateStoreServerResponse {
	return &NullableModelsCertificateStoreServerResponse{value: val, isSet: true}
}

func (v NullableModelsCertificateStoreServerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCertificateStoreServerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


