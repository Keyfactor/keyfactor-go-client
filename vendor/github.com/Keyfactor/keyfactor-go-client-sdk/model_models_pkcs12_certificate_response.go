/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsPkcs12CertificateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsPkcs12CertificateResponse{}

// ModelsPkcs12CertificateResponse struct for ModelsPkcs12CertificateResponse
type ModelsPkcs12CertificateResponse struct {
	SerialNumber *string `json:"SerialNumber,omitempty"`
	IssuerDN NullableString `json:"IssuerDN,omitempty"`
	Thumbprint *string `json:"Thumbprint,omitempty"`
	KeyfactorId *int32 `json:"KeyfactorId,omitempty"`
	Pkcs12Blob *string `json:"Pkcs12Blob,omitempty"`
	Password *string `json:"Password,omitempty"`
	// The integer id of the certificate request in the Keyfactor database, if one exists.
	KeyfactorRequestId *int32 `json:"KeyfactorRequestId,omitempty"`
	RequestDisposition *string `json:"RequestDisposition,omitempty"`
	DispositionMessage *string `json:"DispositionMessage,omitempty"`
	EnrollmentContext map[string]string `json:"EnrollmentContext,omitempty"`
}

// NewModelsPkcs12CertificateResponse instantiates a new ModelsPkcs12CertificateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsPkcs12CertificateResponse() *ModelsPkcs12CertificateResponse {
	this := ModelsPkcs12CertificateResponse{}
	return &this
}

// NewModelsPkcs12CertificateResponseWithDefaults instantiates a new ModelsPkcs12CertificateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsPkcs12CertificateResponseWithDefaults() *ModelsPkcs12CertificateResponse {
	this := ModelsPkcs12CertificateResponse{}
	return &this
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *ModelsPkcs12CertificateResponse) GetSerialNumber() string {
	if o == nil || isNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPkcs12CertificateResponse) GetSerialNumberOk() (*string, bool) {
	if o == nil || isNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *ModelsPkcs12CertificateResponse) HasSerialNumber() bool {
	if o != nil && !isNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *ModelsPkcs12CertificateResponse) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetIssuerDN returns the IssuerDN field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsPkcs12CertificateResponse) GetIssuerDN() string {
	if o == nil || isNil(o.IssuerDN.Get()) {
		var ret string
		return ret
	}
	return *o.IssuerDN.Get()
}

// GetIssuerDNOk returns a tuple with the IssuerDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsPkcs12CertificateResponse) GetIssuerDNOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssuerDN.Get(), o.IssuerDN.IsSet()
}

// HasIssuerDN returns a boolean if a field has been set.
func (o *ModelsPkcs12CertificateResponse) HasIssuerDN() bool {
	if o != nil && o.IssuerDN.IsSet() {
		return true
	}

	return false
}

// SetIssuerDN gets a reference to the given NullableString and assigns it to the IssuerDN field.
func (o *ModelsPkcs12CertificateResponse) SetIssuerDN(v string) {
	o.IssuerDN.Set(&v)
}
// SetIssuerDNNil sets the value for IssuerDN to be an explicit nil
func (o *ModelsPkcs12CertificateResponse) SetIssuerDNNil() {
	o.IssuerDN.Set(nil)
}

// UnsetIssuerDN ensures that no value is present for IssuerDN, not even an explicit nil
func (o *ModelsPkcs12CertificateResponse) UnsetIssuerDN() {
	o.IssuerDN.Unset()
}

// GetThumbprint returns the Thumbprint field value if set, zero value otherwise.
func (o *ModelsPkcs12CertificateResponse) GetThumbprint() string {
	if o == nil || isNil(o.Thumbprint) {
		var ret string
		return ret
	}
	return *o.Thumbprint
}

// GetThumbprintOk returns a tuple with the Thumbprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPkcs12CertificateResponse) GetThumbprintOk() (*string, bool) {
	if o == nil || isNil(o.Thumbprint) {
		return nil, false
	}
	return o.Thumbprint, true
}

// HasThumbprint returns a boolean if a field has been set.
func (o *ModelsPkcs12CertificateResponse) HasThumbprint() bool {
	if o != nil && !isNil(o.Thumbprint) {
		return true
	}

	return false
}

// SetThumbprint gets a reference to the given string and assigns it to the Thumbprint field.
func (o *ModelsPkcs12CertificateResponse) SetThumbprint(v string) {
	o.Thumbprint = &v
}

// GetKeyfactorId returns the KeyfactorId field value if set, zero value otherwise.
func (o *ModelsPkcs12CertificateResponse) GetKeyfactorId() int32 {
	if o == nil || isNil(o.KeyfactorId) {
		var ret int32
		return ret
	}
	return *o.KeyfactorId
}

// GetKeyfactorIdOk returns a tuple with the KeyfactorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPkcs12CertificateResponse) GetKeyfactorIdOk() (*int32, bool) {
	if o == nil || isNil(o.KeyfactorId) {
		return nil, false
	}
	return o.KeyfactorId, true
}

// HasKeyfactorId returns a boolean if a field has been set.
func (o *ModelsPkcs12CertificateResponse) HasKeyfactorId() bool {
	if o != nil && !isNil(o.KeyfactorId) {
		return true
	}

	return false
}

// SetKeyfactorId gets a reference to the given int32 and assigns it to the KeyfactorId field.
func (o *ModelsPkcs12CertificateResponse) SetKeyfactorId(v int32) {
	o.KeyfactorId = &v
}

// GetPkcs12Blob returns the Pkcs12Blob field value if set, zero value otherwise.
func (o *ModelsPkcs12CertificateResponse) GetPkcs12Blob() string {
	if o == nil || isNil(o.Pkcs12Blob) {
		var ret string
		return ret
	}
	return *o.Pkcs12Blob
}

// GetPkcs12BlobOk returns a tuple with the Pkcs12Blob field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPkcs12CertificateResponse) GetPkcs12BlobOk() (*string, bool) {
	if o == nil || isNil(o.Pkcs12Blob) {
		return nil, false
	}
	return o.Pkcs12Blob, true
}

// HasPkcs12Blob returns a boolean if a field has been set.
func (o *ModelsPkcs12CertificateResponse) HasPkcs12Blob() bool {
	if o != nil && !isNil(o.Pkcs12Blob) {
		return true
	}

	return false
}

// SetPkcs12Blob gets a reference to the given string and assigns it to the Pkcs12Blob field.
func (o *ModelsPkcs12CertificateResponse) SetPkcs12Blob(v string) {
	o.Pkcs12Blob = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *ModelsPkcs12CertificateResponse) GetPassword() string {
	if o == nil || isNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPkcs12CertificateResponse) GetPasswordOk() (*string, bool) {
	if o == nil || isNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *ModelsPkcs12CertificateResponse) HasPassword() bool {
	if o != nil && !isNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *ModelsPkcs12CertificateResponse) SetPassword(v string) {
	o.Password = &v
}

// GetKeyfactorRequestId returns the KeyfactorRequestId field value if set, zero value otherwise.
func (o *ModelsPkcs12CertificateResponse) GetKeyfactorRequestId() int32 {
	if o == nil || isNil(o.KeyfactorRequestId) {
		var ret int32
		return ret
	}
	return *o.KeyfactorRequestId
}

// GetKeyfactorRequestIdOk returns a tuple with the KeyfactorRequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPkcs12CertificateResponse) GetKeyfactorRequestIdOk() (*int32, bool) {
	if o == nil || isNil(o.KeyfactorRequestId) {
		return nil, false
	}
	return o.KeyfactorRequestId, true
}

// HasKeyfactorRequestId returns a boolean if a field has been set.
func (o *ModelsPkcs12CertificateResponse) HasKeyfactorRequestId() bool {
	if o != nil && !isNil(o.KeyfactorRequestId) {
		return true
	}

	return false
}

// SetKeyfactorRequestId gets a reference to the given int32 and assigns it to the KeyfactorRequestId field.
func (o *ModelsPkcs12CertificateResponse) SetKeyfactorRequestId(v int32) {
	o.KeyfactorRequestId = &v
}

// GetRequestDisposition returns the RequestDisposition field value if set, zero value otherwise.
func (o *ModelsPkcs12CertificateResponse) GetRequestDisposition() string {
	if o == nil || isNil(o.RequestDisposition) {
		var ret string
		return ret
	}
	return *o.RequestDisposition
}

// GetRequestDispositionOk returns a tuple with the RequestDisposition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPkcs12CertificateResponse) GetRequestDispositionOk() (*string, bool) {
	if o == nil || isNil(o.RequestDisposition) {
		return nil, false
	}
	return o.RequestDisposition, true
}

// HasRequestDisposition returns a boolean if a field has been set.
func (o *ModelsPkcs12CertificateResponse) HasRequestDisposition() bool {
	if o != nil && !isNil(o.RequestDisposition) {
		return true
	}

	return false
}

// SetRequestDisposition gets a reference to the given string and assigns it to the RequestDisposition field.
func (o *ModelsPkcs12CertificateResponse) SetRequestDisposition(v string) {
	o.RequestDisposition = &v
}

// GetDispositionMessage returns the DispositionMessage field value if set, zero value otherwise.
func (o *ModelsPkcs12CertificateResponse) GetDispositionMessage() string {
	if o == nil || isNil(o.DispositionMessage) {
		var ret string
		return ret
	}
	return *o.DispositionMessage
}

// GetDispositionMessageOk returns a tuple with the DispositionMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPkcs12CertificateResponse) GetDispositionMessageOk() (*string, bool) {
	if o == nil || isNil(o.DispositionMessage) {
		return nil, false
	}
	return o.DispositionMessage, true
}

// HasDispositionMessage returns a boolean if a field has been set.
func (o *ModelsPkcs12CertificateResponse) HasDispositionMessage() bool {
	if o != nil && !isNil(o.DispositionMessage) {
		return true
	}

	return false
}

// SetDispositionMessage gets a reference to the given string and assigns it to the DispositionMessage field.
func (o *ModelsPkcs12CertificateResponse) SetDispositionMessage(v string) {
	o.DispositionMessage = &v
}

// GetEnrollmentContext returns the EnrollmentContext field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsPkcs12CertificateResponse) GetEnrollmentContext() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.EnrollmentContext
}

// GetEnrollmentContextOk returns a tuple with the EnrollmentContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsPkcs12CertificateResponse) GetEnrollmentContextOk() (*map[string]string, bool) {
	if o == nil || isNil(o.EnrollmentContext) {
		return nil, false
	}
	return &o.EnrollmentContext, true
}

// HasEnrollmentContext returns a boolean if a field has been set.
func (o *ModelsPkcs12CertificateResponse) HasEnrollmentContext() bool {
	if o != nil && isNil(o.EnrollmentContext) {
		return true
	}

	return false
}

// SetEnrollmentContext gets a reference to the given map[string]string and assigns it to the EnrollmentContext field.
func (o *ModelsPkcs12CertificateResponse) SetEnrollmentContext(v map[string]string) {
	o.EnrollmentContext = v
}

func (o ModelsPkcs12CertificateResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsPkcs12CertificateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.SerialNumber) {
		toSerialize["SerialNumber"] = o.SerialNumber
	}
	if o.IssuerDN.IsSet() {
		toSerialize["IssuerDN"] = o.IssuerDN.Get()
	}
	if !isNil(o.Thumbprint) {
		toSerialize["Thumbprint"] = o.Thumbprint
	}
	if !isNil(o.KeyfactorId) {
		toSerialize["KeyfactorId"] = o.KeyfactorId
	}
	if !isNil(o.Pkcs12Blob) {
		toSerialize["Pkcs12Blob"] = o.Pkcs12Blob
	}
	if !isNil(o.Password) {
		toSerialize["Password"] = o.Password
	}
	if !isNil(o.KeyfactorRequestId) {
		toSerialize["KeyfactorRequestId"] = o.KeyfactorRequestId
	}
	if !isNil(o.RequestDisposition) {
		toSerialize["RequestDisposition"] = o.RequestDisposition
	}
	if !isNil(o.DispositionMessage) {
		toSerialize["DispositionMessage"] = o.DispositionMessage
	}
	if o.EnrollmentContext != nil {
		toSerialize["EnrollmentContext"] = o.EnrollmentContext
	}
	return toSerialize, nil
}

type NullableModelsPkcs12CertificateResponse struct {
	value *ModelsPkcs12CertificateResponse
	isSet bool
}

func (v NullableModelsPkcs12CertificateResponse) Get() *ModelsPkcs12CertificateResponse {
	return v.value
}

func (v *NullableModelsPkcs12CertificateResponse) Set(val *ModelsPkcs12CertificateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsPkcs12CertificateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsPkcs12CertificateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsPkcs12CertificateResponse(val *ModelsPkcs12CertificateResponse) *NullableModelsPkcs12CertificateResponse {
	return &NullableModelsPkcs12CertificateResponse{value: val, isSet: true}
}

func (v NullableModelsPkcs12CertificateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsPkcs12CertificateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


