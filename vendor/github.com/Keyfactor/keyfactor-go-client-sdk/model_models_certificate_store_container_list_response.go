/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsCertificateStoreContainerListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCertificateStoreContainerListResponse{}

// ModelsCertificateStoreContainerListResponse struct for ModelsCertificateStoreContainerListResponse
type ModelsCertificateStoreContainerListResponse struct {
	Id *int32 `json:"Id,omitempty"`
	Name *string `json:"Name,omitempty"`
	OverwriteSchedules *bool `json:"OverwriteSchedules,omitempty"`
	Schedule *string `json:"Schedule,omitempty"`
	CertStoreType *int32 `json:"CertStoreType,omitempty"`
	StoreCount *int32 `json:"StoreCount,omitempty"`
}

// NewModelsCertificateStoreContainerListResponse instantiates a new ModelsCertificateStoreContainerListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCertificateStoreContainerListResponse() *ModelsCertificateStoreContainerListResponse {
	this := ModelsCertificateStoreContainerListResponse{}
	return &this
}

// NewModelsCertificateStoreContainerListResponseWithDefaults instantiates a new ModelsCertificateStoreContainerListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCertificateStoreContainerListResponseWithDefaults() *ModelsCertificateStoreContainerListResponse {
	this := ModelsCertificateStoreContainerListResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsCertificateStoreContainerListResponse) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreContainerListResponse) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsCertificateStoreContainerListResponse) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsCertificateStoreContainerListResponse) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelsCertificateStoreContainerListResponse) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreContainerListResponse) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelsCertificateStoreContainerListResponse) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelsCertificateStoreContainerListResponse) SetName(v string) {
	o.Name = &v
}

// GetOverwriteSchedules returns the OverwriteSchedules field value if set, zero value otherwise.
func (o *ModelsCertificateStoreContainerListResponse) GetOverwriteSchedules() bool {
	if o == nil || isNil(o.OverwriteSchedules) {
		var ret bool
		return ret
	}
	return *o.OverwriteSchedules
}

// GetOverwriteSchedulesOk returns a tuple with the OverwriteSchedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreContainerListResponse) GetOverwriteSchedulesOk() (*bool, bool) {
	if o == nil || isNil(o.OverwriteSchedules) {
		return nil, false
	}
	return o.OverwriteSchedules, true
}

// HasOverwriteSchedules returns a boolean if a field has been set.
func (o *ModelsCertificateStoreContainerListResponse) HasOverwriteSchedules() bool {
	if o != nil && !isNil(o.OverwriteSchedules) {
		return true
	}

	return false
}

// SetOverwriteSchedules gets a reference to the given bool and assigns it to the OverwriteSchedules field.
func (o *ModelsCertificateStoreContainerListResponse) SetOverwriteSchedules(v bool) {
	o.OverwriteSchedules = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *ModelsCertificateStoreContainerListResponse) GetSchedule() string {
	if o == nil || isNil(o.Schedule) {
		var ret string
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreContainerListResponse) GetScheduleOk() (*string, bool) {
	if o == nil || isNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *ModelsCertificateStoreContainerListResponse) HasSchedule() bool {
	if o != nil && !isNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given string and assigns it to the Schedule field.
func (o *ModelsCertificateStoreContainerListResponse) SetSchedule(v string) {
	o.Schedule = &v
}

// GetCertStoreType returns the CertStoreType field value if set, zero value otherwise.
func (o *ModelsCertificateStoreContainerListResponse) GetCertStoreType() int32 {
	if o == nil || isNil(o.CertStoreType) {
		var ret int32
		return ret
	}
	return *o.CertStoreType
}

// GetCertStoreTypeOk returns a tuple with the CertStoreType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreContainerListResponse) GetCertStoreTypeOk() (*int32, bool) {
	if o == nil || isNil(o.CertStoreType) {
		return nil, false
	}
	return o.CertStoreType, true
}

// HasCertStoreType returns a boolean if a field has been set.
func (o *ModelsCertificateStoreContainerListResponse) HasCertStoreType() bool {
	if o != nil && !isNil(o.CertStoreType) {
		return true
	}

	return false
}

// SetCertStoreType gets a reference to the given int32 and assigns it to the CertStoreType field.
func (o *ModelsCertificateStoreContainerListResponse) SetCertStoreType(v int32) {
	o.CertStoreType = &v
}

// GetStoreCount returns the StoreCount field value if set, zero value otherwise.
func (o *ModelsCertificateStoreContainerListResponse) GetStoreCount() int32 {
	if o == nil || isNil(o.StoreCount) {
		var ret int32
		return ret
	}
	return *o.StoreCount
}

// GetStoreCountOk returns a tuple with the StoreCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreContainerListResponse) GetStoreCountOk() (*int32, bool) {
	if o == nil || isNil(o.StoreCount) {
		return nil, false
	}
	return o.StoreCount, true
}

// HasStoreCount returns a boolean if a field has been set.
func (o *ModelsCertificateStoreContainerListResponse) HasStoreCount() bool {
	if o != nil && !isNil(o.StoreCount) {
		return true
	}

	return false
}

// SetStoreCount gets a reference to the given int32 and assigns it to the StoreCount field.
func (o *ModelsCertificateStoreContainerListResponse) SetStoreCount(v int32) {
	o.StoreCount = &v
}

func (o ModelsCertificateStoreContainerListResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCertificateStoreContainerListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !isNil(o.OverwriteSchedules) {
		toSerialize["OverwriteSchedules"] = o.OverwriteSchedules
	}
	if !isNil(o.Schedule) {
		toSerialize["Schedule"] = o.Schedule
	}
	if !isNil(o.CertStoreType) {
		toSerialize["CertStoreType"] = o.CertStoreType
	}
	if !isNil(o.StoreCount) {
		toSerialize["StoreCount"] = o.StoreCount
	}
	return toSerialize, nil
}

type NullableModelsCertificateStoreContainerListResponse struct {
	value *ModelsCertificateStoreContainerListResponse
	isSet bool
}

func (v NullableModelsCertificateStoreContainerListResponse) Get() *ModelsCertificateStoreContainerListResponse {
	return v.value
}

func (v *NullableModelsCertificateStoreContainerListResponse) Set(val *ModelsCertificateStoreContainerListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCertificateStoreContainerListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCertificateStoreContainerListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCertificateStoreContainerListResponse(val *ModelsCertificateStoreContainerListResponse) *NullableModelsCertificateStoreContainerListResponse {
	return &NullableModelsCertificateStoreContainerListResponse{value: val, isSet: true}
}

func (v NullableModelsCertificateStoreContainerListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCertificateStoreContainerListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


