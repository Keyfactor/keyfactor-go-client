/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsCertStoreTypeSupportedOperations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCertStoreTypeSupportedOperations{}

// ModelsCertStoreTypeSupportedOperations struct for ModelsCertStoreTypeSupportedOperations
type ModelsCertStoreTypeSupportedOperations struct {
	Add *bool `json:"Add,omitempty"`
	Create *bool `json:"Create,omitempty"`
	Discovery *bool `json:"Discovery,omitempty"`
	Enrollment *bool `json:"Enrollment,omitempty"`
	Remove *bool `json:"Remove,omitempty"`
}

// NewModelsCertStoreTypeSupportedOperations instantiates a new ModelsCertStoreTypeSupportedOperations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCertStoreTypeSupportedOperations() *ModelsCertStoreTypeSupportedOperations {
	this := ModelsCertStoreTypeSupportedOperations{}
	return &this
}

// NewModelsCertStoreTypeSupportedOperationsWithDefaults instantiates a new ModelsCertStoreTypeSupportedOperations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCertStoreTypeSupportedOperationsWithDefaults() *ModelsCertStoreTypeSupportedOperations {
	this := ModelsCertStoreTypeSupportedOperations{}
	return &this
}

// GetAdd returns the Add field value if set, zero value otherwise.
func (o *ModelsCertStoreTypeSupportedOperations) GetAdd() bool {
	if o == nil || isNil(o.Add) {
		var ret bool
		return ret
	}
	return *o.Add
}

// GetAddOk returns a tuple with the Add field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreTypeSupportedOperations) GetAddOk() (*bool, bool) {
	if o == nil || isNil(o.Add) {
		return nil, false
	}
	return o.Add, true
}

// HasAdd returns a boolean if a field has been set.
func (o *ModelsCertStoreTypeSupportedOperations) HasAdd() bool {
	if o != nil && !isNil(o.Add) {
		return true
	}

	return false
}

// SetAdd gets a reference to the given bool and assigns it to the Add field.
func (o *ModelsCertStoreTypeSupportedOperations) SetAdd(v bool) {
	o.Add = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *ModelsCertStoreTypeSupportedOperations) GetCreate() bool {
	if o == nil || isNil(o.Create) {
		var ret bool
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreTypeSupportedOperations) GetCreateOk() (*bool, bool) {
	if o == nil || isNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *ModelsCertStoreTypeSupportedOperations) HasCreate() bool {
	if o != nil && !isNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given bool and assigns it to the Create field.
func (o *ModelsCertStoreTypeSupportedOperations) SetCreate(v bool) {
	o.Create = &v
}

// GetDiscovery returns the Discovery field value if set, zero value otherwise.
func (o *ModelsCertStoreTypeSupportedOperations) GetDiscovery() bool {
	if o == nil || isNil(o.Discovery) {
		var ret bool
		return ret
	}
	return *o.Discovery
}

// GetDiscoveryOk returns a tuple with the Discovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreTypeSupportedOperations) GetDiscoveryOk() (*bool, bool) {
	if o == nil || isNil(o.Discovery) {
		return nil, false
	}
	return o.Discovery, true
}

// HasDiscovery returns a boolean if a field has been set.
func (o *ModelsCertStoreTypeSupportedOperations) HasDiscovery() bool {
	if o != nil && !isNil(o.Discovery) {
		return true
	}

	return false
}

// SetDiscovery gets a reference to the given bool and assigns it to the Discovery field.
func (o *ModelsCertStoreTypeSupportedOperations) SetDiscovery(v bool) {
	o.Discovery = &v
}

// GetEnrollment returns the Enrollment field value if set, zero value otherwise.
func (o *ModelsCertStoreTypeSupportedOperations) GetEnrollment() bool {
	if o == nil || isNil(o.Enrollment) {
		var ret bool
		return ret
	}
	return *o.Enrollment
}

// GetEnrollmentOk returns a tuple with the Enrollment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreTypeSupportedOperations) GetEnrollmentOk() (*bool, bool) {
	if o == nil || isNil(o.Enrollment) {
		return nil, false
	}
	return o.Enrollment, true
}

// HasEnrollment returns a boolean if a field has been set.
func (o *ModelsCertStoreTypeSupportedOperations) HasEnrollment() bool {
	if o != nil && !isNil(o.Enrollment) {
		return true
	}

	return false
}

// SetEnrollment gets a reference to the given bool and assigns it to the Enrollment field.
func (o *ModelsCertStoreTypeSupportedOperations) SetEnrollment(v bool) {
	o.Enrollment = &v
}

// GetRemove returns the Remove field value if set, zero value otherwise.
func (o *ModelsCertStoreTypeSupportedOperations) GetRemove() bool {
	if o == nil || isNil(o.Remove) {
		var ret bool
		return ret
	}
	return *o.Remove
}

// GetRemoveOk returns a tuple with the Remove field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreTypeSupportedOperations) GetRemoveOk() (*bool, bool) {
	if o == nil || isNil(o.Remove) {
		return nil, false
	}
	return o.Remove, true
}

// HasRemove returns a boolean if a field has been set.
func (o *ModelsCertStoreTypeSupportedOperations) HasRemove() bool {
	if o != nil && !isNil(o.Remove) {
		return true
	}

	return false
}

// SetRemove gets a reference to the given bool and assigns it to the Remove field.
func (o *ModelsCertStoreTypeSupportedOperations) SetRemove(v bool) {
	o.Remove = &v
}

func (o ModelsCertStoreTypeSupportedOperations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCertStoreTypeSupportedOperations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Add) {
		toSerialize["Add"] = o.Add
	}
	if !isNil(o.Create) {
		toSerialize["Create"] = o.Create
	}
	if !isNil(o.Discovery) {
		toSerialize["Discovery"] = o.Discovery
	}
	if !isNil(o.Enrollment) {
		toSerialize["Enrollment"] = o.Enrollment
	}
	if !isNil(o.Remove) {
		toSerialize["Remove"] = o.Remove
	}
	return toSerialize, nil
}

type NullableModelsCertStoreTypeSupportedOperations struct {
	value *ModelsCertStoreTypeSupportedOperations
	isSet bool
}

func (v NullableModelsCertStoreTypeSupportedOperations) Get() *ModelsCertStoreTypeSupportedOperations {
	return v.value
}

func (v *NullableModelsCertStoreTypeSupportedOperations) Set(val *ModelsCertStoreTypeSupportedOperations) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCertStoreTypeSupportedOperations) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCertStoreTypeSupportedOperations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCertStoreTypeSupportedOperations(val *ModelsCertStoreTypeSupportedOperations) *NullableModelsCertStoreTypeSupportedOperations {
	return &NullableModelsCertStoreTypeSupportedOperations{value: val, isSet: true}
}

func (v NullableModelsCertStoreTypeSupportedOperations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCertStoreTypeSupportedOperations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


