/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"encoding/json"
)

// checks if the ModelsMetadataAllUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsMetadataAllUpdateRequest{}

// ModelsMetadataAllUpdateRequest struct for ModelsMetadataAllUpdateRequest
type ModelsMetadataAllUpdateRequest struct {
	Query *string `json:"Query,omitempty"`
	CertificateIds []int32 `json:"CertificateIds,omitempty"`
	Metadata []ModelsMetadataSingleUpdateRequest `json:"Metadata"`
}

// NewModelsMetadataAllUpdateRequest instantiates a new ModelsMetadataAllUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsMetadataAllUpdateRequest(metadata []ModelsMetadataSingleUpdateRequest) *ModelsMetadataAllUpdateRequest {
	this := ModelsMetadataAllUpdateRequest{}
	this.Metadata = metadata
	return &this
}

// NewModelsMetadataAllUpdateRequestWithDefaults instantiates a new ModelsMetadataAllUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsMetadataAllUpdateRequestWithDefaults() *ModelsMetadataAllUpdateRequest {
	this := ModelsMetadataAllUpdateRequest{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *ModelsMetadataAllUpdateRequest) GetQuery() string {
	if o == nil || isNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsMetadataAllUpdateRequest) GetQueryOk() (*string, bool) {
	if o == nil || isNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *ModelsMetadataAllUpdateRequest) HasQuery() bool {
	if o != nil && !isNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *ModelsMetadataAllUpdateRequest) SetQuery(v string) {
	o.Query = &v
}

// GetCertificateIds returns the CertificateIds field value if set, zero value otherwise.
func (o *ModelsMetadataAllUpdateRequest) GetCertificateIds() []int32 {
	if o == nil || isNil(o.CertificateIds) {
		var ret []int32
		return ret
	}
	return o.CertificateIds
}

// GetCertificateIdsOk returns a tuple with the CertificateIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsMetadataAllUpdateRequest) GetCertificateIdsOk() ([]int32, bool) {
	if o == nil || isNil(o.CertificateIds) {
		return nil, false
	}
	return o.CertificateIds, true
}

// HasCertificateIds returns a boolean if a field has been set.
func (o *ModelsMetadataAllUpdateRequest) HasCertificateIds() bool {
	if o != nil && !isNil(o.CertificateIds) {
		return true
	}

	return false
}

// SetCertificateIds gets a reference to the given []int32 and assigns it to the CertificateIds field.
func (o *ModelsMetadataAllUpdateRequest) SetCertificateIds(v []int32) {
	o.CertificateIds = v
}

// GetMetadata returns the Metadata field value
func (o *ModelsMetadataAllUpdateRequest) GetMetadata() []ModelsMetadataSingleUpdateRequest {
	if o == nil {
		var ret []ModelsMetadataSingleUpdateRequest
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ModelsMetadataAllUpdateRequest) GetMetadataOk() ([]ModelsMetadataSingleUpdateRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *ModelsMetadataAllUpdateRequest) SetMetadata(v []ModelsMetadataSingleUpdateRequest) {
	o.Metadata = v
}

func (o ModelsMetadataAllUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsMetadataAllUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Query) {
		toSerialize["Query"] = o.Query
	}
	if !isNil(o.CertificateIds) {
		toSerialize["CertificateIds"] = o.CertificateIds
	}
	toSerialize["Metadata"] = o.Metadata
	return toSerialize, nil
}

type NullableModelsMetadataAllUpdateRequest struct {
	value *ModelsMetadataAllUpdateRequest
	isSet bool
}

func (v NullableModelsMetadataAllUpdateRequest) Get() *ModelsMetadataAllUpdateRequest {
	return v.value
}

func (v *NullableModelsMetadataAllUpdateRequest) Set(val *ModelsMetadataAllUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsMetadataAllUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsMetadataAllUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsMetadataAllUpdateRequest(val *ModelsMetadataAllUpdateRequest) *NullableModelsMetadataAllUpdateRequest {
	return &NullableModelsMetadataAllUpdateRequest{value: val, isSet: true}
}

func (v NullableModelsMetadataAllUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsMetadataAllUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


