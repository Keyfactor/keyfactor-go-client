/*
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor_command_client_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// CertificateStoreTypeApiService CertificateStoreTypeApi service
type CertificateStoreTypeApiService service

type ApiCertificateStoreTypeCreateCertificateStoreTypeRequest struct {
	ctx context.Context
	ApiService *CertificateStoreTypeApiService
	xKeyfactorRequestedWith *string
	certStoreType *KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeCreationRequest
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiCertificateStoreTypeCreateCertificateStoreTypeRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiCertificateStoreTypeCreateCertificateStoreTypeRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Certificate store type properties for the new type
func (r ApiCertificateStoreTypeCreateCertificateStoreTypeRequest) CertStoreType(certStoreType KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeCreationRequest) ApiCertificateStoreTypeCreateCertificateStoreTypeRequest {
	r.certStoreType = &certStoreType
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiCertificateStoreTypeCreateCertificateStoreTypeRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiCertificateStoreTypeCreateCertificateStoreTypeRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiCertificateStoreTypeCreateCertificateStoreTypeRequest) Execute() (*KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse, *http.Response, error) {
	return r.ApiService.CertificateStoreTypeCreateCertificateStoreTypeExecute(r)
}

/*
CertificateStoreTypeCreateCertificateStoreType Creates a new certificate store type with the provided properties

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCertificateStoreTypeCreateCertificateStoreTypeRequest
*/
func (a *CertificateStoreTypeApiService) CertificateStoreTypeCreateCertificateStoreType(ctx context.Context) ApiCertificateStoreTypeCreateCertificateStoreTypeRequest {
	return ApiCertificateStoreTypeCreateCertificateStoreTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse
func (a *CertificateStoreTypeApiService) CertificateStoreTypeCreateCertificateStoreTypeExecute(r ApiCertificateStoreTypeCreateCertificateStoreTypeRequest) (*KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CertificateStoreTypeApiService.CertificateStoreTypeCreateCertificateStoreType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CertificateStoreTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.certStoreType == nil {
		return localVarReturnValue, nil, reportError("certStoreType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.certStoreType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCertificateStoreTypeDeleteCertificateStoreTypeRequest struct {
	ctx context.Context
	ApiService *CertificateStoreTypeApiService
	id int32
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiCertificateStoreTypeDeleteCertificateStoreTypeRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiCertificateStoreTypeDeleteCertificateStoreTypeRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiCertificateStoreTypeDeleteCertificateStoreTypeRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiCertificateStoreTypeDeleteCertificateStoreTypeRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiCertificateStoreTypeDeleteCertificateStoreTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.CertificateStoreTypeDeleteCertificateStoreTypeExecute(r)
}

/*
CertificateStoreTypeDeleteCertificateStoreType Deletes a certificate store type according to the provided identifier

This will ignore individual delete failures, and continue processing certificate stores.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Keyfactor identifier of the certificate store type to be deleted
 @return ApiCertificateStoreTypeDeleteCertificateStoreTypeRequest
*/
func (a *CertificateStoreTypeApiService) CertificateStoreTypeDeleteCertificateStoreType(ctx context.Context, id int32) ApiCertificateStoreTypeDeleteCertificateStoreTypeRequest {
	return ApiCertificateStoreTypeDeleteCertificateStoreTypeRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CertificateStoreTypeApiService) CertificateStoreTypeDeleteCertificateStoreTypeExecute(r ApiCertificateStoreTypeDeleteCertificateStoreTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CertificateStoreTypeApiService.CertificateStoreTypeDeleteCertificateStoreType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CertificateStoreTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCertificateStoreTypeDeleteCertificateStoreTypesRequest struct {
	ctx context.Context
	ApiService *CertificateStoreTypeApiService
	xKeyfactorRequestedWith *string
	ids *[]int32
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiCertificateStoreTypeDeleteCertificateStoreTypesRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiCertificateStoreTypeDeleteCertificateStoreTypesRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Array of Keyfactor identifiers of the certificate store types to be deleted
func (r ApiCertificateStoreTypeDeleteCertificateStoreTypesRequest) Ids(ids []int32) ApiCertificateStoreTypeDeleteCertificateStoreTypesRequest {
	r.ids = &ids
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiCertificateStoreTypeDeleteCertificateStoreTypesRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiCertificateStoreTypeDeleteCertificateStoreTypesRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiCertificateStoreTypeDeleteCertificateStoreTypesRequest) Execute() (*http.Response, error) {
	return r.ApiService.CertificateStoreTypeDeleteCertificateStoreTypesExecute(r)
}

/*
CertificateStoreTypeDeleteCertificateStoreTypes Deletes certificate store types according to the provided identifiers

This will ignore individual delete failures, and continue processing the array.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCertificateStoreTypeDeleteCertificateStoreTypesRequest
*/
func (a *CertificateStoreTypeApiService) CertificateStoreTypeDeleteCertificateStoreTypes(ctx context.Context) ApiCertificateStoreTypeDeleteCertificateStoreTypesRequest {
	return ApiCertificateStoreTypeDeleteCertificateStoreTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CertificateStoreTypeApiService) CertificateStoreTypeDeleteCertificateStoreTypesExecute(r ApiCertificateStoreTypeDeleteCertificateStoreTypesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CertificateStoreTypeApiService.CertificateStoreTypeDeleteCertificateStoreTypes")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CertificateStoreTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.ids == nil {
		return nil, reportError("ids is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.ids
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCertificateStoreTypeGetCertificateStoreType0Request struct {
	ctx context.Context
	ApiService *CertificateStoreTypeApiService
	id int32
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiCertificateStoreTypeGetCertificateStoreType0Request) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiCertificateStoreTypeGetCertificateStoreType0Request {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiCertificateStoreTypeGetCertificateStoreType0Request) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiCertificateStoreTypeGetCertificateStoreType0Request {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiCertificateStoreTypeGetCertificateStoreType0Request) Execute() (*KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse, *http.Response, error) {
	return r.ApiService.CertificateStoreTypeGetCertificateStoreType0Execute(r)
}

/*
CertificateStoreTypeGetCertificateStoreType0 Returns a single certificate store type that matches id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Keyfactor identifier of the certificate store type
 @return ApiCertificateStoreTypeGetCertificateStoreType0Request
*/
func (a *CertificateStoreTypeApiService) CertificateStoreTypeGetCertificateStoreType0(ctx context.Context, id int32) ApiCertificateStoreTypeGetCertificateStoreType0Request {
	return ApiCertificateStoreTypeGetCertificateStoreType0Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse
func (a *CertificateStoreTypeApiService) CertificateStoreTypeGetCertificateStoreType0Execute(r ApiCertificateStoreTypeGetCertificateStoreType0Request) (*KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CertificateStoreTypeApiService.CertificateStoreTypeGetCertificateStoreType0")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CertificateStoreTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCertificateStoreTypeGetCertificateStoreType1Request struct {
	ctx context.Context
	ApiService *CertificateStoreTypeApiService
	name string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiCertificateStoreTypeGetCertificateStoreType1Request) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiCertificateStoreTypeGetCertificateStoreType1Request {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiCertificateStoreTypeGetCertificateStoreType1Request) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiCertificateStoreTypeGetCertificateStoreType1Request {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiCertificateStoreTypeGetCertificateStoreType1Request) Execute() ([]KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse, *http.Response, error) {
	return r.ApiService.CertificateStoreTypeGetCertificateStoreType1Execute(r)
}

/*
CertificateStoreTypeGetCertificateStoreType1 Returns a single certificate store type that matches the provided short name

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Short name of the certificate store type to return
 @return ApiCertificateStoreTypeGetCertificateStoreType1Request
*/
func (a *CertificateStoreTypeApiService) CertificateStoreTypeGetCertificateStoreType1(ctx context.Context, name string) ApiCertificateStoreTypeGetCertificateStoreType1Request {
	return ApiCertificateStoreTypeGetCertificateStoreType1Request{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return []KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse
func (a *CertificateStoreTypeApiService) CertificateStoreTypeGetCertificateStoreType1Execute(r ApiCertificateStoreTypeGetCertificateStoreType1Request) ([]KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CertificateStoreTypeApiService.CertificateStoreTypeGetCertificateStoreType1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CertificateStoreTypes/Name/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCertificateStoreTypeGetTypesRequest struct {
	ctx context.Context
	ApiService *CertificateStoreTypeApiService
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion *string
	cstqueryQueryString *string
	cstqueryPageReturned *int32
	cstqueryReturnLimit *int32
	cstquerySortField *string
	cstquerySortAscending *int32
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiCertificateStoreTypeGetTypesRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiCertificateStoreTypeGetTypesRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiCertificateStoreTypeGetTypesRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiCertificateStoreTypeGetTypesRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)
func (r ApiCertificateStoreTypeGetTypesRequest) CstqueryQueryString(cstqueryQueryString string) ApiCertificateStoreTypeGetTypesRequest {
	r.cstqueryQueryString = &cstqueryQueryString
	return r
}

// The current page within the result set to be returned
func (r ApiCertificateStoreTypeGetTypesRequest) CstqueryPageReturned(cstqueryPageReturned int32) ApiCertificateStoreTypeGetTypesRequest {
	r.cstqueryPageReturned = &cstqueryPageReturned
	return r
}

// Maximum number of records to be returned in a single call
func (r ApiCertificateStoreTypeGetTypesRequest) CstqueryReturnLimit(cstqueryReturnLimit int32) ApiCertificateStoreTypeGetTypesRequest {
	r.cstqueryReturnLimit = &cstqueryReturnLimit
	return r
}

// Field by which the results should be sorted (view results via Management Portal for sortable columns)
func (r ApiCertificateStoreTypeGetTypesRequest) CstquerySortField(cstquerySortField string) ApiCertificateStoreTypeGetTypesRequest {
	r.cstquerySortField = &cstquerySortField
	return r
}

// Field sort direction [0&#x3D;ascending, 1&#x3D;descending]
func (r ApiCertificateStoreTypeGetTypesRequest) CstquerySortAscending(cstquerySortAscending int32) ApiCertificateStoreTypeGetTypesRequest {
	r.cstquerySortAscending = &cstquerySortAscending
	return r
}

func (r ApiCertificateStoreTypeGetTypesRequest) Execute() ([]KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse, *http.Response, error) {
	return r.ApiService.CertificateStoreTypeGetTypesExecute(r)
}

/*
CertificateStoreTypeGetTypes Returns all certificate store types according to the provided filter and output parameters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCertificateStoreTypeGetTypesRequest
*/
func (a *CertificateStoreTypeApiService) CertificateStoreTypeGetTypes(ctx context.Context) ApiCertificateStoreTypeGetTypesRequest {
	return ApiCertificateStoreTypeGetTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse
func (a *CertificateStoreTypeApiService) CertificateStoreTypeGetTypesExecute(r ApiCertificateStoreTypeGetTypesRequest) ([]KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CertificateStoreTypeApiService.CertificateStoreTypeGetTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CertificateStoreTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.cstqueryQueryString != nil {
		parameterAddToQuery(localVarQueryParams, "cstquery.queryString", r.cstqueryQueryString, "")
	}
	if r.cstqueryPageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "cstquery.pageReturned", r.cstqueryPageReturned, "")
	}
	if r.cstqueryReturnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "cstquery.returnLimit", r.cstqueryReturnLimit, "")
	}
	if r.cstquerySortField != nil {
		parameterAddToQuery(localVarQueryParams, "cstquery.sortField", r.cstquerySortField, "")
	}
	if r.cstquerySortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "cstquery.sortAscending", r.cstquerySortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCertificateStoreTypeUpdateCertificateStoreTypeRequest struct {
	ctx context.Context
	ApiService *CertificateStoreTypeApiService
	xKeyfactorRequestedWith *string
	certStoreType *KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeUpdateRequest
	xKeyfactorApiVersion *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiCertificateStoreTypeUpdateCertificateStoreTypeRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiCertificateStoreTypeUpdateCertificateStoreTypeRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Certificate store type properties to be updated
func (r ApiCertificateStoreTypeUpdateCertificateStoreTypeRequest) CertStoreType(certStoreType KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeUpdateRequest) ApiCertificateStoreTypeUpdateCertificateStoreTypeRequest {
	r.certStoreType = &certStoreType
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiCertificateStoreTypeUpdateCertificateStoreTypeRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiCertificateStoreTypeUpdateCertificateStoreTypeRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiCertificateStoreTypeUpdateCertificateStoreTypeRequest) Execute() (*KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse, *http.Response, error) {
	return r.ApiService.CertificateStoreTypeUpdateCertificateStoreTypeExecute(r)
}

/*
CertificateStoreTypeUpdateCertificateStoreType Updates an existing certificate store type with the provided properties

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCertificateStoreTypeUpdateCertificateStoreTypeRequest
*/
func (a *CertificateStoreTypeApiService) CertificateStoreTypeUpdateCertificateStoreType(ctx context.Context) ApiCertificateStoreTypeUpdateCertificateStoreTypeRequest {
	return ApiCertificateStoreTypeUpdateCertificateStoreTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse
func (a *CertificateStoreTypeApiService) CertificateStoreTypeUpdateCertificateStoreTypeExecute(r ApiCertificateStoreTypeUpdateCertificateStoreTypeRequest) (*KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KeyfactorApiModelsCertificateStoresTypesCertificateStoreTypeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CertificateStoreTypeApiService.CertificateStoreTypeUpdateCertificateStoreType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CertificateStoreTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.certStoreType == nil {
		return localVarReturnValue, nil, reportError("certStoreType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.certStoreType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
